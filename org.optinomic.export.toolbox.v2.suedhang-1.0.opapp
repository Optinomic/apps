[module]
id = org.optinomic.export.toolbox.v2.suedhang
name = Export-Toolbox (V2)
short_description = Export-Toolbox (Beta-Channel)
version = 1.0
type = user

[description]
Export Survey Responses :: This is the Beta-Channel from org.optinomic.export.toolbox (as soon as stable).

[developer]
first_name = Beat
last_name = Ottiger
github_user = ottigerb
email = beat@optinomic.com
company = Optinomic Gmbh
phone = +41 (0)44 508 26 76
website = http://www.optinomic.com/

[readme]

# Optinomic Export-Toolbox.

Easy export of survey responses with calculation values.


![bildschirmfoto 2017-11-11 um 13 10 28](https://user-images.githubusercontent.com/2470873/32689283-e595bace-c6e1-11e7-96a9-0a79d4ce1b7a.png)


Implementierte Features:    

- [x] Filter   
- [x] Einstellungen (Delimiter, Inhaltsblöcke) global übersteuern    
- [x] Run über den Button [ +  HINZUFÜGEN (LIVE-RUN) ]   


=> Falls Filter aktiv sind und die Optionen übersteuert werden, muss allenfalls erneut der Filter [ANWENDEN] erneut gedrückt werden, damit diese Optionen übersteuert werden. 


### Export-Toolbox | CREATE
Die Export-Toolbox verfügt über einen CREATE-Prozess:    
1. Datenquelle selektieren      
2. Datenfelder benennen und sortieren     
3. Optionen festlegen      
4. Export-Definition JSON-File herunterladen.     

Das so erzeugte JSON-File, kann direkt unter  [ +  HINZUFÜGEN (LIVE-RUN) ] ausgeführt, getestet und modifiziert werden.

![bildschirmfoto 2017-11-11 um 13 10 58](https://user-images.githubusercontent.com/2470873/32689285-ef12dbd6-c6e1-11e7-9bf0-fc94aed048c3.png)



### Entwickler-Info
Weitere Details für Entwickler sind hier dokumentiert:
https://github.com/Optinomic/apps/blob/master/org.optinomic.export.toolbox/readme_dev.md


# Anschrift

![image](http://www.ottiger.org/optinomic_logo/optinomic_logo_small.png)     

*Optinomic GmbH*   
*Haldenstrasse 7*     
*CH - 8942 Oberrieden*     
*+41(0)44 508 26 76*    
*info@optinomic.com*   
*[www.optinomic.com](http://www.optinomic.com)*   


[template export 6 7]
<head>
  <base href="https://cdn.rawgit.com/Optinomic/polymer2-cdn/optinomic-0.0.15/lib/">
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:100,300,400,500">
  <link rel="shortcut icon" href="optinomic-images/favicon.ico" type="image/x-icon"/>
  <script src="webcomponentsjs/webcomponents-loader.js"></script>
  <script src="redux/dist/redux.min.js"></script>
  <script src="redux-thunk/dist/redux-thunk.min.js"></script>
  <link rel="import" href="iron-flex-layout/iron-flex-layout.html">
  <link rel="import" href="iron-flex-layout/iron-flex-layout-classes.html">
  <style>

  body,
  html {
    width: 100%;
    height: 100vh;
    margin: 0;
    padding: 0;
    font-family: 'Roboto', sans-serif !important;
    -webkit-tap-highlight-color: transparent;
    -webkit-touch-callout: none;
    -webkit-text-size-adjust: 100%;
    -ms-text-size-adjust: 100%;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

</style>

<dom-module id="optinomic-styles">
  <template>
    <style>
      html, body {
  font-family: 'Roboto', sans-serif !important;
  -webkit-tap-highlight-color: transparent;
  -webkit-touch-callout: none;
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.large {
  font-size: 125%;
}

.small {
  font-size: 75%;
}

a {
  text-decoration: none;
  color: #37474F;
}


/************
 * Headings
 ************/

.display-4 {
  font-size: 117.6px;
  font-weight: 100;
  letter-spacing: -0.010em;
  line-height: 117.6px;
  color: #757575;
}

.display-3 {
  font-size: 58.8px;
  font-weight: 400;
  letter-spacing: -0.005em;
  line-height: 58.8px;
  color: #757575;
}

.display-2 {
  font-size: 47.25px;
  font-weight: 400;
  line-height: 67.2px;
  color: #757575;
}

h1, .display-1 {
  font-size: 35.7px;
  font-weight: 300;
  line-height: 42px;
  color: #757575;
  font-family: 'Roboto', sans-serif !important;
}

h2, .headline {
  font-size: 25.2px;
  font-weight: 300;
  line-height: 33.6px;
  color: #616161;
}

h3, .title {
  font-size: 21px;
  font-weight: 300;
  letter-spacing: 0.005em;
  color: #424242;
}

h4, .subhead {
  font-size: 16.8px;
  font-weight: 300;
  letter-spacing: 0.010em;
  line-height: 25.2px;
  color: #212121;
}


/************
 * Body Copy
 ************/

p, .body-1 {
  font-size: 14.7px;
  font-weight: 400;
  letter-spacing: 0.010em;
  line-height: 21px;
  color: #212121;
}

b, .body-2 {
  font-size: 14.7px;
  font-weight: 500;
  letter-spacing: 0.010em;
  line-height: 25.2px;
  color: #212121;
}

.caption {
  font-size: 12.6px;
  letter-spacing: 0.020em;
  color: #757575;
}

.button {
  letter-spacing: 0.010em;
}


/************
 * Defaults
 ************/

button, select, html, textarea, input {
  font-family: 'Roboto', sans-serif !important;
}

select, button, textarea, input {
  font-size: 100%;
}

paper-button {
  font-family: 'Roboto', 'Noto', sans-serif;
  font-weight: normal;
  font-size: 14px;
  -webkit-font-smoothing: antialiased;
}

paper-button.grey {
  color: var(--paper-grey-500);
  --paper-button-ink-color: var(--paper-grey-a200);
}

paper-button.grey:hover {
  color: var(--paper-grey-900);
  background-color: var(--paper-grey-100);
}

paper-button.pink {
  color: var(--paper-pink-800);
  background-color: var(--paper-pink-50);
  --paper-button-ink-color: var(--paper-pink-500);
}

paper-button.pink:hover {
  background-color: var(--paper-pink-500);
  color: white;
}

paper-button.indigo {
  background-color: var(--paper-indigo-50);
  color: var(--paper-indigo-800);
  --paper-button-ink-color: var(--paper-pink-500);
}

paper-button.indigo:hover {
  background-color: var(--paper-indigo-500);
  color: white;
}

paper-button.disabled {
  color: white;
}

paper-icon-button.grey {
  color: var(--paper-grey-500);
  transition: all 0.3s ease-in-out;
  --paper-icon-button-ink-color: var(--paper-grey-500);
}

paper-icon-button.grey:hover {
  color: var(--paper-grey-800);
  transform: scale(1.1);
}

paper-icon-button.pink {
  color: var(--paper-pink-500);
  transition: all 0.3s ease-in-out;
  --paper-icon-button-ink-color: var(--paper-pink-500);
}

paper-icon-button.pink:hover {
  transform: scale(1.1);
}

paper-icon-button.indigo {
  color: var(--paper-indigo-500);
  transition: all 0.3s ease-in-out;
  --paper-icon-button-ink-color: var(--paper-indigo-500);
}

paper-icon-button.indigo:hover {
  transform: scale(1.1);
}

paper-progress {
  display: block;
  width: 100%;
  margin: 10px 0;
}

paper-progress.slow {
  --paper-progress-indeterminate-cycle-duration: 5s;
}

paper-progress.indigo {
  --paper-progress-active-color: var(--paper-indigo-500);
  --paper-progress-secondary-color: var(--paper-indigo-100);
  --paper-progress-indeterminate-cycle-duration: 3s;
}

paper-progress.pink {
  --paper-progress-active-color: var(--paper-pink-500);
  --paper-progress-secondary-color: var(--paper-pink-100);
  --paper-progress-indeterminate-cycle-duration: 3s;
}

paper-tooltip {
  --paper-tooltip-background: #424242;
  --paper-tooltip-opacity: 0.85;
  --paper-tooltip: {
    font-size: 14px;
    color: #FAFAFA;
  }
}

        .horizontal {
          @apply(--layout-horizontal);
          @apply(--layout-center);
          @apply(--layout-justified);
        }

        .flex {
          @apply(--layout-flex);
        }

        .wrap {
          @apply(--layout-wrap);
        }

        .circle {
          display: inline-block;
          width: 58px;
          height: 58px;
          text-align: center;
          color: #424242;
          border-radius: 50%;
          background: #E0E0E0;
          font-size: 28px;
          font-weight: 100;
          font-family: 'Roboto', sans-serif;
          line-height: 60px;
        }

        .grid-border-top {
          border-top-color: #E0E0E0;
          border-top-style: solid;
          border-top-width: 1px;
        }

        .indigo {
          color: #3F51B5;
        }

        .pink {
          color: #E91E63;
        }


    </style>
  </template>
</dom-module>

</head>
<!--
@license
Copyright (c) 2018 Optionmic GmbH. All rights reserved.
-->
<link rel="import" href="polymer/polymer-element.html">
<link rel="import" href="polymer-redux/polymer-redux.html">
<!--
 Copyright 2017 | optinomic-redux-store | Optinomic GmbH.
 http://www.optinomic.com/
-->
<script>
  const initialState = {
  "loading": false,
  "current_patient": {
    "pid": 0
  },
  "signin": {
    "data": {
      "user_id": null,
      "token": null
    },
    "trust_computer": false,
    "isLoggedIn": false
  },
  "apps": {},
  "device": {
    "sizes": {
      "small": null,
      "medium": null,
      "large": null,
      "xlarge": null
    },
    "current": {}
  },
  "user": {
    "info": null,
    "annotations": null
  },
  "patients": {
    "0": {
      "access": {
        "access": true
      },
      "info": {},
      "stays": {
        "data": []
      },
      "events": {
        "data": {
          "aborted": [],
          "done": [],
          "irrelevant": [],
          "to_be_done": []
        }
      }
    }
  },
  "errors": [],
  "opapp": {},
  "events": {},
  "stays": {},
  "logs": {},
  "patient_groups": {
    "data": {}
  },
  "stay_groups": {
    "data": {}
  },
  "patients_list": {
    "all": {},
    "watchlist": {},
    "patient_groups": {}
  }
};


// Set "Current-Defaults"
//initialState.sidebar.current = initialState.sidebar.all[0];

  var reducer = function(state, action) {
  //console.log('REDUCER :: -----> ', state, action);
  if (!state)
    return initialState;

  switch (action.type) {
    case 'GET_DATA_STARTED':
      return Object.assign({}, state, {
        loading: true
      });

    case 'SET_PERSISTENT_STATE':
      // console.log('(----->) SET_PERSISTENT_STATE', action);
      return Object.assign({}, state, action.new_state);

    case 'SET_SIGNIN_START':
      var current_signin = Object.assign({}, state.signin);
      current_signin.data = action.signin.data;
      current_signin.isLoggedIn = action.signin.isLoggedIn;
      current_signin.trust_computer = action.signin.trust_computer;
      // console.log('(----->) SET_SIGNIN_START', action.signin, current_signin, store.getState());
      return Object.assign({}, state, {
        signin: current_signin
      });

    case 'SET_TRUST_COMPUTER':
      var current_signin = Object.assign({}, state.signin);
      current_signin.trust_computer = action.trust_computer;
      console.log('(----->) SET_TRUST_COMPUTER', action.trust_computer, current_signin, store.getState());
      return Object.assign({}, state, {
        signin: current_signin
      });

    case 'SAVE_DEVICE_SIZE_COMPLETE':
      return Object.assign({}, state, {
        device: action.data
      });

    case 'GET_USERAPPCALCULATION_COMPLETE':
      var _app_userapp_calculations = Object.assign({}, state._app_userapp_calculations);
      _app_userapp_calculations[action.data.module_calc] = action.data;
      return Object.assign({}, state, {
        _app_userapp_calculations: _app_userapp_calculations
      });

    case 'SET_OBJECT':
      {
        var current_object = {};
        var statePathArray = action.statePath.split('.');
        var name = statePathArray[0];
        statePathArray.shift();

        // Build Object to store
        if (statePathArray.length === 0) {
          current_object[action.statePath] = action.data;
        } else {
          state[name] = state[name] || {};
          var right_obj = JSON.parse(JSON.stringify(state[name]));
          setValue(right_obj, statePathArray, action.data);
          current_object[name] = right_obj;
        };

        // Save only if not equal
        var write = true;
        if (name in state) {
          if (JSON.stringify(state[name]) === JSON.stringify(current_object[name])) {
            // console.error('(Same) No need to write to state.');
            write = false;
          };
        };

        // Write if needed
        if (write) {
          return Object.assign({}, state, current_object);
        } else {
          return state;
        };

      };

    case 'ERROR':
      {
        var errors = state.errors.slice(0);
        errors.push(action.error);
        console.log('(!) Reducer Error', errors);
        return Object.assign({}, state, {
          errors: errors
        });
      };

    case 'SET_CURRENT_SIDEBAR_COMPLETE':
      {
        var sb = Object.assign({}, state.sidebar);
        sb.current = action.data;
        return Object.assign({}, state, {
          loading: false,
          sidebar: sb
        });
      };

    case 'GET_PATIENTS_LIST_COMPLETE':
      {
        var sb = Object.assign({}, state.patients_list);
        sb[action.data.path] = action.data;
        return Object.assign({}, state, {
          loading: false,
          patients_list: sb
        });
      };

    case 'GET_CURRENT_USER_COMPLETE':
      return Object.assign({}, state, {
        loading: false,
        user: action.data
      });

    default:
      return state;
  }
};

  var Session = (function() {

  var storage = localStorage;

  var isLoggedIn = function() {
    var uid = storage.getItem("optinomic_user_id");
    return !(uid === null);
  };

  var getUserID = function() {
    return parseInt(storage.getItem("optinomic_user_id"));
  };

  var getTrustComputer = function() {
    return JSON.parse(storage.getItem("optinomic_trust_computer"));
  };

  var setTrustComputer = function(trust) {
    trust = trust || false;
    storage.setItem("optinomic_trust_computer", trust);
  };

  var getToken = function() {
    return storage.getItem("optinomic_token");
  };

  var login = function(uid, token) {
    console.log('SESSION | login', uid, token);
    storage.setItem("optinomic_user_id", uid);
    storage.setItem("optinomic_token", token);

    UserStore.start();
  };

  var logout = function() {

    storage.removeItem("optinomic_user_id");
    storage.removeItem("optinomic_token");

    UserStore.stop();
    storage.removeItem("optinomic_trust_computer");
  };

  return {
    isLoggedIn: isLoggedIn,
    getUserID: getUserID,
    getToken: getToken,
    getTrustComputer: getTrustComputer,
    setTrustComputer: setTrustComputer,
    login: login,
    logout: logout
  };

})();

  const UserStore = (function() {

  // ----------------------------------
  //  Saving userStore to localStorage
  //  only when trust_computer = true
  //  logout => _enoded state.
  // ----------------------------------

  var storage = localStorage;

  //  Should we save to localStorage?
  //  Should we debug state to console?

  var localStorageOptions = {
    "name": "unknown",
    "name_prefix": "optinomic_state_",
    "name_suffix": "_encoded",
    "started": false,
    "using": false,
    "console": false
  };

  var getOptions = function() {
    return localStorageOptions;
  };

  var getStarted = function() {
    return localStorageOptions.started;
  };

  var getConsole = function() {
    return localStorageOptions.console;
  };

  var setConsole = function(console) {
    localStorageOptions.console = console;
  };

  var clear = function() {
    var storage_name = localStorageOptions.name_prefix + Session.getUserID();
    //console.warn('clear', storage_name);
    storage.removeItem(storage_name);
  };

  var clear_all = function() {
    console.warn('(clear_all) localStorage is clear now!');
    storage.clear();
  };

  var setSignin = function() {
    store.dispatch(addSignin());
  };

  // -------------------------------
  // Store - Actions
  // -------------------------------
  var addSignin = function() {

    var login_data = {
      "data": {
        "user_id": Session.getUserID(),
        "token": Session.getToken()
      },
      "isLoggedIn": Session.isLoggedIn(),
      "trust_computer": Session.getTrustComputer()
    };

    return {
      type: 'SET_SIGNIN_START',
      signin: login_data
    }
  };

  var replaceState = function(new_state) {
    //console.log('---> replaceState', new_state);
    return {
      type: 'SET_PERSISTENT_STATE',
      new_state: Object.assign({}, new_state)
    }
  };


  // -------------------------------
  // Start / Stop
  // -------------------------------

  var start = function() {

    var signin = {
      "user_id": Session.getUserID(),
      "token": Session.getToken()
    };


    var trust_computer = Session.getTrustComputer();
    if (trust_computer) {

      localStorageOptions.using = true;
      var state = store.getState();

      // Just to be sure
      if ((signin.user_id !== null) && (signin.token !== null)) {
        var user_id = signin.user_id;


        var localStorageName = localStorageOptions.name_prefix + user_id;
        localStorageOptions.name = localStorageName;


        //  Check if localStorage has Data - if yes use this!
        var persistedUserState = null;
        persistedUserState = storage.getItem(localStorageName + localStorageOptions.name_suffix);
        // console.log('(?) STORE HELPER', localStorageName, signin, persistedUserState);

        if (persistedUserState !== null) {
          // Decode persistedUserState
          var persistedUserStateDecoded = JSON.parse(decodeURIComponent(escape(atob(persistedUserState))));

          // persistedUserState is available
          // Replace currentState with persistedUserState & add new signin credentials
          store.dispatch(replaceState(persistedUserStateDecoded));
          store.dispatch(addSignin(signin));

          // Remove _encoded persistedUserState
          storage.removeItem(localStorageName + localStorageOptions.name_suffix);
          //localStorageOptions.using = true;

          console.warn('(!) -----> User_Store - encoded & persisted');


        } else {

          loggedInUserState = JSON.parse(storage.getItem(localStorageName));

          if (loggedInUserState !== null) {
            // Already Logged-In / Page-Refresh
            // Dispatch full state (replaceState) to current state
            store.dispatch(replaceState(loggedInUserState));
            store.dispatch(addSignin(signin));

            console.warn('(!) -----> User_Store - persisted');

          } else {
            // No persisted state is there
            // Dispatch only signin to current (initialState) state
            store.dispatch(addSignin(signin));
            console.warn('(!) -----> User_Store - initialState');

          };
        };


      } else {
        // console.warn('(!) -----> User_Store - unknown');
      };


    } else {
      localStorageOptions.using = false;

      // No persisted state is there
      // Dispatch only signin to current (initialState) state
      store.dispatch(addSignin(signin));
      console.warn('(!) -----> User_Store (untrusted computer) - initialState');
    };

    localStorageOptions.started = true;

  };


  var stop = function() {

    function isQuotaExceeded(e) {
      var quotaExceeded = false;
      if (e) {
        if (e.code) {
          switch (e.code) {
            case 22:
              quotaExceeded = true;
              break;
            case 1014:
              // Firefox
              if (e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {
                quotaExceeded = true;
              }
              break;
          }
        } else if (e.number === -2147024882) {
          // Internet Explorer 8
          quotaExceeded = true;
        }
      }
      return quotaExceeded;
    }

    console.warn('(✓) UserStore.stop: ', localStorageOptions.using);

    if (Session.getTrustComputer()) {

      // Make sure to persist latest state_encoded to localStorage & clear 'sigin'
      var state = store.getState();

      // Remove user_id / token
      state.signin = {
        "data": {
          "user_id": null,
          "token": null
        },
        "trust_computer": false,
        "isLoggedIn": false
      };

      // Remove _decoded version.
      storage.removeItem(localStorageOptions.name);

      try {
        var encoded = btoa(unescape(encodeURIComponent(JSON.stringify(state))));
        storage.setItem(localStorageOptions.name + "_encoded", encoded);

      } catch (e) {
        if (isQuotaExceeded(e)) {
          console.error('(!!!)', 'Storage full: Nothing saved');
        }
      };

      //console.warn('(✓) UserStore.stop:  STATE', state, encoded, localStorageOptions.name);

    };

    // GetBack to initialState
    store.dispatch(replaceState(initialState));
    localStorageOptions.name = "unknown";
    localStorageOptions.started = false;

  };


  return {
    start: start,
    stop: stop,
    clear: clear,
    clear_all: clear_all,
    setSignin: setSignin,
    getOptions: getOptions,
    getConsole: getConsole,
    getStarted: getStarted,
    setConsole: setConsole
  };

})();

  const AsyncActionsBehavior = {
  actions: {

    // ----------------------------------
    // User
    // ----------------------------------

    getCurrentUser: function(user_id) {

      user_id = user_id || helpers.getUserID();

      var api_url = '/users/' + user_id;
      var state_path = 'user.info';

      if (ApiHelpers.shouldCallNow(api_url)) {

        return function(dispatch) {

          // Do async task
          helpers.callAPI('GET', api_url, {}, {}, function(req) {
            if (req.status == 200) {

              var resp = JSON.parse(req.response);

              var user = resp.user.data;
              user.user_id = user_id;
              user.is_admin = false;
              if (user.role === 'Admin') {
                user.is_admin = true;
              };

              var response = {
                "user_id": user_id,
                "data": user
              };

              response = addOptinomicExtras(response, api_url);
              dispatch({
                "type": "SET_OBJECT",
                "data": response,
                "statePath": state_path
              });

              console.log('(✔) Data (' + api_url + '):', response);
            } else {
              // Errorhandling
              // While what action with what params error happend
              var error_action = {
                "name": "getCurrentUser",
                "params": []
              }
              error_action.params.push(user_id);

              dispatch({
                "type": "ERROR",
                "error": handleError(req, error_action)
              });
            };

          });
        };
      } else {
        return function(dispatch) {};
      };
    },

    setAnnotations: function(node, object, always) {
      node = node || 'undefined';
      object = object || {};
      always = always || false;

      var api_url = '/annotations';
      var state_path = 'annotations';

      if ((ApiHelpers.shouldCallNow(api_url)) || always) {

        return function(dispatch) {

          // Do async task
          helpers.callAPI('GET', api_url, {}, {}, function(req) {
            if (req.status == 200) {

              var annotations = JSON.parse(req.response);
              annotations[node] = object;
              var response = {
                "user_id": user_id,
                "data": annotations
              };
              console.log('(✔) Data (' + api_url + '):', response);
              response = addOptinomicExtras(response, api_url);
              dispatch({
                "type": "SET_OBJECT",
                "data": response,
                "statePath": state_path
              });

              setTimeout(function() {
                var put_parameters = {
                  "value": JSON.stringify(annotations),
                  "benign_change": "True",
                };
                // Do async task
                helpers.callAPI('PUT', api_url, {}, put_parameters, function(req) {
                  if (req.status == 204) {
                    console.log('(✔) Saved ', node);
                  } else {
                    var response = {
                      "error": true,
                      "error_message": "Failed with status code: " + req.status,
                      "status_code": req.status
                    };
                    console.error('(!) Error: ', response);
                  };
                });
              }, 250);



            } else {
              // Errorhandling
              // While what action with what params error happend
              var error_action = {
                "name": "setAnnotations",
                "params": []
              }
              error_action.params.push(node);
              error_action.params.push(object);
              error_action.params.push(always);

              dispatch({
                "type": "ERROR",
                "error": handleError(req, error_action)
              });
            };


          });
        };
      } else {
        return function(dispatch) {};
      };
    },

    getCurrentUserAnnotations: function(user_id) {

      var api_url = '/users/' + user_id + '/annotations';
      var state_path = 'user.annotations';

      if (ApiHelpers.shouldCallNow(api_url)) {

        return function(dispatch) {

          // Do async task
          helpers.callAPI('GET', api_url, {}, {}, function(req) {
            if (req.status == 200) {

              var annotations = JSON.parse(req.response);

              var response = {
                "user_id": user_id,
                "data": annotations
              };

              response = addOptinomicExtras(response, api_url);
              dispatch({
                "type": "SET_OBJECT",
                "data": response,
                "statePath": state_path

              });
              console.log('(✔) Data (' + api_url + '):', response);
            } else {
              // Errorhandling
              // While what action with what params error happend
              var error_action = {
                "name": "getCurrentUserAnnotations",
                "params": []
              }
              error_action.params.push(user_id);

              dispatch({
                "type": "ERROR",
                "error": handleError(req, error_action)
              });
            };


          });
        };
      } else {
        return function(dispatch) {};
      };
    },

    setCurrentUserAnnotations: function(user_id, node, object, always) {
      user_id = user_id || Session.getUserID();
      node = node || 'undefined';
      object = object || {};
      always = always || false;

      var api_url = '/users/' + user_id + '/annotations';
      var state_path = 'user.annotations';

      if ((ApiHelpers.shouldCallNow(api_url)) || always) {

        return function(dispatch) {

          // Do async task
          helpers.callAPI('GET', api_url, {}, {}, function(req) {
            if (req.status == 200) {

              var annotations = JSON.parse(req.response);
              annotations[node] = object;
              var response = {
                "user_id": user_id,
                "data": annotations
              };
              console.log('(✔) Data (' + api_url + '):', response);
              response = addOptinomicExtras(response, api_url);
              dispatch({
                "type": "SET_OBJECT",
                "data": response,
                "statePath": state_path
              });

              setTimeout(function() {
                var put_parameters = {
                  "value": JSON.stringify(annotations),
                  "benign_change": "True",
                };
                // Do async task
                helpers.callAPI('PUT', api_url, {}, put_parameters, function(req) {
                  if (req.status == 204) {
                    console.log('(✔) Saved ', node);
                  } else {
                    // Errorhandling
                    // While what action with what params error happend
                    var error_action = {
                      "name": "setCurrentUserAnnotations",
                      "params": []
                    };

                    error_action.params.push(user_id);
                    error_action.params.push(node);
                    error_action.params.push(object);
                    error_action.params.push(always);

                    dispatch({
                      "type": "ERROR",
                      "error": handleError(req, error_action)
                    });
                  };
                });
              }, 250);

            } else {
              // Errorhandling
              // While what action with what params error happend
              var error_action = {
                "name": "setCurrentUserAnnotations",
                "params": []
              };

              error_action.params.push(user_id);
              error_action.params.push(node);
              error_action.params.push(object);
              error_action.params.push(always);

              dispatch({
                "type": "ERROR",
                "error": handleError(req, error_action)
              });
            };


          });
        };
      } else {
        return function(dispatch) {};
      };
    },

    getCurrentUserEvents: function(user_id, status) {

      var api_url = '/users/' + user_id + '/events';
      var state_path = 'user.events';

      if (status) {
        var parmeters = {
          "status": status
        };
      } else {
        var parmeters = {};
      };

      if (ApiHelpers.shouldCallNow(api_url)) {

        return function(dispatch) {

          // Do async task
          helpers.callAPI('GET', api_url, parmeters, {}, function(req) {
            if (req.status == 200) {

              var events = JSON.parse(req.response);
              events.user_events.forEach(function(item, itemID) {
                event_pid = item.data.patient_id;
                helpers.callAPI('GET', '/patients/' + event_pid, {}, {}, function(req) {
                  if (req.status == 200) {

                    var resp = JSON.parse(req.response);
                    var patient = resp.patient;

                    var response = {
                      "data": patient.data,
                      "extras": createPatientExtras(patient.data),
                      "id": parseInt(patient.id),
                      "pid": parseInt(patient.id)
                    };

                    item.patient = response;
                  };
                });
              });

              events.role_events.forEach(function(item, itemID) {
                event_pid = item.data.patient_id;
                helpers.callAPI('GET', '/patients/' + event_pid, {}, {}, function(req) {
                  if (req.status == 200) {

                    var resp = JSON.parse(req.response);
                    var patient = resp.patient;

                    var response = {
                      "data": patient.data,
                      "extras": createPatientExtras(patient.data),
                      "id": parseInt(patient.id),
                      "pid": parseInt(patient.id)
                    };

                    item.patient = response;
                  };
                });
              });


              var response = {
                "user_id": user_id,
                "data": events
              };

              var time = (events.role_events.length + events.user_events.length + 1) * 250;

              setTimeout(function() {
                dispatch({
                  "type": "SET_OBJECT",
                  "data": response,
                  "statePath": state_path

                });
              }, time);


              response = addOptinomicExtras(response, api_url);
              console.log('(✔) Data (' + api_url + '):', response);

            } else {
              var response = {
                "error": true,
                "error_message": "Failed with status code: " + req.status,
                "status_code": req.status
              };
              console.error('(!) Error: ', response);

              response = addOptinomicExtras(response, api_url);
              dispatch({
                "type": "SET_OBJECT",
                "data": response,
                "statePath": state_path

              });
            };


          });
        };
      } else {
        return function(dispatch) {};
      };
    },


    // ----------------------------------
    // Patient (Current)
    // ----------------------------------

    getCurrentPatient: function(pid) {

      var api_url = '/patients/' + pid;
      var state_path = 'patients.' + pid + '.info';

      if (ApiHelpers.shouldCallNow(api_url)) {

        return function(dispatch) {

          // Do async task
          helpers.callAPI('GET', api_url, {}, {}, function(req) {
            if (req.status == 200) {

              var resp = JSON.parse(req.response);

              var patient = resp.patient;

              var response = {
                "data": patient.data,
                "extras": createPatientExtras(patient.data),
                "pid": parseInt(pid)
              };

              response = addOptinomicExtras(response, api_url);
              dispatch({
                "type": "SET_OBJECT",
                "data": response,
                "statePath": state_path

              });
              dispatch({
                "type": "SET_OBJECT",
                "data": parseInt(pid),
                "statePath": 'current_patient.pid'

              });
              console.log('(✔) Data (' + api_url + '):', response);
            } else {
              // Errorhandling
              // While what action with what params error happend
              var error_action = {
                "name": "getCurrentPatient",
                "params": []
              };
              error_action.params.push(pid);

              dispatch({
                "type": "ERROR",
                "error": handleError(req, error_action)
              });
            };


          });
        };
      } else {
        return function(dispatch) {};
      };
    },

    getCurrentPatientAccess: function(pid) {

      var api_url = '/patients/' + pid + '/access';
      var state_path = 'patients.' + pid + '.access';


      if (ApiHelpers.shouldCallNow(api_url)) {

        return function(dispatch) {

          // Do async task
          helpers.callAPI('GET', api_url, {}, {}, function(req) {
            if (req.status == 204) {

              var response = {
                "access": true,
                "pid": parseInt(pid)
              };

              response = addOptinomicExtras(response, api_url);
              dispatch({
                "type": "SET_OBJECT",
                "data": parseInt(pid),
                "statePath": 'current_patient.pid'
              });
              dispatch({
                "type": "SET_OBJECT",
                "data": response,
                "statePath": state_path
              });

              console.log('(✔) Data (' + api_url + '):', response);
            } else {

              var response = {
                "access": false,
                "pid": parseInt(pid)
              };

              response = addOptinomicExtras(response, api_url);
              dispatch({
                "type": "SET_OBJECT",
                "data": parseInt(pid),
                "statePath": 'current_patient.pid'
              });
              dispatch({
                "type": "SET_OBJECT",
                "data": response,
                "statePath": state_path
              });

              console.log('(✔) Data (' + api_url + '):', response);

            };


          });
        };
      } else {
        return function(dispatch) {};
      };
    },

    getCurrentPatientStays: function(pid, always) {
      always = always || false;
      var api_url = '/patients/' + pid + '/stays';
      var state_path = 'patients.' + pid + '.stays';

      var shouldCallNow = ApiHelpers.shouldCallNow(api_url);

      if (shouldCallNow || always) {

        return function(dispatch) {

          // Do async task
          helpers.callAPI('GET', api_url, {}, {}, function(req) {

            if (req.status == 200) {

              var resp = JSON.parse(req.response);

              var stays = resp.stays;
              var stays_array = [];
              stays.forEach(function(stay, ID) {
                stays_array.push(stay.id);

                stay.data.id = stay.id;
                stay.data.fid = stay.id;
                stay.extras = createStayExtras(stay.data);

                var stay_response = {
                  "data": stay.data,
                  "extras": stay.extras,
                  "id": stay.id,
                  "fid": stay.id
                };

                dispatch({
                  "type": "SET_OBJECT",
                  "data": stay_response,
                  "statePath": 'stays.' + stay.id + '.info'
                });
              });

              var response = {
                "data": stays_array
              };

              response = addOptinomicExtras(response, api_url);
              dispatch({
                "type": "SET_OBJECT",
                "data": response,
                "statePath": state_path

              });

              console.log('(✔) Data (' + api_url + '):', response);
            } else {
              // Errorhandling
              // While what action with what params error happend
              var error_action = {
                "name": "getCurrentPatientStays",
                "params": []
              };
              error_action.params.push(pid);

              dispatch({
                "type": "ERROR",
                "error": handleError(req, error_action)
              });
            };

          });
        };
      } else {
        return function(dispatch) {};
      };
    },

    getCurrentPatientEvents: function(pid, store_events) {
      if ((store_events === null) || (store_events === undefined)) {
        store_events = true;
      };

      var api_url = '/patients/' + pid + '/events';
      var state_path = 'patients.' + pid + '.events';


      if (ApiHelpers.shouldCallNow(api_url + "_" + store_events)) {
        return function(dispatch) {

          // Do async task
          helpers.callAPI('GET', api_url, {}, {}, function(req) {
            if (req.status == 200) {

              var resp = JSON.parse(req.response);

              var events = resp.events;
              var events_done = [];
              var events_to_be_done = [];
              var events_aborted = [];
              var events_irrelevant = [];

              // Get already stored events
              var stored_events = store.getState();
              if ("events" in stored_events) {
                stored_events = stored_events.events;
              } else {
                stored_events = {};
              };

              events.forEach(function(event, ID) {
                event.data.id = event.id;
                event.data.event_id = event.id;
                event.extras = createEventExtras(event.data);

                if (event.data.status === 'done') {
                  events_done.push(event.id);
                };
                if (event.data.status === 'to_be_done') {
                  events_to_be_done.push(event.id);
                };
                if (event.data.status === 'aborted') {
                  events_aborted.push(event.id);
                };
                if (event.data.status === 'irrelevant') {
                  events_irrelevant.push(event.id);
                };



                // Store events - only if not already stored
                if ((store_events) && (event.data.status !== 'irrelevant')) {
                  Polymer.RenderStatus.afterNextRender(event, function() {
                    if ((stored_events[event.id] === undefined) || (stored_events[event.id] === null)) {
                      dispatch({
                        "type": "SET_OBJECT",
                        "data": event,
                        "statePath": 'events.' + event.id
                      });
                    };
                  });
                };
              });

              var response = {
                "data": {
                  "done": events_done,
                  "to_be_done": events_to_be_done,
                  "aborted": events_aborted,
                  "irrelevant": events_irrelevant
                }
              };

              response = addOptinomicExtras(response, api_url);

              dispatch({
                "type": "SET_OBJECT",
                "data": response,
                "statePath": state_path
              });
              console.log('(✔) Data (' + api_url + '):', response);
            } else {
              // Errorhandling
              // While what action with what params error happend
              var error_action = {
                "name": "getCurrentPatientEvents",
                "params": []
              };
              error_action.params.push(pid);

              dispatch({
                "type": "ERROR",
                "error": handleError(req, error_action)
              });
            };



          });
        };
      } else {
        return function(dispatch) {};
      };
    },


    // ----------------------------------
    // Apps
    // ----------------------------------

    getApps: function() {

      var api_url = '/modules';
      var state_path = 'apps.all';

      if (ApiHelpers.shouldCallNow(api_url)) {

        return function(dispatch) {

          var parameters = {}

          // Do async task
          helpers.callAPI('GET', api_url, parameters, {}, function(req) {
            if (req.status == 200) {


              var resp = JSON.parse(req.response);

              // Sortieren nach App-Name
              if (resp.patient_modules.length > 0) {


                resp.patient_modules.sort(function(a, b) {
                  var nameA = a.name.toUpperCase(); // ignore upper and lowercase
                  var nameB = b.name.toUpperCase(); // ignore upper and lowercase
                  if (nameA < nameB) {
                    return -1;
                  }
                  if (nameA > nameB) {
                    return 1;
                  }
                  return 0;
                });
                resp.current = {
                  "found": false
                };

                resp.patient_modules.forEach(function(m, mID) {
                  m.first_template = {
                    "found": "false",
                    "name": null
                  };

                  if (m.templates.length > 0) {
                    m.first_template.name = m.templates["0"].name;
                    m.first_template.found = true;
                  };

                  if (m.identifier === helpers.getAppID()) {
                    resp.current.data = m;
                    resp.current.name = m.name;
                    resp.current.found = true;
                  }

                });

              };
              if (resp.user_modules.length > 0) {
                resp.user_modules.sort(function(a, b) {
                  var nameA = a.name.toUpperCase(); // ignore upper and lowercase
                  var nameB = b.name.toUpperCase(); // ignore upper and lowercase
                  if (nameA < nameB) {
                    return -1;
                  }
                  if (nameA > nameB) {
                    return 1;
                  }
                  return 0;
                });

                resp.user_modules.forEach(function(m, mID) {
                  m.first_template = {
                    "found": "false",
                    "name": null
                  };

                  if (m.templates.length > 0) {
                    m.first_template.name = m.templates["0"].name;
                    m.first_template.found = true;
                  };

                  if (m.identifier === helpers.getAppID()) {
                    resp.current.data = m;
                    resp.current.name = m.name;
                    resp.current.found = true;
                  }
                });
              };



              if (resp.current.found) {
                resp.current = addOptinomicExtras(resp.current, api_url);
                dispatch({
                  "type": "SET_OBJECT",
                  "data": resp.current,
                  "statePath": 'apps.current'
                });
              };

              var response = {
                "data": {
                  "patient_modules": resp.patient_modules,
                  "user_modules": resp.user_modules
                }
              };

              response = addOptinomicExtras(response, api_url);
              dispatch({
                "type": "SET_OBJECT",
                "data": response,
                "statePath": state_path

              });

              console.log('(✔) Data (' + api_url + '):', response, parameters);
            } else {
              // Errorhandling
              // While what action with what params error happend
              var error_action = {
                "name": "getApps",
                "params": []
              };

              dispatch({
                "type": "ERROR",
                "error": handleError(req, error_action)
              });
            };

          });
        };
      } else {
        return function(dispatch) {};
      };
    },

    getAppsActivations: function() {

      // Unneded for now!

      var api_url = '/module_activations';
      var state_path = 'apps.activations';

      if (ApiHelpers.shouldCallNow(api_url)) {

        return function(dispatch) {

          var parameters = {}

          // Do async task
          helpers.callAPI('GET', api_url, parameters, {}, function(req) {
            if (req.status == 200) {

              var resp = JSON.parse(req.response);

              var response = {
                "data": resp.module_activations
              };

              response = addOptinomicExtras(response, api_url);
              dispatch({
                "type": "SET_OBJECT",
                "data": response,
                "statePath": state_path
              });

              console.log('(✔) Data (' + api_url + '):', response, parameters);
            } else {
              // Errorhandling
              // While what action with what params error happend
              var error_action = {
                "name": "getAppsActivations",
                "params": []
              };

              dispatch({
                "type": "ERROR",
                "error": handleError(req, error_action)
              });
            };

          });
        };
      } else {
        return function(dispatch) {};
      };
    },

    getStayApps: function(pid, fid, always) {

      always = always || false;
      var api_url = '/patients/' + pid + '/modules';
      var state_path = 'stays.' + fid + '.apps_activated';

      if (always ||  (ApiHelpers.shouldCallNow(api_url + "?" + pid + "," + fid, 180))) {

        return function(dispatch) {

          var parameters = {}

          if (fid !== undefined) {
            parameters.stay_id = fid;
          };

          // Do async task
          helpers.callAPI('GET', api_url, parameters, {}, function(req) {
            if (req.status == 200) {

              var resp = JSON.parse(req.response);

              // Sortieren nach App-Name
              if (resp.activated_patient_uses_modules.length > 0) {
                resp.activated_patient_uses_modules.sort(function(a, b) {
                  var nameA = a.module.name.toUpperCase(); // ignore upper and lowercase
                  var nameB = b.module.name.toUpperCase(); // ignore upper and lowercase
                  if (nameA < nameB) {
                    return -1;
                  }
                  if (nameA > nameB) {
                    return 1;
                  }
                  return 0;
                });

                resp.activated_patient_uses_modules.forEach(function(m, mID) {
                  m.module.first_template = {
                    "found": "false",
                    "name": null
                  };

                  if (m.module.templates.length > 0) {
                    m.module.first_template.name = m.module.templates["0"].name;
                    m.module.first_template.found = true;
                  };
                });

              };

              if (resp.deactivated_modules.length > 0) {
                resp.deactivated_modules.sort(function(a, b) {
                  var nameA = a.name.toUpperCase(); // ignore upper and lowercase
                  var nameB = b.name.toUpperCase(); // ignore upper and lowercase
                  if (nameA < nameB) {
                    return -1;
                  }
                  if (nameA > nameB) {
                    return 1;
                  }
                  return 0;
                });
              };

              var response = {
                "activated": resp.activated_patient_uses_modules,
                "deactivated": resp.deactivated_modules
              };

              response = addOptinomicExtras(response, api_url);
              dispatch({
                "type": "SET_OBJECT",
                "data": response,
                "statePath": state_path

              });

              console.log('(✔) Data (' + api_url + '):', response, parameters);
            } else {
              // Errorhandling
              // While what action with what params error happend
              var error_action = {
                "name": "getStayApps",
                "params": []
              };

              error_action.params.push(pid);
              error_action.params.push(fid);
              error_action.params.push(always);

              dispatch({
                "type": "ERROR",
                "error": handleError(req, error_action)
              });
            };



          });
        };
      } else {
        return function(dispatch) {};
      };
    },

    activateApp: function(pid, fid, aid) {

      var api_url = '/patients/' + pid + '/activate_module';

      if (ApiHelpers.shouldCallNow(api_url + "?" + fid + "/" + aid)) {

        return function(dispatch) {

          var parameters = {}

          if (fid !== undefined) {
            parameters.module_identifier = aid;
            parameters.stay_id = fid;
          };

          // Do async task
          helpers.callAPI('POST', api_url, parameters, {}, function(req) {
            if (req.status == 204) {
              console.log('(✔) Success :: ', pid, fid, aid, ' activated');

              // Make things refresh
              dispatch('setObject', 'current_patient.fid', '');
              dispatch('setObject', 'current_patient.fid', fid);

            } else {
              console.log('(!) Error :: ', pid, fid, aid, ' not activated');
            };
          });
        };
      } else {
        return function(dispatch) {};
      };
    },

    deactivateApp: function(pid, fid, aid) {

      var api_url = '/patients/' + pid + '/deactivate_module';

      if (ApiHelpers.shouldCallNow(api_url + "?" + fid + "/" + aid)) {

        return function(dispatch) {

          var parameters = {}

          if (fid !== undefined) {
            parameters.module_identifier = aid;
            parameters.stay_id = fid;
          };

          // Do async task
          helpers.callAPI('POST', api_url, parameters, {}, function(req) {
            if (req.status == 204) {
              console.log('(✔) Success :: ', pid, fid, aid, ' deactivated');

              // Make things refresh
              dispatch('setObject', 'current_patient.fid', '');
              dispatch('setObject', 'current_patient.fid', fid);
            } else {
              console.log('(!) Error :: ', pid, fid, aid, ' not deactivated');
            };
          });
        };
      } else {
        return function(dispatch) {};
      };
    },


    // ----------------------------------
    // Apps - User
    // ----------------------------------

    getUserApps: function(uid, always) {
      always = always || false;
      // GET /users/:user_id/modules
      uid = uid || Session.getUserID();
      var api_url = '/users/' + uid + '/modules';
      var state_path = 'user.apps';

      if ((always === true) || (ApiHelpers.shouldCallNow(api_url))) {

        return function(dispatch) {

          var parameters = {}

          // Do async task
          helpers.callAPI('GET', api_url, parameters, {}, function(req) {
            if (req.status == 200) {

              var resp = JSON.parse(req.response);


              // user_uses_modules
              var user_uses_modules = [];
              resp.user_uses_modules.forEach(function(app, moduleID) {
                if (app.module !== null) {

                  app.module.first_template = {
                    "found": "false",
                    "name": null
                  };

                  if (app.module.templates.length > 0) {
                    app.module.first_template.name = app.module.templates["0"].name;
                    app.module.first_template.found = true;
                  };

                  user_uses_modules.push(app);

                };
              });

              // console.warn('RESP:::', resp, user_uses_modules);

              // Sortieren nach App-Name
              if (user_uses_modules.length > 0) {
                user_uses_modules.sort(function(a, b) {
                  var nameA = a.module.name.toUpperCase(); // ignore upper and lowercase
                  var nameB = b.module.name.toUpperCase(); // ignore upper and lowercase
                  if (nameA < nameB) {
                    return -1;
                  }
                  if (nameA > nameB) {
                    return 1;
                  }
                  return 0;
                });
              };

              var response = {
                "data": user_uses_modules
              };

              response = addOptinomicExtras(response, api_url);
              dispatch({
                "type": "SET_OBJECT",
                "data": response,
                "statePath": state_path
              });

              console.log('(✔) Data (' + api_url + '):', response, parameters);
            } else {
              // Errorhandling
              // While what action with what params error happend
              var error_action = {
                "name": "getUserApps",
                "params": []
              };
              error_action.params.push(uid);
              error_action.params.push(always);

              dispatch({
                "type": "ERROR",
                "error": handleError(req, error_action)
              });
            };

          });
        };
      } else {
        return function(dispatch) {};
      };
    },

    activateUserApp: function(uid, aid) {

      var api_url = '/users/' + uid + '/activate_module';

      if (ApiHelpers.shouldCallNow(api_url + "?" + aid)) {

        return function(dispatch) {

          var parameters = {
            "module_identifier": aid
          }

          // Do async task
          helpers.callAPI('POST', api_url, parameters, {}, function(req) {
            if (req.status == 204) {
              console.log('(✔) Success :: ', uid, aid, ' activated');
              this.dispatch('getUserApps', Session.getUserID(), true);
            } else {
              console.log('(!) Error :: ', uid, aid, ' not activated');
            };
          }.bind(this));
        };
      } else {
        return function(dispatch) {};
      };
    },

    deactivateUserApp: function(uid, aid) {

      var api_url = '/users/' + uid + '/deactivate_module';

      if (ApiHelpers.shouldCallNow(api_url + "?" + aid)) {

        return function(dispatch) {

          var parameters = {
            "module_identifier": aid
          }

          // Do async task
          helpers.callAPI('POST', api_url, parameters, {}, function(req) {
            if (req.status == 204) {
              console.log('(✔) Success :: ', uid, aid, ' deactivated');
              this.dispatch('getUserApps', Session.getUserID(), true);
            } else {
              console.log('(!) Error :: ', uid, aid, ' not deactivated');
            };
          }.bind(this));
        };
      } else {
        return function(dispatch) {};
      };
    },

    // ----------------------------------
    // App-Store
    // ----------------------------------

    activateAppStoreApp: function(module_identifier, version, name_overwrite) {

      var api_url = '/module_activations';

      return function(dispatch) {

        var parameters = {
          "module_identifier": module_identifier,
          "version": version,
          "name_overwrite": name_overwrite
        }

        // Do async task
        helpers.callAPI('POST', api_url, parameters, {}, function(req) {
          if (req.status == 200) {
            console.log('(✔) Success :: Activated', module_identifier);
            this.dispatch('getGenericCalls', '/modules', 'apps.all', '');
            this.dispatch('getGenericCalls', '/module_activations', 'apps.activated', 'module_activations');
            this.dispatch('getGenericCalls', '/modules/disabled', 'apps.disabled', '');
            this.dispatch('getGenericCalls', '/modules/errors', 'apps.error', 'module_errors');
          } else {

            var error_text = "(!) Error :: Activation"
            if (req.status == 400) {
              error_text = error_text + " | Bad Request in case of validation error";
            };
            if (req.status == 409) {
              error_text = error_text + " | Conflict in case of a problem with the module dependencies";
            };
            console.log(error_text, parameters);
          };
        }.bind(this));
      };

    },

    deactivateAppStoreApp: function(activation_id) {

      var api_url = '/module_activations/' + activation_id;

      return function(dispatch) {

        var parameters = {}

        // Do async task
        helpers.callAPI('DELETE', api_url, parameters, {}, function(req) {
          if (req.status == 204) {
            console.log('(✔) Success :: Deactivated', activation_id);
            this.dispatch('getGenericCalls', '/modules', 'apps.all', '');
            this.dispatch('getGenericCalls', '/module_activations', 'apps.activated', 'module_activations');
            this.dispatch('getGenericCalls', '/modules/disabled', 'apps.disabled', '');
            this.dispatch('getGenericCalls', '/modules/errors', 'apps.error', 'module_errors');
          } else {
            console.log('(!) Error :: Not Deactivated', activation_id);
          };
        }.bind(this));
      };

    },

    renameAppStoreApp: function(activation_id, name_overwrite) {

      var api_url = '/module_activations/' + activation_id;

      return function(dispatch) {

        var parameters = {
          "name_overwrite": name_overwrite
        }

        // Do async task
        helpers.callAPI('PUT', api_url, parameters, {}, function(req) {
          if (req.status == 204) {
            console.log('(✔) Success :: Renamed', activation_id, name_overwrite);
            this.dispatch('getGenericCalls', '/modules', 'apps.all', '');
          } else {
            console.log('(!) Error :: Not renamed', activation_id, api_url, parameters);
          };
        }.bind(this));
      };

    },


    // ----------------------------------
    // Patient - Lists
    // ----------------------------------

    getAllPatients: function() {

      var api_url = '/patients';
      var state_path = 'patients_list.all';

      if (ApiHelpers.shouldCallNow(api_url)) {

        return function(dispatch) {

          // Do async task
          helpers.callAPI('GET', api_url, {}, {}, function(req) {
            if (req.status == 200) {

              var resp = JSON.parse(req.response);

              var patients = resp.patients;
              patients.forEach(function(patient, ID) {
                patient.data.id = patient.id;
                patient.data.fid = patient.id;
                patient.extras = createPatientExtras(patient.data);
              });

              var response = {
                "data": patients
              };

              response = addOptinomicExtras(response, api_url);
              dispatch({
                "type": "SET_OBJECT",
                "data": response,
                "statePath": state_path

              });

              console.log('(✔) Data (' + api_url + '):', response);
            } else {
              // Errorhandling
              // While what action with what params error happend
              var error_action = {
                "name": "getAllPatients",
                "params": []
              };

              dispatch({
                "type": "ERROR",
                "error": handleError(req, error_action)
              });
            };


          });
        };
      } else {
        return function(dispatch) {};
      };
    },

    getFilterPatients: function(filter) {

      var api_url = '/patients';
      var state_path = 'patients_list.filter';

      if (ApiHelpers.shouldCallNow(api_url)) {

        return function(dispatch) {

          // Do async task
          helpers.callAPI('GET', api_url, filter, {}, function(req) {
            if (req.status == 200) {

              var resp = JSON.parse(req.response);

              var patients = resp.patients;
              patients.forEach(function(patient, ID) {
                patient.data.id = patient.id;
                patient.data.fid = patient.id;
                patient.extras = createPatientExtras(patient.data);
              });

              var response = {
                "data": patients
              };

              response = addOptinomicExtras(response, api_url);
              dispatch({
                "type": "SET_OBJECT",
                "data": response,
                "statePath": state_path
              });

              console.log('(✔) Data (' + api_url + '):', response);
            } else {
              // Errorhandling
              // While what action with what params error happend
              var error_action = {
                "name": "getFilterPatients",
                "params": []
              };
              error_action.params.push(filter);

              dispatch({
                "type": "ERROR",
                "error": handleError(req, error_action)
              });
            };


          });
        };
      } else {
        return function(dispatch) {};
      };
    },

    getWatchlistPatients: function(user_id) {

      user_id = user_id || Session.getUserID();
      var api_url = '/watchlist/' + user_id;
      var state_path = 'patients_list.watchlist';


      return function(dispatch) {

        // Do async task
        helpers.callAPI('GET', api_url, {}, {}, function(req) {
          if (req.status == 200) {

            var resp = JSON.parse(req.response);

            var patients = resp.patients;


            patients.forEach(function(patient, ID) {
              patient.data.id = patient.id;
              patient.data.fid = patient.id;
              patient.extras = createPatientExtras(patient.data);
            });

            // Sortieren nach App-Name
            if (patients.length > 0) {
              patients.sort(function(a, b) {
                var nameA = a.extras.name.toUpperCase(); // ignore upper and lowercase
                var nameB = b.extras.name.toUpperCase(); // ignore upper and lowercase
                if (nameA < nameB) {
                  return -1;
                }
                if (nameA > nameB) {
                  return 1;
                }
                return 0;
              });
            };

            var response = {
              "user_id": user_id,
              "data": patients
            };

            response = addOptinomicExtras(response, api_url);
            dispatch({
              "type": "SET_OBJECT",
              "data": response,
              "statePath": state_path
            });

            console.log('(✔) Data (' + api_url + '):', response);
          } else {
            // Errorhandling
            // While what action with what params error happend
            var error_action = {
              "name": "getWatchlistPatients",
              "params": []
            };
            error_action.params.push(user_id);

            dispatch({
              "type": "ERROR",
              "error": handleError(req, error_action)
            });
          };


        });
      };

    },

    getPGPatients: function(pg_id) {

      pg_id = pg_id || 1;
      var api_url = "/patient_groups/" + pg_id + "/patients";
      var state_path = "patients_list.patient_groups." + pg_id;

      if (ApiHelpers.shouldCallNow(api_url)) {

        return function(dispatch) {

          // Do async task
          helpers.callAPI('GET', api_url, {}, {}, function(req) {
            if (req.status == 200) {

              var resp = JSON.parse(req.response);

              var patients = resp.patients;
              patients.forEach(function(patient, ID) {
                patient.data.id = patient.id;
                patient.data.fid = patient.id;
                patient.extras = createPatientExtras(patient.data);
              });

              // Sortieren nach Name, Vorname
              if (patients.length > 0) {
                patients.sort(function(a, b) {
                  var nameA = a.extras.name.toUpperCase() + a.data.birthdate; // ignore upper and lowercase
                  var nameB = b.extras.name.toUpperCase() + b.data.birthdate; // ignore upper and lowercase
                  if (nameA < nameB) {
                    return -1;
                  }
                  if (nameA > nameB) {
                    return 1;
                  }
                  return 0;
                });
              };

              var response = {
                "patient_group": pg_id,
                "data": patients
              };

              response = addOptinomicExtras(response, api_url);
              dispatch({
                "type": "SET_OBJECT",
                "data": response,
                "statePath": state_path
              });
              console.log('(✔) Data (' + api_url + '):', response);
            } else {
              // Errorhandling
              // While what action with what params error happend
              var error_action = {
                "name": "getPGPatients",
                "params": []
              };
              error_action.params.push(pg_id);

              dispatch({
                "type": "ERROR",
                "error": handleError(req, error_action)
              });
            };

          });
        };
      } else {
        return function(dispatch) {};
      };
    },

    getAllPG: function() {
      var api_url = '/patient_groups';

      if (ApiHelpers.shouldCallNow(api_url)) {

        return function(dispatch) {

          // Do async task
          helpers.callAPI('GET', api_url, {}, {}, function(req) {
            if (req.status == 200) {

              var resp = JSON.parse(req.response);

              var patient_groups = resp.patient_groups;
              var patient_groups_array = [];
              patient_groups.forEach(function(pg, pgID) {
                patient_groups_array.push(pg.id);

                pg.data.id = pg.id;

                var pg_response = {
                  "data": pg.data,
                  "id": pg.id
                };

                dispatch({
                  "type": "SET_OBJECT",
                  "data": pg_response,
                  "statePath": 'patient_groups.data.' + pg.id
                });
              });

              dispatch({
                "type": "SET_OBJECT",
                "data": patient_groups_array,
                "statePath": 'patient_groups.all'
              });

              console.log('(✔) Data (' + api_url + '):', patient_groups_array);
            } else {
              // Errorhandling
              // While what action with what params error happend
              var error_action = {
                "name": "getAllPG",
                "params": []
              };

              dispatch({
                "type": "ERROR",
                "error": handleError(req, error_action)
              });
            };

          });
        };
      } else {
        return function(dispatch) {};
      };
    },

    getUserPG: function() {

      var api_url = '/patient_group_watchlist/' + Session.getUserID();

      if (ApiHelpers.shouldCallNow(api_url)) {

        return function(dispatch) {

          // Do async task
          helpers.callAPI('GET', api_url, {}, {}, function(req) {
            if (req.status == 200) {

              var resp = JSON.parse(req.response);

              var patient_groups = resp.patient_groups;
              var patient_groups_array = [];
              patient_groups.forEach(function(pg, pgID) {
                patient_groups_array.push(pg.id);

                pg.data.id = pg.id;

                var pg_response = {
                  "data": pg.data,
                  "id": pg.id
                };

                dispatch({
                  "type": "SET_OBJECT",
                  "data": pg_response,
                  "statePath": 'patient_groups.data.' + pg.id
                });
              });


              dispatch({
                "type": "SET_OBJECT",
                "data": patient_groups,
                "statePath": 'patient_groups.user'
              });


              console.log('(✔) Data (' + api_url + '):', patient_groups);
            } else {
              // Errorhandling
              // While what action with what params error happend
              var error_action = {
                "name": "getUserPG",
                "params": []
              };

              dispatch({
                "type": "ERROR",
                "error": handleError(req, error_action)
              });
            };

          });
        };
      } else {
        return function(dispatch) {};
      };
    },

    // ----------------------------------
    // Stay - Groups
    // ----------------------------------

    getAllSG: function() {
      var api_url = '/stay_groups';

      if (ApiHelpers.shouldCallNow(api_url)) {

        return function(dispatch) {

          // Do async task
          helpers.callAPI('GET', api_url, {}, {}, function(req) {
            if (req.status == 200) {

              var resp = JSON.parse(req.response);

              var stay_groups = resp.stay_groups;
              var stay_groups_array = [];
              stay_groups.forEach(function(pg, pgID) {
                stay_groups_array.push(pg.id);

                pg.data.id = pg.id;

                var sg_response = {
                  "data": pg.data,
                  "id": pg.id
                };

                dispatch({
                  "type": "SET_OBJECT",
                  "data": sg_response,
                  "statePath": 'stay_groups.data.' + pg.id
                });
              });

              dispatch({
                "type": "SET_OBJECT",
                "data": stay_groups_array,
                "statePath": 'stay_groups.all'
              });

              console.log('(✔) Data (' + api_url + '):', stay_groups_array);
            } else {
              // Errorhandling
              // While what action with what params error happend
              var error_action = {
                "name": "getAllSG",
                "params": []
              };

              dispatch({
                "type": "ERROR",
                "error": handleError(req, error_action)
              });
            };

          });
        };
      } else {
        return function(dispatch) {};
      };
    },

    getSGStays: function(sg_id) {

      sg_id = sg_id || 1;
      var api_url = "/stay_groups/" + sg_id + "/stays";
      var state_path = "stays_list.stay_groups." + sg_id;

      if (ApiHelpers.shouldCallNow(api_url)) {

        return function(dispatch) {

          // Do async task
          helpers.callAPI('GET', api_url, {}, {}, function(req) {
            if (req.status == 200) {

              var resp = JSON.parse(req.response);

              var stays = resp.stays;
              stays.forEach(function(stay, ID) {
                stay.data.id = stay.id;
                stay.extras = createStayExtras(stay.data);
              });

              var response = {
                "stay_group": parseInt(sg_id),
                "data": stays
              };

              response = addOptinomicExtras(response, api_url);
              dispatch({
                "type": "SET_OBJECT",
                "data": response,
                "statePath": state_path
              });
              console.log('(✔) Data (' + api_url + '):', response);
            } else {
              // Errorhandling
              // While what action with what params error happend
              var error_action = {
                "name": "getSGStays",
                "params": []
              };
              error_action.params.push(sg_id);

              dispatch({
                "type": "ERROR",
                "error": handleError(req, error_action)
              });
            };

          });
        };
      } else {
        return function(dispatch) {};
      };
    },

    // ----------------------------------
    // Clinic
    // ----------------------------------

    getClinic: function() {

      var api_url = '/clinic';
      var state_path = 'clinic.info';


      if (ApiHelpers.shouldCallNow(api_url)) {

        return function(dispatch) {

          // Do async task
          helpers.callAPI('GET', api_url, {}, {}, function(req) {
            if (req.status == 200) {

              var resp = JSON.parse(req.response);
              var clinic = resp.clinic;

              var clinic_obj = {};
              clinic.forEach(function(current, ID) {
                clinic_obj[current[0]] = current[1];
              });

              var response = {
                data: {
                  "clinic_array": clinic,
                  "clinic_obj": clinic_obj
                }
              };

              response = addOptinomicExtras(response, api_url);
              console.log('(✔) Data (' + api_url + '):', response);

              dispatch({
                "type": "SET_OBJECT",
                "data": response,
                "statePath": state_path
              });

            } else {
              // Errorhandling
              // While what action with what params error happend
              var error_action = {
                "name": "getClinic",
                "params": []
              };

              dispatch({
                "type": "ERROR",
                "error": handleError(req, error_action)
              });
            };

          });
        };
      } else {
        return function(dispatch) {};
      };
    },


    // ----------------------------------
    // System - Logs
    // ----------------------------------

    getLogs: function(filter) {

      filter = filter || {};

      var api_url = '/logs';
      var state_path = 'logs';


      if (ApiHelpers.shouldCallNow(api_url)) {

        return function(dispatch) {

          // Do async task
          helpers.callAPI('GET', api_url, filter, {}, function(req) {
            if (req.status == 200) {

              var resp = JSON.parse(req.response);
              var logs = resp.logs;

              var response = {
                data: logs
              };

              response = addOptinomicExtras(response, api_url);
              dispatch({
                "type": "SET_OBJECT",
                "data": response,
                "statePath": state_path
              });
              console.log('(✔) Data (' + api_url + '):', response);
            } else {
              // Errorhandling
              // While what action with what params error happend
              var error_action = {
                "name": "getLogs",
                "params": []
              };
              error_action.params.push(filter);

              dispatch({
                "type": "ERROR",
                "error": handleError(req, error_action)
              });
            };

          });
        };
      } else {
        return function(dispatch) {};
      };
    },


    // ----------------------------------
    // Generic
    // ----------------------------------

    setObject: function(statePath, myObject) {
      return function(dispatch) {

        myObject = myObject === undefined ? {} : myObject;
        statePath = statePath === undefined ? 'undefined' : statePath;

        dispatch({
          type: 'SET_OBJECT',
          data: myObject,
          statePath: statePath
        });

      }
    },

    getGenericCalls: function(api_url, state_path, inner_path) {

      inner_path = inner_path || null;

      if (ApiHelpers.shouldCallNow(api_url + ' ' + state_path)) {

        return function(dispatch) {

          // Do async task
          helpers.callAPI('GET', api_url, {}, {}, function(req) {
            if (req.status == 200) {

              var resp = JSON.parse(req.response);

              if (inner_path !== null) {
                resp = resp[inner_path];
              };

              var response = {
                "data": resp
              };

              response = addOptinomicExtras(response, api_url);
              dispatch({
                "type": "SET_OBJECT",
                "data": response,
                "statePath": state_path
              });

              console.log('(✔) Data (' + api_url + '):', response);
            } else {
              // Errorhandling
              // While what action with what params error happend
              var error_action = {
                "name": "getGenericCalls",
                "params": []
              };
              error_action.params.push(api_url);
              error_action.params.push(state_path);
              error_action.params.push(inner_path);

              dispatch({
                "type": "ERROR",
                "error": handleError(req, error_action)
              });
            };


          });
        };
      } else {
        return function(dispatch) {};
      };
    },


    // ----------------------------------
    // App
    // ----------------------------------

    saveDeviceSize: function(current_size_obj) {
      return function(dispatch) {


        var response = {
          "sizes": {
            "small": false,
            "medium": false,
            "large": false,
            "xlarge": false
          },
          "current": current_size_obj
        };

        response.sizes[current_size_obj.size] = true;

        dispatch({
          type: 'SAVE_DEVICE_SIZE_COMPLETE',
          data: response
        });
      }
    },

    setCurrentSidebar: function(current_sidebar) {
      return function(dispatch) {

        dispatch({
          type: 'SET_CURRENT_SIDEBAR_COMPLETE',
          data: current_sidebar
        });

      }
    },

    getAppVersion: function() {

      var api_url = '/version';
      var state_path = 'app.version';

      if (ApiHelpers.shouldCallNow(api_url)) {

        return function(dispatch) {

          // Do async task
          helpers.callAPI('GET', api_url, {}, {}, function(req) {
            if (req.status == 200) {

              var resp = JSON.parse(req.response);
              var version = resp.version

              var response = {
                "data": {
                  "version": version,
                  "short": version.substring(0, 7),
                  "github": "https://github.com/ottigerb/therapy-server/commit/" + version,
                }
              };

              response = addOptinomicExtras(response, api_url);
              dispatch({
                "type": "SET_OBJECT",
                "data": response,
                "statePath": state_path
              });
              console.log('(✔) Data (' + api_url + '):', response);
            } else {
              // Errorhandling
              // While what action with what params error happend
              var error_action = {
                "name": "getAppVersion",
                "params": []
              };

              dispatch({
                "type": "ERROR",
                "error": handleError(req, error_action)
              });
            };

          });
        };
      } else {
        return function(dispatch) {};
      };
    },


    // ----------------------------------
    // OPAPP
    // ----------------------------------

    actionSaveParams: function(params) {
      return function(dispatch) {

        dispatch({
          "type": "SET_OBJECT",
          "data": params,
          "statePath": 'opapp.params'
        });

      }
    },

    actionGetSurveyResponses: function(requested_app_id) {

      return function(dispatch) {

        module_identifier = requested_app_id === undefined ? helpers.getAppID() : requested_app_id;
        console.log('(?) actionGetSurveyResponses', module_identifier);


        var current_stay_id = parseInt(helpers.getStayID());
        var current_pid = parseInt(helpers.getPatientID());

        var data_request = 'undefined';
        var calculation_results_api_url = '/patients/' + current_pid + '/calculations/' + module_identifier;
        if (current_stay_id) {
          var api_url = '/stays/' + current_stay_id + '/survey_responses/' + module_identifier + '/full';
          data_request = 'stay';
        } else {
          var api_url = '/patients/' + current_pid + '/survey_responses/' + module_identifier + '/full';
          data_request = 'patient';
        };

        // Do async task
        helpers.callAPI('GET', api_url, {}, {}, function(req) {

          var app_id = requested_app_id === undefined ? helpers.getAppID() : requested_app_id;
          //console.log('(?) actionGetSurveyResponses | app_id', app_id);

          if (req.status == 200) {
            var resp = JSON.parse(req.response);


            helpers.callAPI('GET', calculation_results_api_url, {}, {}, function(inner_req) {

              if (req.status == 200) {
                var inner_resp = JSON.parse(inner_req.response);
                var calculation_results = inner_resp.calculation_results;

                // console.log('actionGetSurveyResponsesNew:: resp', resp, inner_resp);


                // Reformat req
                var return_array = [];
                resp.survey_responses.forEach(function(current_response, srID) {
                  var return_obj = {};

                  return_obj.all_found = false;

                  return_obj.app_id = null;
                  return_obj.date = current_response.data.filled;

                  return_obj.response_id = current_response.id;
                  return_obj.response = current_response.data.response;

                  return_obj.event = null;
                  return_obj.event_found = false;
                  return_obj.event_id = current_response.data.event_id;

                  return_obj.patient = null;
                  return_obj.patient_found = false;
                  return_obj.patient_id = null;

                  return_obj.stay = null;
                  return_obj.stay_found = false;
                  return_obj.stay_id = null;

                  return_obj.patient_uses_module = null;
                  return_obj.patient_uses_module_found = false;
                  return_obj.patient_uses_module_id = null;

                  return_obj.calculation = {};
                  return_obj.calculation_found = false;
                  return_obj.calculation_found_method = null;


                  resp.events.forEach(function(current_event, eventID) {
                    if (current_event.id === current_response.data.event_id) {
                      return_obj.event_found = true;

                      current_event.data.id = current_event.id;
                      return_obj.event = current_event.data;
                      return_obj.patient_uses_module_id = current_event.data.patient_uses_module_id;
                      return_obj.patient_id = current_event.data.patient_id;
                      return_obj.app_id = current_event.data.module;
                      app_id = return_obj.app_id;
                    };
                  });


                  if (return_obj.event_found) {
                    resp.patients.forEach(function(current_patient, patientID) {
                      if (current_patient.id === return_obj.patient_id) {
                        return_obj.patient_found = true;

                        current_patient.data.id = current_patient.id;
                        current_patient.data.pid = current_patient.id;

                        current_patient.data = createPatientExtras(current_patient.data);
                        return_obj.patient = current_patient.data;
                      };
                    });

                    resp.patient_uses_modules.forEach(function(current_pum, pumID) {
                      if (current_pum.id === return_obj.patient_uses_module_id) {
                        return_obj.patient_uses_module_found = true;
                        current_pum.data.id = current_pum.id;
                        return_obj.patient_uses_module = current_pum.data;
                        return_obj.stay_id = current_pum.data.stay_id;

                      };
                    });
                  };

                  if (return_obj.stay_id) {
                    resp.stays.forEach(function(current_stay, stayID) {
                      if (current_stay.id === return_obj.stay_id) {
                        return_obj.stay_found = true;

                        current_stay.data.id = current_stay.id;
                        current_stay.data.fid = current_stay.id;
                        current_stay.data = createStayExtras(current_stay.data);

                        return_obj.stay = current_stay.data;
                      };
                    });
                  };

                  // console.error('-> resp.calculations', resp.calculations);
                  calculation_results.forEach(function(current_calculation_top, calculationID) {
                    var calculation_name = current_calculation_top.name;


                    if (current_calculation_top.result.length > 0) {
                      current_calculation_top.result.forEach(function(current_calculation, calculationID) {
                        var variant_info = false;
                        if ("info" in current_calculation) {
                          if ("response" in current_calculation.info) {
                            variant_info = true;
                          };
                        };

                        var variant_response = false;
                        if ("response" in current_calculation) {
                          if ("data" in current_calculation.response) {
                            if ("response" in current_calculation.response.data) {
                              variant_response = true;
                            };
                          };
                        };

                        if (variant_info) {
                          var calc_resp = current_calculation.info.response;

                          if (JSON.stringify(calc_resp) === JSON.stringify(return_obj.response)) {
                            // console.log('(+) EQUAL: ', calc_resp);

                            return_obj.calculation_found = true;
                            return_obj.calculation_found_method = "variant_info";
                            return_obj.calculation[calculation_name] = current_calculation;
                          };
                        };

                        if (variant_response) {
                          var calc_resp = current_calculation.response.data.response;

                          if (JSON.stringify(calc_resp) === JSON.stringify(return_obj.response)) {
                            // console.log('(+) EQUAL: ', calc_resp);

                            return_obj.calculation_found = true;
                            return_obj.calculation_found_method = "variant_response";
                            return_obj.calculation[calculation_name] = current_calculation;

                          } else {

                            if ("TMTAError" in calc_resp) {
                              // TMT - Special
                              // console.error('DEBUG HERE ::', calc_resp, return_obj.response, current_calculation);

                              if ((parseInt(calc_resp.TMTAError) === parseInt(return_obj.response.TMTAError)) &&
                                (parseInt(calc_resp.TMTATime) === parseInt(return_obj.response.TMTATime)) &&
                                (parseInt(calc_resp.TMTBError) === parseInt(return_obj.response.TMTBError)) &&
                                (parseInt(calc_resp.TMTBTime) === parseInt(return_obj.response.TMTBTime)) &&
                                (parseInt(calc_resp.Ausbildungsjahre) === parseInt(return_obj.response.Ausbildungsjahre)) &&
                                (parseInt(calc_resp.Messzeitpunkt) === parseInt(return_obj.response.Messzeitpunkt))
                              ) {

                                return_obj.calculation_found = true;
                                return_obj.calculation_found_method = "variant_response_tmt";
                                return_obj.calculation[calculation_name] = current_calculation;
                              };

                            };

                          };
                        };
                      });
                    };
                  });


                  if (return_obj.calculation_found && return_obj.event_found && return_obj.patient_found && return_obj.stay_found && return_obj.patient_uses_module_found) {
                    return_obj.all_found = true;
                  };

                  return_array.push(return_obj);
                });


                if (return_array.length > 0) {
                  var have_data = true;

                  // Sort
                  return_array.sort(function(a, b) {
                    var nameA = a.date.toUpperCase(); // ignore upper and lowercase
                    var nameB = b.date.toUpperCase(); // ignore upper and lowercase
                    if (nameA < nameB) {
                      return -1;
                    }
                    if (nameA > nameB) {
                      return 1;
                    }
                    return 0;
                  });
                } else {
                  var have_data = false;
                };

                var response = {
                  "date": new Date(),
                  "data": return_array,
                  "calculations_all": calculation_results,
                  "have_data": have_data,
                  "possible_data": true,
                  "request": data_request,
                  "pid": current_pid,
                  "fid": current_stay_id,
                  "app_id": app_id
                };
                console.log('(✔) Data (' + api_url + '):', response);



                dispatch({
                  "type": "SET_OBJECT",
                  "data": response,
                  "statePath": 'survey_responses.data.' + ApiHelpers.safeAppID(requested_app_id)
                });


              } else {
                var response = {
                  "error": true,
                  "error_message": "Failed with status code: " + req.status,
                  "status_code": req.status,
                  "request": data_request,
                  "app_id": app_id
                };
                console.error('(!) Error: ', response);
              };
            });

          } else {
            var response = {
              "error": true,
              "error_message": "Failed with status code: " + req.status,
              "status_code": req.status,
              "request": data_request,
              "app_id": app_id
            };
            console.error('(!) Error: ', response);
          };

        });
      }
    },

    actionGetUserAppCalculation: function(module_identifier, calculation_identifier) {
      return function(dispatch) {

        const api_url = '/calculations/' + module_identifier + '/' + calculation_identifier;
        // Do async task
        helpers.callAPI('GET', api_url, {}, {}, function(req) {
          if (req.status == 200) {
            var resp = JSON.parse(req.response);

            var calculation_result = null;
            if ("calculation_result" in resp) {
              calculation_result = resp.calculation_result;
            } else {
              calculation_result = resp;
            };

            var _module_identifier = module_identifier.split('.').join('_');
            var _calculation_identifier = calculation_identifier;
            var module_calc = _module_identifier + "___" + _calculation_identifier;

            var response = {
              "date": new Date(),
              "module_calc": module_calc,
              "module_identifier": module_identifier,
              "calculation_identifier": calculation_identifier,
              "data": calculation_result
            };

            console.log('(✔) Data (' + api_url + '):', response);

            dispatch({
              type: 'GET_USERAPPCALCULATION_COMPLETE',
              data: response
            });

          } else {
            var response = {
              "error": true,
              "error_message": "Failed with status code: " + req.status,
              "status_code": req.status
            };
            console.error('(!) Error: ', response);
          };

        });
      }
    },

  }
};

  var ApiHelpers = (function() {

  var encodeParams = function(obj) {
    var str = [];
    for (var p in obj) {
      if (obj[p] != null && obj[p] != undefined) {
        str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
      }
    }
    return str.join("&");
  };



  var apiCalls = {
    "update_older_x_seconds": 2,
    "calls": {},
    "requests": {},
    "timestamp": {},
  };


  var shouldCallNow = function(path, update_if_older_x_seconds) {

    return_value = false;
    if (UserStore.getStarted()) {

      update_if_older_x_seconds = update_if_older_x_seconds || apiCalls.update_older_x_seconds;

      path = path || "undefined";
      var reason = null;

      apiCalls.requests[path] = apiCalls.requests[path] + 1 || 1;

      // First Call is always allowed:
      if (apiCalls.requests[path] === 1) {
        return_value = true;
        reason = "first_call";
      };

      // If last request is outdated then = true;
      if (apiCalls.timestamp[path]) {
        var duration = Math.floor((new Date() - Date.parse(apiCalls.timestamp[path])) / 1000);

        if (duration > update_if_older_x_seconds) {
          return_value = true;
          reason = duration + " is older then: " + update_if_older_x_seconds;
          apiCalls.timestamp[path] = apiCalls.timestamp[path] = new Date();
        } else {
          apiCalls.timestamp[path] = apiCalls.timestamp[path] = new Date();
        };

      } else {
        apiCalls.timestamp[path] = apiCalls.timestamp[path] = new Date();
      };

      // Save executed calls:
      if (return_value) {
        apiCalls.calls[path] = apiCalls.calls[path] + 1 || 1;
        // console.warn('(?) callAPI | shouldCallNow :: ', path, return_value, reason, apiCalls);
      };
    };

    return return_value;

  };

  var clearShouldCallNow = function() {
    apiCalls.calls = {};
    apiCalls.requests = {};
    apiCalls.timestamp = {};

    console.warn('clearShouldCallNow CLEAR', apiCalls);
  };

  var createList = function(array, name) {
    array = array || [];
    name = name || null;

    var list_object = {};
    var count = array.length;

    list_object[name + "_count"] = count;
    array.forEach(function(i, iID) {
      list_object[name + iID] = i;
    });

    return list_object;
  };


  var safeAppID = function(app_id) {
    return app_id.split(".").join("_");
  };


  return {
    shouldCallNow: shouldCallNow,
    clearShouldCallNow: clearShouldCallNow,
    createList: createList,
    safeAppID: safeAppID
  };

})();

  // ----------------------------
// Helpers
// ----------------------------

// Add timestamp & API-URL to every request
addOptinomicExtras = function(obj, api_url) {
  api_url = api_url || null;
  obj.api_timestamp = new Date().toISOString();
  obj.api_url = api_url;
  return obj;
};


// Add timestamp & API-URL to every request
handleError = function(req, error_action) {

  var error = {
    "error": true,
    "error_message": "Failed with status code: " + req.status,
    "status": req.status,
    "statusText": req.statusText,
    "responseURL": req.responseURL,
    "readyState": req.readyState,
    "error_action": error_action
  };

  try {
    var responseText = JSON.parse(req.responseText);
    if ("error" in responseText) {
      error.responseErrorText = responseText.error;
    };
  } catch (err) {
    error.responseErrorText = null
  };

  if (req.status !== 0) {
    console.error("(!) " + req.status + " (" + req.statusText + ")", error);
    // window.location.href = "#/errors";
  };

  return error;
};


// Set Value on Obj
function setValue(obj, access, value) {
  //console.error('---> (setValue)', obj, access, value);

  if (typeof(access) == 'string') {
    access = access.split('.');
  }
  if (access.length > 1) {
    var init = obj[access[0]] || {};
    setValue(obj[access.shift()] = init, access, value);
  } else {
    obj[access[0]] = value;
  }
};


debounce = function(fn, wait) {
  var timeout = null;
  var c = function() {
    clearTimeout(timeout);
    timeout = null;
  };
  var t = function(fn) {
    timeout = setTimeout(fn, wait);
  };
  return function() {
    var context = this;
    var args = arguments;
    var f = function() {
      fn.apply(context, args);
    };
    timeout
      ?
      c() || t(f) : t(c) || f();
  }
}


formatDateCH = function(date_string) {
  date_string = date_string || null
  if (date_string !== null) {

    // 1952-11-19T00:00:00.000000000000Z
    var year = parseInt(date_string.substring(0, 4));
    var month = parseInt(date_string.substring(5, 7));
    var day = parseInt(date_string.substring(8, 10));
    var date_string_return = day + "." + month + "." + year

    return date_string_return;
  } else {
    return null;
  }
};

createPatientExtras = function(patient) {

  function getAge(dateString) {
    var today = new Date();
    var birthDate = new Date(dateString);
    var age = today.getFullYear() - birthDate.getFullYear();
    var m = today.getMonth() - birthDate.getMonth();
    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
      age--;
    }
    return age;
  }


  // patient.age = $filter('dateToAge')(patient.birthdate);
  // patient.birthday = $filter('date')(patient.birthdate);

  patient.extras = {};
  patient.extras.age = getAge(patient.birthdate);

  patient.extras.birthday = formatDateCH(patient.birthdate);
  patient.extras.birthday_age = patient.extras.birthday + ' | ' + patient.extras.age;


  patient.extras.name = patient.last_name + ' ' + patient.first_name;

  if (patient.gender === 'male') {
    patient.extras.ansprache = 'Herr';
    patient.extras.anrede = 'Herr ' + patient.last_name;
  } else {
    patient.extras.ansprache = 'Frau';
    patient.extras.anrede = 'Frau ' + patient.last_name;
  };
  patient.extras.full_name = patient.extras.ansprache + ' ' + patient.extras.name + ' (' + patient.extras.birthday_age + ')';

  patient.extras.full_address = patient.address1 + ', ' + patient.zip_code + ' ' + patient.city;

  var myPhone = '';
  if (patient.phone_home) {
    myPhone = patient.phone_home;
  }
  if (patient.phone_mobile) {
    if (myPhone != '') {
      myPhone = myPhone + ', ' + patient.phone_mobile;
    } else {
      myPhone = patient.phone_mobile;
    }
  }
  patient.extras.phone = myPhone;
  patient.extras.infoline = patient.extras.full_address

  if (myPhone != '') {
    patient.extras.infoline + ' | ' + patient.extras.phone;
  };


  // -----------------------------------
  // Female = Pink | Male = Blue
  // -----------------------------------
  var myColor = "#3F51B5";
  var myColorAccent = "#E91E63";
  if (patient.gender === "female") {
    myColor = "#E91E63";
    myColorAccent = "#3F51B5";
  }
  patient.extras.color_main = myColor;
  patient.extras.color_accent = myColorAccent;

  return patient.extras;
};

createStayExtras = function(current_stay) {
  current_stay.extras = {};
  current_stay.extras.in_stay = false;

  // Calculate - Duration of the stay
  if (current_stay.stop) {
    current_stay.extras.duration = Math.floor((Date.parse(current_stay.stop) - Date.parse(current_stay.start)) / 86400000);
    current_stay.extras.duration = current_stay.extras.duration + 1; //incl. start & stop date
  } else {
    current_stay.extras.duration = Math.floor((new Date() - Date.parse(current_stay.start)) / 86400000);
  };

  // phase - translation
  var phase = current_stay.phase;
  var translated_de = "";
  if (phase === 'before_stay') {
    translated_de = "Bevorstehende Behandlung";
    translated_en = "the stay starts in the future";
  };
  if (phase === 'in_stay') {
    translated_de = "In aktueller Behandlung";
    translated_en = "the patient is currently in stay";
    current_stay.extras.in_stay = true;
  };
  if (phase === 'after_exit') {
    translated_de = "Die Behandlung wurde vor weniger als 14 Tage beendet";
    translated_en = "the stay ended less than 14 days ago (included)";
  };
  if (phase === 'frozen') {
    translated_de = "Die Behandlung wurde manuell eingefroren";
    translated_en = "the stay has manually been frozen (no more events, changes, ...)";
  };
  if (phase === 'unfrozen') {
    translated_de = "Die Behandlung ist abgeschlossen, wurde jedoch zur Bearbeitung wieder geöffnet";
    translated_en = "the stay is complete but has been unfrozen by somebody";
  };
  if (phase === 'complete') {
    translated_de = "Die Behandlung wurde vor mehr als 14 Tage beendet";
    translated_en = "the stay ended more than 14 days ago";
  };
  current_stay.extras.phase_de = translated_de;
  current_stay.extras.phase_en = translated_en;

  // from_to
  current_stay.extras.beginn = formatDateCH(current_stay.start);
  current_stay.extras.from_to = formatDateCH(current_stay.start);
  current_stay.extras.from_to = current_stay.extras.from_to + ' - ';
  if (current_stay.stop) {
    current_stay.extras.from_to = current_stay.extras.from_to + formatDateCH(current_stay.stop);
    current_stay.extras.ende = formatDateCH(current_stay.stop);
  } else {
    current_stay.extras.from_to = current_stay.extras.from_to + "Unbekannt";
  };

  return current_stay.extras;
};

createEventExtras = function(current_event) {
  var extras = {};

  extras.created_at = formatDateCH(current_event.created_at);
  extras.due = formatDateCH(current_event.due);
  extras.status = current_event.status.charAt(0).toUpperCase() + current_event.status.slice(1);

  extras.status_de = "Undefined";
  if (current_event.status === 'done') {
    extras.status_de = "Erledigt";
    extras.show_do_it_now = false;
  };
  if (current_event.status === 'to_be_done') {
    extras.status_de = "Offen";
    extras.show_do_it_now = true;
  };
  if (current_event.status === 'aborted') {
    extras.status_de = "Abgebrochen";
    extras.show_do_it_now = false;
  };
  if (current_event.status === 'irrelevant') {
    extras.status_de = "Nicht relevant";
    extras.show_do_it_now = false;
  };

  return extras;
}



  // ----------------------------  Redux Store ----------------------------

  const store = Redux.createStore(reducer, Redux.applyMiddleware(ReduxThunk.default));

  const ReduxBehavior = PolymerRedux(store);

  UserStore.start();
</script>

<link rel="import" href="optinomic-elements/optinomic-title/optinomic-title.html">
<link rel="import" href="iron-icons/iron-icons.html">
<link rel="import" href="neon-animation/web-animations.html">
<link rel="import" href="paper-button/paper-button.html">
<link rel="import" href="paper-icon-button/paper-icon-button.html">
<link rel="import" href="paper-tooltip/paper-tooltip.html">
<script>
  opappBehavior = {

    properties: {

      // --------------------------- Clinic ---------------------------

      _clinic_info: {
        type: Object,
        statePath: 'clinic.info.data.clinic_obj'
      },

      _clinic_extra_config: {
        type: Object,
        statePath: 'clinic.extra_config.data'
      },

      // --------------------------- Users ---------------------------

      _users_all: {
        type: Array,
        statePath: 'users.users.data'
      },

      _users_roles: {
        type: Array,
        statePath: 'users.roles.data'
      },

      // --------------------------- Device ---------------------------

      _device_current: {
        type: Boolean,
        statePath: 'device.current'
      },

      _is_small: {
        type: Boolean,
        statePath: 'device.sizes.small'
      },
      _is_medium: {
        type: Boolean,
        statePath: 'device.sizes.medium'
      },
      _is_large: {
        type: Boolean,
        statePath: 'device.sizes.large'
      },
      _is_xlarge: {
        type: Boolean,
        statePath: 'device.sizes.xlarge'
      }
    },

    // --------------------------- Navigation ---------------------------

    _forward: function (page) {
      this.page = page;
      window.location.href = "#/" + page;
      //console.log('--> Forwarding to /', page);
    },

    _forward_user: function () {
      window.location.href = "#/user";
    },

    // --------------------------- Lifecycle ---------------------------

    created: function () {
      // console.log('opappBehavior for ', this, 'enabled!');
    }
  };
</script>



<dom-module id="optinomic-app">
  <template>
    <style include="optinomic-styles">
      :host {
        display: block;
      }

      paper-progress {
        display: block;
        width: 100%;
        position: fixed;
        top: 0;
        left: 0;
        z-index: 10;
        --paper-progress-active-color: rgba(255, 255, 255, 0.5);
        --paper-progress-container-color: #9E9E9E;
      }

      .app_actions {
        display: block;
        position: absolute;
        top: 1px;
        right: 52px;
        z-index: 10;
      }

      .readme_container {
        background-color: #FAFAFA;
        padding: 24px 48px;
        border-radius: 24px;
      }

    </style>
    <div class="app_actions">
      <template is="dom-if" if="[[!_show_help]]" restamp="true">
        <paper-icon-button id="btn-help" class="grey" on-tap="_toggleHelp" icon="help-outline"></paper-icon-button>
        <paper-tooltip for="btn-help" position="left">Hilfe | Readme anzeigen</paper-tooltip>
      </template>
      <template is="dom-if" if="[[_show_help]]" restamp="true">
        <paper-icon-button id="btn-help" class="pink" on-tap="_toggleHelp" icon="close"></paper-icon-button>
        <paper-tooltip for="btn-help" position="left">Hilfe | Readme schliessen</paper-tooltip>
      </template>
    </div>

    <template is="dom-if" if="[[!_show_help]]" restamp="true">
      <optinomic-template name="template"></optinomic-template>
    </template>

    <div hidden$="[[!_show_help]]" style="padding:48px;">
      <optinomic-title h1="[[_current_app.name]]" h2="[[_current_app.short_description]]" h3="Readme"></optinomic-title>
      <div id="readme" class="readme_container"></div>
      <div class="horizontal">
        <p class="caption">&nbsp;V.[[_current_app.version]] | [[_current_app.identifier]]</p>
        <paper-button class="grey" on-click="_toggleHelp">Schliessen</paper-button>
      </div>

      <template is="dom-if" if="[[_user.isAdmin]]">
        <div style="margin-top: 64px;margin-bottom: 24px;">
          <paper-icon-button class="pink" on-tap="_logState" icon="bug-report"></paper-icon-button>
          <paper-icon-button class="indigo" on-tap="_loadData" icon="refresh"></paper-icon-button>
        </div>
      </template>
    </div>

  </template>
  <script>
    /** @optinomicApp */
class optinomicApp extends ReduxBehavior(Polymer.Element) {
  static get is() {
    return 'optinomic-app';
  }

  static get actions() {
    return AsyncActionsBehavior.actions;
  }

  static get properties() {
    return {

      _user: {
        type: Object,
        statePath: 'user.info.data'
      },
      _current_app: {
        type: Object,
        statePath: 'apps.current.data',
        observer: '_current_appChanged'
      },
      _current_patient_pid: {
        type: Number,
        statePath: 'current_patient.pid'
      },
    };
  }

  // ---------------- Functions ----------------

  _toggleHelp() {
    this.set('_show_help', !this._show_help);

    if (this._show_help) {
      Polymer.RenderStatus.afterNextRender(this, function() {
        var readme = this.$.readme;
        readme.innerHTML = this._current_app.readme.html;
      });
    };
  }

  _logState() {
    this._debouncer = Polymer.Debouncer.debounce(this._debouncer, Polymer.Async.timeOut.after(250), () => {

      var state = this.getState();
      console.warn('(✔) OpApp-State', state);

    });
  }

  // ---------------- Observers ----------------

  _current_appChanged() {
    this._debouncer = Polymer.Debouncer.debounce(this._debouncer, Polymer.Async.timeOut.after(250), () => {

      try {
        if (this._current_app.type === 'patient') {
          this._loadPatientData();
        };
      } catch (err) {
        console.warn('_current_appChanged', err, this._current_app);
      };

    });
  }


  // ---------------- Init ----------------


  _loadData() {
    Polymer.RenderStatus.afterNextRender(this, function() {
      console.warn('(START) _loadData');

      // loadData
      this.dispatch('getCurrentUser');
      this.dispatch('getApps');
      this.dispatch('getClinic');

    });
  }

  _loadPatientData() {
    Polymer.RenderStatus.afterNextRender(this, function() {
      console.warn('(START) _loadPatientData');

      if ((this._current_patient_pid !== NaN) && (this._current_patient_pid !== 0) && (this._current_patient_access !== null)) {
        if (ApiHelpers.shouldCallNow('_loadPatientData_' + helpers.getPatientID(), 2)) {

          this.dispatch('getCurrentPatient', helpers.getPatientID());
          this.dispatch('getCurrentPatientStays', helpers.getPatientID());
          this.dispatch('getStayApps', helpers.getPatientID(), helpers.getStayID());

        };
      };

    });
  }

  _init() {
    this.set('_show_help', false);

    // Save Params
    var params = {
      "userID": parseInt(helpers.getUserID()),
      "patientID": parseInt(helpers.getPatientID()),
      "stayID": parseInt(helpers.getStayID()),
      "token": helpers.getToken(),
      "appName": helpers.getAppName(),
      "appID": helpers.getAppID(),
      "apiURL": helpers.getApiURL()
    };
    this.set('params', params);
    this.dispatch('actionSaveParams', params);

    // Save Params @ current_patient
    // So we can share Behaviors from /client
    var href = window.location.href;
    var start = href.search("view/") + 5;
    var end = href.search("#patient_id=");
    var template = href.substr(start, (end - start));

    var current_patient = {
      "pid": parseInt(helpers.getPatientID()),
      "fid": parseInt(helpers.getStayID()),
      "aid": helpers.getAppID(),
      "template": template
    };
    this.dispatch('setObject', 'current_patient', current_patient);

    console.log('(✔) OpApp-Init', params, current_patient);

    setTimeout(function() {
      this._logState();
    }.bind(this), 2500);

  }

  // ---------------- Lifecycle ----------------
  ready() {
    super.ready();
    this._init();
    this._loadData();
  }
}

window.customElements.define(optinomicApp.is, optinomicApp);

  </script>
</dom-module>

<optinomic-app name="main"></optinomic-app>


<script>
  optinomicExportToolbox = {

    behaviors: [],

    properties: {
      _calculation_data_source: {
        type: Object
      }
    },

    // -------------------------------- INIT --------------------------------

    __setSources: function () {
      var _array_source = [];

      // -------------------------------------------- Datenquellen definieren! -------------------------------------------- "userapp_calculation_id" muss mit .opapp übereinstimmen!   Bsp.: "tmt_full" bei: [calculation tmt_full javascript
      // ch.suedhang.apps.tmt_V3 ch.suedhang.apps.tmt_V3:tmt_score] Index ist eine ID zur Quelle :: Nicht ändern, auch falls "userapp_calculation_id" ändert!

        _array_source.push({
            "name": "AASE-G",
            "index": "aase",
            "userapp_calculation_id": "aase_new"
        });

        _array_source.push({
            "name": "ActInfo | Austritt",
            "index": "actinfo_aus",
            "userapp_calculation_id": "actinfo_aus"
        });

        _array_source.push({
            "name": "ActInfo | Eintritt",
            "index": "actinfo_ein",
            "userapp_calculation_id": "actinfo_ein"
        });

        _array_source.push({
            "name": "ASRS",
            "index": "asrs",
            "userapp_calculation_id": "asrs"
        });

        _array_source.push({
            "name": "BDI-II",
            "index": "bdi",
            "userapp_calculation_id": "bdi"
        });

        _array_source.push({
            "name": "BSCL (ANQ)",
            "index": "bscl",
            "userapp_calculation_id": "bscl_ua_calc",
            "userapp_id": "org.optinomic.export.toolbox.v2.suedhang"
        });

        _array_source.push({
            "name": "CASE",
            "index": "case",
            "userapp_calculation_id": "case"
        });

        _array_source.push({
            "name": "Einzelassessment",
            "index": "einzelassessment",
            "userapp_calculation_id": "einzelassessment"
        });

        _array_source.push({
            "name": "HoNOS",
            "index": "honos",
            "userapp_calculation_id": "honos_ua_calc",
            "userapp_id": "org.optinomic.export.toolbox.v2.suedhang"
        });        
          
        _array_source.push({
            "name": "Soziale Kompetenzen (ISK)",
            "index": "isk",
            "userapp_calculation_id": "isk"
        });

        _array_source.push({
            "name": "SCI",
            "index": "sci",
            "userapp_calculation_id": "sci"
        });

        _array_source.push({
            "name": "Trail Making Test (TMT)",
            "index": "tmt",
            "userapp_calculation_id": "tmt"
        });

        _array_source.push({
            "name": "WHOQOL-BREF",
            "index": "whoqol",
            "userapp_calculation_id": "whoqol"
        });

        _array_source.push({
            "name": "ZuePaZ",
            "index": "zuepaz",
            "userapp_calculation_id": "zuepaz"
        });


      // Create Indexed Object & Default for all
      var _object_source = {};

      _array_source.forEach(function (d, dID) {
        d.id = dID;

        if ("userapp_id" in d) {
            // use the given
        } else {
            d.userapp_id = "org.optinomic.export.toolbox.suedhang";
        };

        _object_source[d.index] = d;
      });

      var save_object = {
        "array": _array_source,
        "object": _object_source,
        "init_done": true
      };

      // Save
      this.set('_calculation_sources', save_object);
      this._calculation_sources = {};
      this._calculation_sources = save_object;

      // ------------------------------------------------------------- Inculde Export-File Definitons Create Array of all Export-File Definitons Add NEW Files here!

      var export_files = [];
      export_files.push({
  "options": {
    "name": "AASE-G",
    "description": "aase",
    "export_optinomic_ids": false,
    "export_patient_details": false,
    "export_stay_details": false,
    "export_header": true,
    "delimter": ";",
    "source": "aase"
  },
  "fields": [
    { "name": "MedStatFid", "path": "_function", "function": "var cis_pid = source.patient.cis_pid + '00'; var cis_fid = source.stay.cis_fid + ''; var medstatfid = parseInt(cis_pid + cis_fid.slice(cis_fid.length - 4, cis_fid.length - 2)); return medstatfid;" },
    { "path": "_function", "function": "return source.stay.cis_fid/100", "name":"FID" },
    { "path": "survey_response.response.Erhebungszeitpunkt", "name": "Erhebungszeitpunkt" },
    { "path": "survey_response.response.andererZeitpunkt", "name": "andererZeitpunkt" },
    { "path": "_function", "function": "return ExportHelpers.formatDateISONoTime(source.survey_response.response.Datum);", "name": "Datum" },
    { "path": "_function", "function": "var substanz = source.calculation.messzeitpunkt.substanz; if (substanz==='Alkohol') {return '1'} else {return '2'};", "name": "Substanz"},
    { "path": "_function", "function": "var substanz = source.calculation.messzeitpunkt.substanz; if (substanz==='Alkohol') {return ''} else {return substanz};", "name": "andereSubstanz"},
    { "path": "_function", "function": "var substanz = source.calculation.messzeitpunkt.substanz; if (substanz==='Alkohol') {return source.survey_response.response['AASE[AASE1]']} else { return source.survey_response.response['AASEandere[AASE1]'] };", "name": "AASE_01" },
    { "path": "_function", "function": "var substanz = source.calculation.messzeitpunkt.substanz; if (substanz==='Alkohol') {return source.survey_response.response['AASE[AASE2]']} else { return source.survey_response.response['AASEandere[AASE2]'] };", "name": "AASE_02" },
    { "path": "_function", "function": "var substanz = source.calculation.messzeitpunkt.substanz; if (substanz==='Alkohol') {return source.survey_response.response['AASE[AASE3]']} else { return source.survey_response.response['AASEandere[AASE3]'] };", "name": "AASE_03" },
    { "path": "_function", "function": "var substanz = source.calculation.messzeitpunkt.substanz; if (substanz==='Alkohol') {return source.survey_response.response['AASE[AASE4]']} else { return source.survey_response.response['AASEandere[AASE4]'] };", "name": "AASE_04" },
    { "path": "_function", "function": "var substanz = source.calculation.messzeitpunkt.substanz; if (substanz==='Alkohol') {return source.survey_response.response['AASE[AASE5]']} else { return source.survey_response.response['AASEandere[AASE5]'] };", "name": "AASE_05" },
    { "path": "_function", "function": "var substanz = source.calculation.messzeitpunkt.substanz; if (substanz==='Alkohol') {return source.survey_response.response['AASE[AASE6]']} else { return source.survey_response.response['AASEandere[AASE6]'] };", "name": "AASE_06" },
    { "path": "_function", "function": "var substanz = source.calculation.messzeitpunkt.substanz; if (substanz==='Alkohol') {return source.survey_response.response['AASE[AASE7]']} else { return source.survey_response.response['AASEandere[AASE7]'] };", "name": "AASE_07" },
    { "path": "_function", "function": "var substanz = source.calculation.messzeitpunkt.substanz; if (substanz==='Alkohol') {return source.survey_response.response['AASE[AASE8]']} else { return source.survey_response.response['AASEandere[AASE8]'] };", "name": "AASE_08" },
    { "path": "_function", "function": "var substanz = source.calculation.messzeitpunkt.substanz; if (substanz==='Alkohol') {return source.survey_response.response['AASE[AASE9]']} else { return source.survey_response.response['AASEandere[AASE9]'] };", "name": "AASE_09" },
    { "path": "_function", "function": "var substanz = source.calculation.messzeitpunkt.substanz; if (substanz==='Alkohol') {return source.survey_response.response['AASE[AASE10]']} else { return source.survey_response.response['AASEandere[AASE10]'] };", "name": "AASE_10" },
    { "path": "_function", "function": "var substanz = source.calculation.messzeitpunkt.substanz; if (substanz==='Alkohol') {return source.survey_response.response['AASE[AASE11]']} else { return source.survey_response.response['AASEandere[AASE11]'] };", "name": "AASE_11" },
    { "path": "_function", "function": "var substanz = source.calculation.messzeitpunkt.substanz; if (substanz==='Alkohol') {return source.survey_response.response['AASE[AASE12]']} else { return source.survey_response.response['AASEandere[AASE12]'] };", "name": "AASE_12" },
    { "path": "_function", "function": "var substanz = source.calculation.messzeitpunkt.substanz; if (substanz==='Alkohol') {return source.survey_response.response['AASE[AASE13]']} else { return source.survey_response.response['AASEandere[AASE13]'] };", "name": "AASE_13" },
    { "path": "_function", "function": "var substanz = source.calculation.messzeitpunkt.substanz; if (substanz==='Alkohol') {return source.survey_response.response['AASE[AASE14]']} else { return source.survey_response.response['AASEandere[AASE14]'] };", "name": "AASE_14" },
    { "path": "_function", "function": "var substanz = source.calculation.messzeitpunkt.substanz; if (substanz==='Alkohol') {return source.survey_response.response['AASE[AASE15]']} else { return source.survey_response.response['AASEandere[AASE15]'] };", "name": "AASE_15" },
    { "path": "_function", "function": "var substanz = source.calculation.messzeitpunkt.substanz; if (substanz==='Alkohol') {return source.survey_response.response['AASE[AASE16]']} else { return source.survey_response.response['AASEandere[AASE16]'] };", "name": "AASE_16" },
    { "path": "_function", "function": "var substanz = source.calculation.messzeitpunkt.substanz; if (substanz==='Alkohol') {return source.survey_response.response['AASE[AASE17]']} else { return source.survey_response.response['AASEandere[AASE17]'] };", "name": "AASE_17" },
    { "path": "_function", "function": "var substanz = source.calculation.messzeitpunkt.substanz; if (substanz==='Alkohol') {return source.survey_response.response['AASE[AASE18]']} else { return source.survey_response.response['AASEandere[AASE18]'] };", "name": "AASE_18" },
    { "path": "_function", "function": "var substanz = source.calculation.messzeitpunkt.substanz; if (substanz==='Alkohol') {return source.survey_response.response['AASE[AASE19]']} else { return source.survey_response.response['AASEandere[AASE19]'] };", "name": "AASE_19" },
    { "path": "_function", "function": "var substanz = source.calculation.messzeitpunkt.substanz; if (substanz==='Alkohol') {return source.survey_response.response['AASE[AASE20]']} else { return source.survey_response.response['AASEandere[AASE20]'] };", "name": "AASE_20" },
    {"path": "calculation.score_mean","name": "AASE_Mean"},
    {"path": "calculation.mean_soziale_situationen","name": "AASE_SozSit_Mean"},
    {"path": "calculation.mean_negativer_affekt","name": "AASE_NegAff_Mean"},
    {"path": "calculation.mean_somatisches_unwohlsein","name": "AASE_SomatUnwohl_Mean"},
    {"path": "calculation.mean_entzugserscheinungen","name": "AASE_Entzug_Mean"},
    {"path": "calculation.score","name": "AASE_Sum"},
    {"path": "calculation.score_soziale_situationen","name": "AASE_SozSit_Sum"},
    {"path": "calculation.score_negativer_affekt","name": "AASE_NegAff_Sum"},
    {"path": "calculation.score_somatisches_unwohlsein","name": "AASE_SomatUnwohl_Sum"},
    {"path": "calculation.score_entzugserscheinungen","name": "AASE_Entzug_Sum"}
  ]
});
      export_files.push({
  "options": {
    "name": "ASRS",
    "description": "asrs",
    "export_optinomic_ids": false,
    "export_patient_details": false,
    "export_stay_details": false,
    "export_header": true,
    "delimter": ";",
    "source": "asrs"

  },
  "fields": [
    { "path": "_function", "function": "return source.stay.cis_fid/100", "name":"FID" },
    {"path": "calculation.messzeitpunkt.mz_datum","name": "datum"},
    {"path": "survey_response.response.ASRS_1","name": "ASRS_1"},
    {"path": "survey_response.response.ASRS_2","name": "ASRS_2"},
    {"path": "survey_response.response.ASRS_3","name": "ASRS_3"},
    {"path": "survey_response.response.ASRS_4","name": "ASRS_4"},
    {"path": "survey_response.response.ASRS_5","name": "ASRS_5"},
    {"path": "survey_response.response.ASRS_6","name": "ASRS_6"},
    {"path": "calculation.score.score","name": "ASRS_Sum"}
  ]
}
);
      export_files.push({
  "options": {
    "name": "BDI-II",
    "description": "bdi",
    "export_optinomic_ids": false,
    "export_patient_details": false,
    "export_stay_details": false,
    "export_header": true,
    "delimter": ";",
    "source": "bdi"
  },
  "fields": [
    { "name": "MedStatFid", "path": "_function", "function": "var cis_pid = source.patient.cis_pid + '00'; var cis_fid = source.stay.cis_fid + ''; var medstatfid = parseInt(cis_pid + cis_fid.slice(cis_fid.length - 4, cis_fid.length - 2)); return medstatfid;" },
    {"path": "_function", "function": "return source.stay.cis_fid/100","name":"FID"},
    { "path": "survey_response.response.Erhebungszeitpunkt", "name": "Erhebungszeitpunkt" },
    { "path": "survey_response.response.andererZeitpunkt", "name": "andererZeitpunkt" },
    { "path": "_function", "function": "return ExportHelpers.formatDateISONoTime(source.survey_response.response.Datum);", "name": "Datum" },
    { "path": "survey_response.response.BDI1", "name": "BDI01" },
    { "path": "survey_response.response.BDI2", "name": "BDI02" },
    { "path": "survey_response.response.BDI3", "name": "BDI03" },
    { "path": "survey_response.response.BDI4", "name": "BDI04" },
    { "path": "survey_response.response.BDI5", "name": "BDI05" },
    { "path": "survey_response.response.BDI6", "name": "BDI06" },
    { "path": "survey_response.response.BDI7", "name": "BDI07" },
    { "path": "survey_response.response.BDI8", "name": "BDI08" },
    { "path": "survey_response.response.BDI9", "name": "BDI09" },
    { "path": "survey_response.response.BDI10", "name": "BDI10" },
    { "path": "survey_response.response.BDI11", "name": "BDI11" },
    { "path": "survey_response.response.BDI12", "name": "BDI12" },
    { "path": "survey_response.response.BDI13", "name": "BDI13" },
    { "path": "survey_response.response.BDI14", "name": "BDI14" },
    { "path": "survey_response.response.BDI15", "name": "BDI15" },
    { "path": "survey_response.response.BDI16", "name": "BDI16" },
    { "path": "survey_response.response.BDI17", "name": "BDI17" },
    { "path": "survey_response.response.BDI18", "name": "BDI18" },
    { "path": "survey_response.response.BDI19", "name": "BDI19" },
    { "path": "survey_response.response.BDI20", "name": "BDI20" },
    { "path": "survey_response.response.BDI21", "name": "BDI21" },
    { "path": "calculation.score.score", "name": "BDISumme"}
  ]
}
);
      export_files.push({
    "options": {
        "name": "BSCL (Export - ANQ)",
        "description": "Exportsyntax für ANQ",
        "export_optinomic_ids": false,
        "export_patient_details": false,
        "export_stay_details": false,
        "export_header": true,
        "delimter": ";",
        "source": "bscl"
    },
    "fields": [
        { "name": "rekordart", "path": "_function", "function": "return 'PB';" },
        { "name": "betriebsnummer_bur", "path": "_function", "function": "return '71286515';" },
        { "name":"FID", "path": "_function", "function": "return source.stay.cis_fid/100" },
        { "name": "zeitpunkt_bscl", "path": "survey_response.response.q501V04" },
        { "name": "dropoutcode_bscl", "path": "survey_response.response.q501V05" },
        { "name": "spezifikation_dropout_bscl_andere", "path": "survey_response.response.q501V06" },
        { "name": "datum_erhebung_bscl", "path": "_function", "function": "var mzp = source.survey_response.response.q501V04; if (mzp === '1') { return ExportHelpers.formatDateYYYYMMDD(source.stay.start); }; if (mzp === '2') { return ExportHelpers.formatDateYYYYMMDD(source.stay.stop); }; if ((mzp !== '1') && ((mzp !== '2'))) {return ExportHelpers.formatDateYYYYMMDD(source.survey_response.response.q504V00);}"},
        { "name": "bscl_b1", "path": "survey_response.response.BSCL[sq504V01]" },
        { "name": "bscl_b2", "path": "survey_response.response.BSCL[sq504V02]" },
        { "name": "bscl_b3", "path": "survey_response.response.BSCL[sq504V03]" },
        { "name": "bscl_b4", "path": "survey_response.response.BSCL[sq504V04]" },
        { "name": "bscl_b5", "path": "survey_response.response.BSCL[sq504V05]" },
        { "name": "bscl_b6", "path": "survey_response.response.BSCL[sq504V06]" },
        { "name": "bscl_b7", "path": "survey_response.response.BSCL[sq504V07]" },
        { "name": "bscl_b8", "path": "survey_response.response.BSCL[sq504V08]" },
        { "name": "bscl_b9", "path": "survey_response.response.BSCL[sq504V09]" },
        { "name": "bscl_b10", "path": "survey_response.response.BSCL[sq504V10]" },
        { "name": "bscl_b11", "path": "survey_response.response.BSCL[sq504V11]" },
        { "name": "bscl_b12", "path": "survey_response.response.BSCL[sq504V12]" },
        { "name": "bscl_b13", "path": "survey_response.response.BSCL[sq504V13]" },
        { "name": "bscl_b14", "path": "survey_response.response.BSCL[sq504V14]" },
        { "name": "bscl_b15", "path": "survey_response.response.BSCL[sq504V15]" },
        { "name": "bscl_b16", "path": "survey_response.response.BSCL[sq504V16]" },
        { "name": "bscl_b17", "path": "survey_response.response.BSCL[sq504V17]" },
        { "name": "bscl_b18", "path": "survey_response.response.BSCL[sq504V18]" },
        { "name": "bscl_b19", "path": "survey_response.response.BSCL[sq504V19]" },
        { "name": "bscl_b20", "path": "survey_response.response.BSCL[sq504V20]" },
        { "name": "bscl_b21", "path": "survey_response.response.BSCL[sq504V21]" },
        { "name": "bscl_b22", "path": "survey_response.response.BSCL[sq504V22]" },
        { "name": "bscl_b23", "path": "survey_response.response.BSCL[sq504V23]" },
        { "name": "bscl_b24", "path": "survey_response.response.BSCL[sq504V24]" },
        { "name": "bscl_b25", "path": "survey_response.response.BSCL[sq504V25]" },
        { "name": "bscl_b26", "path": "survey_response.response.BSCL[sq504V26]" },
        { "name": "bscl_b27", "path": "survey_response.response.BSCL[sq504V27]" },
        { "name": "bscl_b28", "path": "survey_response.response.BSCL[sq504V28]" },
        { "name": "bscl_b29", "path": "survey_response.response.BSCL[sq504V29]" },
        { "name": "bscl_b30", "path": "survey_response.response.BSCL[sq504V30]" },
        { "name": "bscl_b31", "path": "survey_response.response.BSCL[sq504V31]" },
        { "name": "bscl_b32", "path": "survey_response.response.BSCL[sq504V32]" },
        { "name": "bscl_b33", "path": "survey_response.response.BSCL[sq504V33]" },
        { "name": "bscl_b34", "path": "survey_response.response.BSCL[sq504V34]" },
        { "name": "bscl_b35", "path": "survey_response.response.BSCL[sq504V35]" },
        { "name": "bscl_b36", "path": "survey_response.response.BSCL[sq504V36]" },
        { "name": "bscl_b37", "path": "survey_response.response.BSCL[sq504V37]" },
        { "name": "bscl_b38", "path": "survey_response.response.BSCL[sq504V38]" },
        { "name": "bscl_b39", "path": "survey_response.response.BSCL[sq504V39]" },
        { "name": "bscl_b40", "path": "survey_response.response.BSCL[sq504V40]" },
        { "name": "bscl_b41", "path": "survey_response.response.BSCL[sq504V41]" },
        { "name": "bscl_b42", "path": "survey_response.response.BSCL[sq504V42]" },
        { "name": "bscl_b43", "path": "survey_response.response.BSCL[sq504V43]" },
        { "name": "bscl_b44", "path": "survey_response.response.BSCL[sq504V44]" },
        { "name": "bscl_b45", "path": "survey_response.response.BSCL[sq504V45]" },
        { "name": "bscl_b46", "path": "survey_response.response.BSCL[sq504V46]" },
        { "name": "bscl_b47", "path": "survey_response.response.BSCL[sq504V47]" },
        { "name": "bscl_b48", "path": "survey_response.response.BSCL[sq504V48]" },
        { "name": "bscl_b49", "path": "survey_response.response.BSCL[sq504V49]" },
        { "name": "bscl_b50", "path": "survey_response.response.BSCL[sq504V50]" },
        { "name": "bscl_b51", "path": "survey_response.response.BSCL[sq504V51]" },
        { "name": "bscl_b52", "path": "survey_response.response.BSCL[sq504V52]" },
        { "name": "bscl_b53", "path": "survey_response.response.BSCL[sq504V53]" }
    ]
});
      export_files.push({
    "options": {
        "name": "BSCL INTRA",
        "description": "Exportsyntax BSCL für INTRA-Studie",
        "export_optinomic_ids": false,
        "export_patient_details": false,
        "export_stay_details": false,
        "export_header": true,
        "delimter": ";",
        "source": "bscl"
    },
    "fields": [
        { "name":"FID", "path": "_function", "function": "return source.stay.cis_fid/100" },
        { "name":"patient", "path":"patient_id"},
        { "name": "id_limesurvey", "path":"id"},
        { "name": "eintrittsort", "path":"function", "function": "if (source.survey_response.response.q501V04 = '3') {return '2'} else {return source.survey_response.response.Eintrittsort};"},
        { "name": "austrittsort", "path":"survey_response.response.Austrittsort"},
        { "name": "pid", "path":"survey_response.response.PID"},
        { "name": "fid_survey", "path":"survey_response.response.FID"},
        { "name": "zeitpunkt_bscl", "path": "survey_response.response.q501V04" },
        { "name": "dropoutcode_bscl", "path": "survey_response.response.q501V05" },
        { "name": "spezifikation_dropout_bscl_andere", "path": "survey_response.response.q501V06" },
        { "name": "datum_erhebung_bscl", "path": "_function", "function": "var mzp = source.survey_response.response.q501V04; if (mzp === '1') { return ExportHelpers.formatDateYYYYMMDD(source.stay.start); }; if (mzp === '2') { return ExportHelpers.formatDateYYYYMMDD(source.stay.stop); }; if ((mzp !== '1') && ((mzp !== '2'))) {return ExportHelpers.formatDateYYYYMMDD(source.survey_response.response.q504V00);}"},
        { "name": "Erhebungsdatum", "path": "survey_response.response.q504V00"},
        { "name": "bscl_b1", "path": "survey_response.response.BSCL[sq504V01]" },
        { "name": "bscl_b2", "path": "survey_response.response.BSCL[sq504V02]" },
        { "name": "bscl_b3", "path": "survey_response.response.BSCL[sq504V03]" },
        { "name": "bscl_b4", "path": "survey_response.response.BSCL[sq504V04]" },
        { "name": "bscl_b5", "path": "survey_response.response.BSCL[sq504V05]" },
        { "name": "bscl_b6", "path": "survey_response.response.BSCL[sq504V06]" },
        { "name": "bscl_b7", "path": "survey_response.response.BSCL[sq504V07]" },
        { "name": "bscl_b8", "path": "survey_response.response.BSCL[sq504V08]" },
        { "name": "bscl_b9", "path": "survey_response.response.BSCL[sq504V09]" },
        { "name": "bscl_b10", "path": "survey_response.response.BSCL[sq504V10]" },
        { "name": "bscl_b11", "path": "survey_response.response.BSCL[sq504V11]" },
        { "name": "bscl_b12", "path": "survey_response.response.BSCL[sq504V12]" },
        { "name": "bscl_b13", "path": "survey_response.response.BSCL[sq504V13]" },
        { "name": "bscl_b14", "path": "survey_response.response.BSCL[sq504V14]" },
        { "name": "bscl_b15", "path": "survey_response.response.BSCL[sq504V15]" },
        { "name": "bscl_b16", "path": "survey_response.response.BSCL[sq504V16]" },
        { "name": "bscl_b17", "path": "survey_response.response.BSCL[sq504V17]" },
        { "name": "bscl_b18", "path": "survey_response.response.BSCL[sq504V18]" },
        { "name": "bscl_b19", "path": "survey_response.response.BSCL[sq504V19]" },
        { "name": "bscl_b20", "path": "survey_response.response.BSCL[sq504V20]" },
        { "name": "bscl_b21", "path": "survey_response.response.BSCL[sq504V21]" },
        { "name": "bscl_b22", "path": "survey_response.response.BSCL[sq504V22]" },
        { "name": "bscl_b23", "path": "survey_response.response.BSCL[sq504V23]" },
        { "name": "bscl_b24", "path": "survey_response.response.BSCL[sq504V24]" },
        { "name": "bscl_b25", "path": "survey_response.response.BSCL[sq504V25]" },
        { "name": "bscl_b26", "path": "survey_response.response.BSCL[sq504V26]" },
        { "name": "bscl_b27", "path": "survey_response.response.BSCL[sq504V27]" },
        { "name": "bscl_b28", "path": "survey_response.response.BSCL[sq504V28]" },
        { "name": "bscl_b29", "path": "survey_response.response.BSCL[sq504V29]" },
        { "name": "bscl_b30", "path": "survey_response.response.BSCL[sq504V30]" },
        { "name": "bscl_b31", "path": "survey_response.response.BSCL[sq504V31]" },
        { "name": "bscl_b32", "path": "survey_response.response.BSCL[sq504V32]" },
        { "name": "bscl_b33", "path": "survey_response.response.BSCL[sq504V33]" },
        { "name": "bscl_b34", "path": "survey_response.response.BSCL[sq504V34]" },
        { "name": "bscl_b35", "path": "survey_response.response.BSCL[sq504V35]" },
        { "name": "bscl_b36", "path": "survey_response.response.BSCL[sq504V36]" },
        { "name": "bscl_b37", "path": "survey_response.response.BSCL[sq504V37]" },
        { "name": "bscl_b38", "path": "survey_response.response.BSCL[sq504V38]" },
        { "name": "bscl_b39", "path": "survey_response.response.BSCL[sq504V39]" },
        { "name": "bscl_b40", "path": "survey_response.response.BSCL[sq504V40]" },
        { "name": "bscl_b41", "path": "survey_response.response.BSCL[sq504V41]" },
        { "name": "bscl_b42", "path": "survey_response.response.BSCL[sq504V42]" },
        { "name": "bscl_b43", "path": "survey_response.response.BSCL[sq504V43]" },
        { "name": "bscl_b44", "path": "survey_response.response.BSCL[sq504V44]" },
        { "name": "bscl_b45", "path": "survey_response.response.BSCL[sq504V45]" },
        { "name": "bscl_b46", "path": "survey_response.response.BSCL[sq504V46]" },
        { "name": "bscl_b47", "path": "survey_response.response.BSCL[sq504V47]" },
        { "name": "bscl_b48", "path": "survey_response.response.BSCL[sq504V48]" },
        { "name": "bscl_b49", "path": "survey_response.response.BSCL[sq504V49]" },
        { "name": "bscl_b50", "path": "survey_response.response.BSCL[sq504V50]" },
        { "name": "bscl_b51", "path": "survey_response.response.BSCL[sq504V51]" },
        { "name": "bscl_b52", "path": "survey_response.response.BSCL[sq504V52]" },
        { "name": "bscl_b53", "path": "survey_response.response.BSCL[sq504V53]" }
    ]
});
      export_files.push({
    "options": {
        "name": "BSCL",
        "description": "Komplettexport",
        "export_optinomic_ids": true,
        "export_patient_details": true,
        "export_stay_details": true,
        "export_header": true,
        "delimter": ";",
        "source": "bscl"
    },
    "fields": [
        { "name": "MedStatFid", "path": "_function", "function": "var cis_pid = source.patient.cis_pid + '00'; var cis_fid = source.stay.cis_fid + ''; var medstatfid = parseInt(cis_pid + cis_fid.slice(cis_fid.length - 4, cis_fid.length - 2)); return medstatfid;" }, 
        { "name": "zeitpunkt_bscl", "path": "survey_response.response.q501V04" },
        { "name": "Eintrittsort", "path": "survey_response.response.Eintrittsort" },
        { "name": "Austrittsort", "path": "survey_response.response.Austrittsort" },
        { "name": "dropoutcode_bscl", "path": "survey_response.response.q501V05" },
        { "name": "spezifikation_dropout_bscl_andere", "path": "survey_response.response.q501V06" },
        { "name": "datum_erhebung_bscl", "path": "_function", "function": "var mzp = source.survey_response.response.q501V04; if (mzp === '1') { return ExportHelpers.formatDateYYYYMMDD(source.stay.start); }; if (mzp === '2') { return ExportHelpers.formatDateYYYYMMDD(source.stay.stop); }; if ((mzp !== '1') && ((mzp !== '2'))) {return ExportHelpers.formatDateYYYYMMDD(source.survey_response.response.q504V00);}"},
        { "name": "Datum_ausgefüllt", "path": "survey_response.response.q504V00" },
        { "name": "bscl_b1", "path": "survey_response.response.BSCL[sq504V01]" },
        { "name": "bscl_b2", "path": "survey_response.response.BSCL[sq504V02]" },
        { "name": "bscl_b3", "path": "survey_response.response.BSCL[sq504V03]" },
        { "name": "bscl_b4", "path": "survey_response.response.BSCL[sq504V04]" },
        { "name": "bscl_b5", "path": "survey_response.response.BSCL[sq504V05]" },
        { "name": "bscl_b6", "path": "survey_response.response.BSCL[sq504V06]" },
        { "name": "bscl_b7", "path": "survey_response.response.BSCL[sq504V07]" },
        { "name": "bscl_b8", "path": "survey_response.response.BSCL[sq504V08]" },
        { "name": "bscl_b9", "path": "survey_response.response.BSCL[sq504V09]" },
        { "name": "bscl_b10", "path": "survey_response.response.BSCL[sq504V10]" },
        { "name": "bscl_b11", "path": "survey_response.response.BSCL[sq504V11]" },
        { "name": "bscl_b12", "path": "survey_response.response.BSCL[sq504V12]" },
        { "name": "bscl_b13", "path": "survey_response.response.BSCL[sq504V13]" },
        { "name": "bscl_b14", "path": "survey_response.response.BSCL[sq504V14]" },
        { "name": "bscl_b15", "path": "survey_response.response.BSCL[sq504V15]" },
        { "name": "bscl_b16", "path": "survey_response.response.BSCL[sq504V16]" },
        { "name": "bscl_b17", "path": "survey_response.response.BSCL[sq504V17]" },
        { "name": "bscl_b18", "path": "survey_response.response.BSCL[sq504V18]" },
        { "name": "bscl_b19", "path": "survey_response.response.BSCL[sq504V19]" },
        { "name": "bscl_b20", "path": "survey_response.response.BSCL[sq504V20]" },
        { "name": "bscl_b21", "path": "survey_response.response.BSCL[sq504V21]" },
        { "name": "bscl_b22", "path": "survey_response.response.BSCL[sq504V22]" },
        { "name": "bscl_b23", "path": "survey_response.response.BSCL[sq504V23]" },
        { "name": "bscl_b24", "path": "survey_response.response.BSCL[sq504V24]" },
        { "name": "bscl_b25", "path": "survey_response.response.BSCL[sq504V25]" },
        { "name": "bscl_b26", "path": "survey_response.response.BSCL[sq504V26]" },
        { "name": "bscl_b27", "path": "survey_response.response.BSCL[sq504V27]" },
        { "name": "bscl_b28", "path": "survey_response.response.BSCL[sq504V28]" },
        { "name": "bscl_b29", "path": "survey_response.response.BSCL[sq504V29]" },
        { "name": "bscl_b30", "path": "survey_response.response.BSCL[sq504V30]" },
        { "name": "bscl_b31", "path": "survey_response.response.BSCL[sq504V31]" },
        { "name": "bscl_b32", "path": "survey_response.response.BSCL[sq504V32]" },
        { "name": "bscl_b33", "path": "survey_response.response.BSCL[sq504V33]" },
        { "name": "bscl_b34", "path": "survey_response.response.BSCL[sq504V34]" },
        { "name": "bscl_b35", "path": "survey_response.response.BSCL[sq504V35]" },
        { "name": "bscl_b36", "path": "survey_response.response.BSCL[sq504V36]" },
        { "name": "bscl_b37", "path": "survey_response.response.BSCL[sq504V37]" },
        { "name": "bscl_b38", "path": "survey_response.response.BSCL[sq504V38]" },
        { "name": "bscl_b39", "path": "survey_response.response.BSCL[sq504V39]" },
        { "name": "bscl_b40", "path": "survey_response.response.BSCL[sq504V40]" },
        { "name": "bscl_b41", "path": "survey_response.response.BSCL[sq504V41]" },
        { "name": "bscl_b42", "path": "survey_response.response.BSCL[sq504V42]" },
        { "name": "bscl_b43", "path": "survey_response.response.BSCL[sq504V43]" },
        { "name": "bscl_b44", "path": "survey_response.response.BSCL[sq504V44]" },
        { "name": "bscl_b45", "path": "survey_response.response.BSCL[sq504V45]" },
        { "name": "bscl_b46", "path": "survey_response.response.BSCL[sq504V46]" },
        { "name": "bscl_b47", "path": "survey_response.response.BSCL[sq504V47]" },
        { "name": "bscl_b48", "path": "survey_response.response.BSCL[sq504V48]" },
        { "name": "bscl_b49", "path": "survey_response.response.BSCL[sq504V49]" },
        { "name": "bscl_b50", "path": "survey_response.response.BSCL[sq504V50]" },
        { "name": "bscl_b51", "path": "survey_response.response.BSCL[sq504V51]" },
        { "name": "bscl_b52", "path": "survey_response.response.BSCL[sq504V52]" },
        { "name": "bscl_b53", "path": "survey_response.response.BSCL[sq504V53]" },
        { "name": "somatisierung_mean", "path": "calculation.all_results.somatisierung_scale_score" },
        { "name": "somatisierung_sum", "path": "calculation.all_results.somatisierung_sum_score" },
        { "name": "somatisierung_zscore", "path": "calculation.all_results.somatisierung_z_score" },
        { "name": "zwang_mean", "path": "calculation.all_results.zwanghaftigkeit_scale_score" },
        { "name": "zwang_sum", "path": "calculation.all_results.zwanghaftigkeit_sum_score" },
        { "name": "zwang_zscore", "path": "calculation.all_results.zwanghaftigkeit_z_score" },
        { "name": "unsicher_mean", "path": "calculation.all_results.unsicherheit_im_sozialkontakt_scale_score" },
        { "name": "unsicher_sum", "path": "calculation.all_results.unsicherheit_im_sozialkontakt_sum_score" },
        { "name": "unsicher_zscore", "path": "calculation.all_results.unsicherheit_im_sozialkontakt_z_score" },
        { "name": "depressiv_mean", "path": "calculation.all_results.depressivit__t_scale_score" },
        { "name": "depressiv_sum", "path": "calculation.all_results.depressivit__t_sum_score" },
        { "name": "depressiv_zscore", "path": "calculation.all_results.depressivit__t_z_score" },
        { "name": "angst_mean", "path": "calculation.all_results.__ngstlichkeit_scale_score" },
        { "name": "angst_sum", "path": "calculation.all_results.__ngstlichkeit_sum_score" },
        { "name": "angst_zscore", "path": "calculation.all_results.__ngstlichkeit_z_score" },
        { "name": "agressiv_mean", "path": "calculation.all_results.aggressivit__t___feindseligkeit_scale_score" },
        { "name": "agressiv_sum", "path": "calculation.all_results.aggressivit__t___feindseligkeit_sum_score" },
        { "name": "agressiv_zscore", "path": "calculation.all_results.aggressivit__t___feindseligkeit_z_score" },
        { "name": "phobie_mean", "path": "calculation.all_results.phobische_angst_scale_score" },
        { "name": "phobie_sum", "path": "calculation.all_results.phobische_angst_sum_score" },
        { "name": "phobie_zscore", "path": "calculation.all_results.phobische_angst_z_score" },
        { "name": "paranoid_mean", "path": "calculation.all_results.paranoides_denken_scale_score" },
        { "name": "paranoid_sum", "path": "calculation.all_results.paranoides_denken_sum_score" },
        { "name": "paranoid_zscore", "path": "calculation.all_results.paranoides_denken_z_score" },
        { "name": "psychotizismus_mean", "path": "calculation.all_results.psychotizismus_scale_score" },
        { "name": "psychotizismus_sum", "path": "calculation.all_results.psychotizismus_sum_score" },
        { "name": "psychotizismus_zscore", "path": "calculation.all_results.psychotizismus_z_score" },
        { "name": "gsi_mean", "path": "calculation.all_results.gsi_global_severity_index_scale_score" },
        { "name": "gsi_sum", "path": "calculation.all_results.gsi_global_severity_index_sum_score" },
        { "name": "gsi_zscore", "path": "calculation.all_results.gsi_global_severity_index_z_score" }
    ]
});
      export_files.push({
  "options": {
    "name": "CASE",
    "description": "case",
    "export_optinomic_ids": false,
    "export_patient_details": false,
    "export_stay_details": false,
    "export_header": true,
    "delimter": ";",
    "source": "case"
  },
  "fields": [
    { "name": "MedStatFid", "path": "_function", "function": "var cis_pid = source.patient.cis_pid + '00'; var cis_fid = source.stay.cis_fid + ''; var medstatfid = parseInt(cis_pid + cis_fid.slice(cis_fid.length - 4, cis_fid.length - 2)); return medstatfid;" }, 
    { "path": "survey_response.response.FID", "name": "FID" },
    { "path": "survey_response.response.PID", "name": "PID" },
    { "path": "_function", "function": "return ExportHelpers.formatDateCH(source.survey_response.response.datestamp);", "name": "datestamp" },
    { "path": "survey_response.response.DauerAbh", "name": "DauerAbh" },
    { "path": "survey_response.response.statEnzug", "name": "statEnzug" },
    { "path": "survey_response.response.ambEntzugMedi", "name": "ambEntzugMedi" },
    { "path": "survey_response.response.Craving", "name": "Craving" },
    { "path": "survey_response.response.statEntwoehnung", "name": "statEntwoehnung" },
    { "path": "survey_response.response.ambEntwoehnung", "name": "ambEntwoehnung" },
    { "path": "survey_response.response.Abbrueche", "name": "Abbrueche" },
    { "path": "survey_response.response.Rueckfaelle", "name": "Rueckfaelle" },
    { "path": "survey_response.response.Leber", "name": "Leber" },
    { "path": "survey_response.response.Somat", "name": "Somat" },
    { "path": "survey_response.response.Neurol", "name": "Neurol" },
    { "path": "survey_response.response.Psych", "name": "Psych" },
    { "path": "survey_response.response.Arbeitslos", "name": "Arbeitslos" },
    { "path": "survey_response.response.Wohnen", "name": "Wohnen" },
    { "path": "survey_response.response.Allein", "name": "Allein" },
    { "path": "survey_response.response.Alter", "name": "Alter" },
    { "path": "survey_response.response.Kontrollv", "name": "Kontrollv" },
    { "path": "survey_response.response.MorgenTr", "name": "MorgenTr" },
    { "path": "survey_response.response.posErw", "name": "posErw" },
    { "path": "survey_response.response.AbstZuv", "name": "AbstZuv" },
    { "path": "survey_response.response.AbstMot", "name": "AbstMot" },
    { "path": "calculation.score", "name": "CASE_Summe"}
  ]
});
      export_files.push({
  "options": {
    "name": "HoNOS",
    "description": "honos",
    "export_optinomic_ids": false,
    "export_patient_details": false,
    "export_stay_details": false,
    "export_header": true,
    "delimter": ";",
    "source": "honos"
  },
  "fields": [
    {"path": "_function", "function": "return 'PH';","name": "Rekordart"},
    {"path": "_function", "function": "return '71286515';","name": "betriebsnummer_bur"},
    {"path": "_function", "function": "return source.stay.cis_fid/100","name":"Fall_nummer"},
    {"path": "survey_response.response.q401V04","name": "zeitpunkt_honos"},
    {"path": "survey_response.response.q401V05","name": "dropoutcode_honos"},
    {"path": "survey_response.response.q401V06","name": "spezifikation_dropout_honos_andere"},
    {"path": "_function", "function": "var mzp = source.survey_response.response.q401V04; if (mzp === '1') { return ExportHelpers.formatDateYYYYMMDD(source.stay.start); }; if (mzp === '2') { return ExportHelpers.formatDateYYYYMMDD(source.stay.stop); }; if ((mzp !== '1') && ((mzp !== '2'))) {return ExportHelpers.formatDateYYYYMMDD(source.survey_response.response.q402V00);}","name": "datum_erhebung_honos"},
    {"path": "survey_response.response.H1[402V01]","name": "honos_h1"},
    {"path": "survey_response.response.H1[402V02]","name": "honos_h2"},
    {"path": "survey_response.response.H1[402V03]","name": "honos_h3"},
    {"path": "survey_response.response.H1[402V04]","name": "honos_h4"},
    {"path": "survey_response.response.H1[402V05]","name": "honos_h5"},
    {"path": "survey_response.response.H1[402V06]","name": "honos_h6"},
    {"path": "survey_response.response.H1[402V07]","name": "honos_h7"},
    {"path": "survey_response.response.H1[402V08]","name": "honos_h8"},
    {"path": "survey_response.response.q402V09","name": "honos_h8a"},
    {"path": "survey_response.response.q402V10","name": "honos_h8b"},
    {"path": "survey_response.response.H2[402V11]","name": "honos_h9"},
    {"path": "survey_response.response.H2[402V12]","name": "honos_h10"},
    {"path": "survey_response.response.H2[402V13]","name": "honos_h11"},
    {"path": "survey_response.response.H2[402V14]","name": "honos_h12"}
  ]
});
      export_files.push({
    "options": {
        "name": "ISK",
        "description": "Komplettexport",
        "export_optinomic_ids": false,
        "export_patient_details": false,
        "export_stay_details": false,
        "export_header": true,
        "delimter": ";",
        "source": "isk"
    },
    "fields": [
        { "name":"FID", "path": "_function", "function": "return source.stay.cis_fid/100" },
        { "name": "Erhebungszeitpunkt", "path": "survey_response.response.Erhebungszeitpunkt" },
        { "name": "Datum", "path": "survey_response.response.Datum" },
        { "name": "isk_01", "path": "survey_response.response.AISK[AISK1]" },
        { "name": "isk_02", "path": "survey_response.response.AISK[AISK2]" },
        { "name": "isk_03", "path": "survey_response.response.AISK[AISK3]" },
        { "name": "isk_99", "path": "survey_response.response.AISK[AISK3]" },
        { "name": "isk_04", "path": "survey_response.response.AISK[AISK4]" },
        { "name": "isk_05", "path": "survey_response.response.AISK[AISK5]" },
        { "name": "isk_06", "path": "survey_response.response.AISK[AISK6]" },
        { "name": "isk_07", "path": "survey_response.response.AISK[AISK7]" },
        { "name": "isk_08", "path": "survey_response.response.AISK[AISK8]" },
        { "name": "isk_09", "path": "survey_response.response.AISK[AISK9]" },
        { "name": "isk_10", "path": "survey_response.response.AISK[AIS10]" },
        { "name": "isk_11", "path": "survey_response.response.AISK[AIS11]" },
        { "name": "isk_12", "path": "survey_response.response.AISK[AIS12]" },
        { "name": "isk_13", "path": "survey_response.response.AISK[AIS13]" },
        { "name": "isk_14", "path": "survey_response.response.AISK[AIS14]" },
        { "name": "isk_15", "path": "survey_response.response.AISK[AIS15]" },
        { "name": "isk_16", "path": "survey_response.response.AISK[AIS16]" },
        { "name": "isk_17", "path": "survey_response.response.AISK[AIS17]" },
        { "name": "isk_18", "path": "survey_response.response.AISK[AIS18]" },
        { "name": "isk_19", "path": "survey_response.response.AISK[AIS19]" },
        { "name": "isk_20", "path": "survey_response.response.AISK[AIS20]" },
        { "name": "isk_21", "path": "survey_response.response.AISK[AIS21]" },
        { "name": "isk_22", "path": "survey_response.response.AISK[AIS22]" },
        { "name": "isk_23", "path": "survey_response.response.AISK[AIS23]" },
        { "name": "isk_24", "path": "survey_response.response.AISK[AIS24]" },
        { "name": "isk_25", "path": "survey_response.response.AISK[AIS25]" },
        { "name": "isk_26", "path": "survey_response.response.AISK[AIS26]" },
        { "name": "isk_27", "path": "survey_response.response.AISK[AIS27]" },
        { "name": "isk_28", "path": "survey_response.response.AISK[AIS28]" },
        { "name": "isk_29", "path": "survey_response.response.AISK[AIS29]" },
        { "name": "isk_30", "path": "survey_response.response.AISK[AIS30]" },
        { "name": "isk_31", "path": "survey_response.response.AISK[AIS31]" },
        { "name": "isk_32", "path": "survey_response.response.AISK[AIS32]" },
        { "name": "isk_33", "path": "survey_response.response.AISK[AIS33]" },
        { "name": "offensivitaet_scale_score", "path": "calculation.all_results.offensivit__t_scale_score" },
        { "name": "offensivitaet_sum_score", "path": "calculation.all_results.offensivit__t_sum_score" },
        { "name": "offensivitaet_z_score", "path": "calculation.all_results.offensivit__t_z_score" },
        { "name": "soziale_orientierung_scale_score", "path": "calculation.all_results.soziale_orientierung_scale_score" },
        { "name": "soziale_orientierung_sum_score", "path": "calculation.all_results.soziale_orientierung_sum_score" },
        { "name": "soziale_orientierung_z_score", "path": "calculation.all_results.soziale_orientierung_z_score" },
        { "name": "selbststeuerung_scale_score", "path": "calculation.all_results.selbststeuerung_scale_score" },
        { "name": "selbststeuerung_sum_score", "path": "calculation.all_results.selbststeuerung_sum_score" },
        { "name": "selbststeuerung_z_score", "path": "calculation.all_results.selbststeuerung_z_score" },
        { "name": "reflexibilitaet_scale_score", "path": "calculation.all_results.reflexibilit__t_scale_score" },
        { "name": "reflexibilitaet_sum_score", "path": "calculation.all_results.reflexibilit__t_sum_score" },
        { "name": "reflexibilitaet_z_score", "path": "calculation.all_results.reflexibilit__t_z_score" }
    ]
});
      export_files.push({
  "options": {
    "name": "SCI",
    "description": "sci",
    "export_optinomic_ids": false,
    "export_patient_details": false,
    "export_stay_details": false,
    "export_header": true,
    "delimter": ";",
    "source": "sci"
  },
  "fields": [
    { "path": "_function", "function": "return source.stay.cis_fid/100", "name":"FID" },
    {"path": "survey_response.response.Erhebungszeitpunkt","name": "Erhebungszeitpunkt"},
    {"path": "survey_response.response.andererZeitpunkt","name": "andererZeitpunkt"},
    {"path": "_function", "function": "return ExportHelpers.formatDateISONoTime(source.survey_response.response.Datum);", "name": "Datum" },
    { "path": "_function", "function": "var resp = source.survey_response.response; if ('ESCIBelastung[ESCIB1]' in resp) {return source.survey_response.response['ESCIBelastung[ESCIB1]']}; if ('ASCIBelastung[ESCIB1]' in resp) {return source.survey_response.response['ASCIBelastung[ESCIB1]']} else {return source.survey_response.response.ESCIBelastung_ESCIB1};", "name": "SCI_01" },  
    { "path": "_function", "function": "var resp = source.survey_response.response; if ('ESCIBelastung[ESCIB2]' in resp) {return source.survey_response.response['ESCIBelastung[ESCIB2]']}; if ('ASCIBelastung[ESCIB2]' in resp) {return source.survey_response.response['ASCIBelastung[ESCIB2]']} else {return source.survey_response.response.ESCIBelastung_ESCIB2};", "name": "SCI_02" },  
    { "path": "_function", "function": "var resp = source.survey_response.response; if ('ESCIBelastung[ESCIB3]' in resp) {return source.survey_response.response['ESCIBelastung[ESCIB3]']}; if ('ASCIBelastung[ESCIB3]' in resp) {return source.survey_response.response['ASCIBelastung[ESCIB3]']} else {return source.survey_response.response.ESCIBelastung_ESCIB3};", "name": "SCI_03" },  
    { "path": "_function", "function": "var resp = source.survey_response.response; if ('ESCIBelastung[ESCIB4]' in resp) {return source.survey_response.response['ESCIBelastung[ESCIB4]']}; if ('ASCIBelastung[ESCIB4]' in resp) {return source.survey_response.response['ASCIBelastung[ESCIB4]']} else {return source.survey_response.response.ESCIBelastung_ESCIB4};", "name": "SCI_04" },  
    { "path": "_function", "function": "var resp = source.survey_response.response; if ('ESCIBelastung[ESCIB5]' in resp) {return source.survey_response.response['ESCIBelastung[ESCIB5]']}; if ('ASCIBelastung[ESCIB5]' in resp) {return source.survey_response.response['ASCIBelastung[ESCIB5]']} else {return source.survey_response.response.ESCIBelastung_ESCIB5};", "name": "SCI_05" },  
    { "path": "_function", "function": "var resp = source.survey_response.response; if ('ESCIBelastung[ESCIB6]' in resp) {return source.survey_response.response['ESCIBelastung[ESCIB6]']}; if ('ASCIBelastung[ESCIB6]' in resp) {return source.survey_response.response['ASCIBelastung[ESCIB6]']} else {return source.survey_response.response.ESCIBelastung_ESCIB6};", "name": "SCI_06" },  
    { "path": "_function", "function": "var resp = source.survey_response.response; if ('ESCIBelastung[ESCIB7]' in resp) {return source.survey_response.response['ESCIBelastung[ESCIB7]']}; if ('ASCIBelastung[ESCIB7]' in resp) {return source.survey_response.response['ASCIBelastung[ESCIB7]']} else {return source.survey_response.response.ESCIBelastung_ESCIB7};", "name": "SCI_07" },  

    { "path": "_function", "function": "var resp = source.survey_response.response; if ('ESCISymptome[ESCIS1]' in resp) {return source.survey_response.response['ESCISymptome[ESCIS1]']}; if ('ASCISymptome[ESCIS1]' in resp) {return source.survey_response.response['ASCISymptome[ESCIS1]']} else {return source.survey_response.response.ESCISymptome_ESCIS1};", "name": "SCI_08" },
    { "path": "_function", "function": "var resp = source.survey_response.response; if ('ESCISymptome[ESCIS2]' in resp) {return source.survey_response.response['ESCISymptome[ESCIS2]']}; if ('ASCISymptome[ESCIS2]' in resp) {return source.survey_response.response['ASCISymptome[ESCIS2]']} else {return source.survey_response.response.ESCISymptome_ESCIS2};", "name": "SCI_09" },
    { "path": "_function", "function": "var resp = source.survey_response.response; if ('ESCISymptome[ESCIS3]' in resp) {return source.survey_response.response['ESCISymptome[ESCIS3]']}; if ('ASCISymptome[ESCIS3]' in resp) {return source.survey_response.response['ASCISymptome[ESCIS3]']} else {return source.survey_response.response.ESCISymptome_ESCIS3};", "name": "SCI_10" },
    { "path": "_function", "function": "var resp = source.survey_response.response; if ('ESCISymptome[ESCIS4]' in resp) {return source.survey_response.response['ESCISymptome[ESCIS4]']}; if ('ASCISymptome[ESCIS4]' in resp) {return source.survey_response.response['ASCISymptome[ESCIS4]']} else {return source.survey_response.response.ESCISymptome_ESCIS4};", "name": "SCI_11" },
    { "path": "_function", "function": "var resp = source.survey_response.response; if ('ESCISymptome[ESCIS5]' in resp) {return source.survey_response.response['ESCISymptome[ESCIS5]']}; if ('ASCISymptome[ESCIS5]' in resp) {return source.survey_response.response['ASCISymptome[ESCIS5]']} else {return source.survey_response.response.ESCISymptome_ESCIS5};", "name": "SCI_12" },
    { "path": "_function", "function": "var resp = source.survey_response.response; if ('ESCISymptome[ESCIS6]' in resp) {return source.survey_response.response['ESCISymptome[ESCIS6]']}; if ('ASCISymptome[ESCIS6]' in resp) {return source.survey_response.response['ASCISymptome[ESCIS6]']} else {return source.survey_response.response.ESCISymptome_ESCIS6};", "name": "SCI_13" },
    { "path": "_function", "function": "var resp = source.survey_response.response; if ('ESCISymptome[ESCIS7]' in resp) {return source.survey_response.response['ESCISymptome[ESCIS7]']}; if ('ASCISymptome[ESCIS7]' in resp) {return source.survey_response.response['ASCISymptome[ESCIS7]']} else {return source.survey_response.response.ESCISymptome_ESCIS7};", "name": "SCI_14" },
    { "path": "_function", "function": "var resp = source.survey_response.response; if ('ESCISymptome[ESCIS8]' in resp) {return source.survey_response.response['ESCISymptome[ESCIS8]']}; if ('ASCISymptome[ESCIS8]' in resp) {return source.survey_response.response['ASCISymptome[ESCIS8]']} else {return source.survey_response.response.ESCISymptome_ESCIS8};", "name": "SCI_15" },
    { "path": "_function", "function": "var resp = source.survey_response.response; if ('ESCISymptome[ESCIS9]' in resp) {return source.survey_response.response['ESCISymptome[ESCIS9]']}; if ('ASCISymptome[ESCIS9]' in resp) {return source.survey_response.response['ASCISymptome[ESCIS9]']} else {return source.survey_response.response.ESCISymptome_ESCIS9};", "name": "SCI_16" },
    { "path": "_function", "function": "var resp = source.survey_response.response; if ('ESCISymptome[ESCI10]' in resp) {return source.survey_response.response['ESCISymptome[ESCI10]']}; if ('ASCISymptome[ESCI10]' in resp) {return source.survey_response.response['ASCISymptome[ESCI10]']} else {return source.survey_response.response.ESCISymptome_ESCI10};", "name": "SCI_17" },
    { "path": "_function", "function": "var resp = source.survey_response.response; if ('ESCISymptome[ESCI11]' in resp) {return source.survey_response.response['ESCISymptome[ESCI11]']}; if ('ASCISymptome[ESCI11]' in resp) {return source.survey_response.response['ASCISymptome[ESCI11]']} else {return source.survey_response.response.ESCISymptome_ESCI11};", "name": "SCI_18" },
    { "path": "_function", "function": "var resp = source.survey_response.response; if ('ESCISymptome[ESCI12]' in resp) {return source.survey_response.response['ESCISymptome[ESCI12]']}; if ('ASCISymptome[ESCI12]' in resp) {return source.survey_response.response['ASCISymptome[ESCI12]']} else {return source.survey_response.response.ESCISymptome_ESCI12};", "name": "SCI_19" },
    { "path": "_function", "function": "var resp = source.survey_response.response; if ('ESCISymptome[ESCI13]' in resp) {return source.survey_response.response['ESCISymptome[ESCI13]']}; if ('ASCISymptome[ESCI13]' in resp) {return source.survey_response.response['ASCISymptome[ESCI13]']} else {return source.survey_response.response.ESCISymptome_ESCI13};", "name": "SCI_20" },
    

    { "path": "_function", "function": "var resp = source.survey_response.response; if ('ESCICoping[ESCIC1]' in resp) {return source.survey_response.response['ESCICoping[ESCIC1]']}; if ('ASCICoping[ESCIC1]' in resp) {return source.survey_response.response['ASCICoping[ESCIC1]']} else {return source.survey_response.response.ESCICoping_ESCIC1};", "name": "SCI_21" },
    { "path": "_function", "function": "var resp = source.survey_response.response; if ('ESCICoping[ESCIC2]' in resp) {return source.survey_response.response['ESCICoping[ESCIC2]']}; if ('ASCICoping[ESCIC2]' in resp) {return source.survey_response.response['ASCICoping[ESCIC2]']} else {return source.survey_response.response.ESCICoping_ESCIC2};", "name": "SCI_22" },
    { "path": "_function", "function": "var resp = source.survey_response.response; if ('ESCICoping[ESCIC3]' in resp) {return source.survey_response.response['ESCICoping[ESCIC3]']}; if ('ASCICoping[ESCIC3]' in resp) {return source.survey_response.response['ASCICoping[ESCIC3]']} else {return source.survey_response.response.ESCICoping_ESCIC3};", "name": "SCI_23" },
    { "path": "_function", "function": "var resp = source.survey_response.response; if ('ESCICoping[ESCIC4]' in resp) {return source.survey_response.response['ESCICoping[ESCIC4]']}; if ('ASCICoping[ESCIC4]' in resp) {return source.survey_response.response['ASCICoping[ESCIC4]']} else {return source.survey_response.response.ESCICoping_ESCIC4};", "name": "SCI_24" },
    { "path": "_function", "function": "var resp = source.survey_response.response; if ('ESCICoping[ESCIC5]' in resp) {return source.survey_response.response['ESCICoping[ESCIC5]']}; if ('ASCICoping[ESCIC5]' in resp) {return source.survey_response.response['ASCICoping[ESCIC5]']} else {return source.survey_response.response.ESCICoping_ESCIC5};", "name": "SCI_25" },
    { "path": "_function", "function": "var resp = source.survey_response.response; if ('ESCICoping[ESCIC6]' in resp) {return source.survey_response.response['ESCICoping[ESCIC6]']}; if ('ASCICoping[ESCIC6]' in resp) {return source.survey_response.response['ASCICoping[ESCIC6]']} else {return source.survey_response.response.ESCICoping_ESCIC6};", "name": "SCI_26" },
    { "path": "_function", "function": "var resp = source.survey_response.response; if ('ESCICoping[ESCIC7]' in resp) {return source.survey_response.response['ESCICoping[ESCIC7]']}; if ('ASCICoping[ESCIC7]' in resp) {return source.survey_response.response['ASCICoping[ESCIC7]']} else {return source.survey_response.response.ESCICoping_ESCIC7};", "name": "SCI_27" },
    { "path": "_function", "function": "var resp = source.survey_response.response; if ('ESCICoping[ESCIC8]' in resp) {return source.survey_response.response['ESCICoping[ESCIC8]']}; if ('ASCICoping[ESCIC8]' in resp) {return source.survey_response.response['ASCICoping[ESCIC8]']} else {return source.survey_response.response.ESCICoping_ESCIC8};", "name": "SCI_28" },
    { "path": "_function", "function": "var resp = source.survey_response.response; if ('ESCICoping[ESCIC90]' in resp) {return source.survey_response.response['ESCICoping[ESCIC90]']}; if ('ASCICoping[ESCIC90]' in resp) {return source.survey_response.response['ASCICoping[ESCIC90]']} else {return source.survey_response.response.ESCICoping_ESCIC90};", "name": "SCI_29" },
    { "path": "_function", "function": "var resp = source.survey_response.response; if ('ESCICoping[ESCIC10]' in resp) {return source.survey_response.response['ESCICoping[ESCIC10]']}; if ('ASCICoping[ESCIC10]' in resp) {return source.survey_response.response['ASCICoping[ESCIC10]']} else {return source.survey_response.response.ESCICoping_ESCIC10};", "name": "SCI_30" },
    { "path": "_function", "function": "var resp = source.survey_response.response; if ('ESCICoping[ESCIC11]' in resp) {return source.survey_response.response['ESCICoping[ESCIC11]']}; if ('ASCICoping[ESCIC11]' in resp) {return source.survey_response.response['ASCICoping[ESCIC11]']} else {return source.survey_response.response.ESCICoping_ESCIC11};", "name": "SCI_31" },
    { "path": "_function", "function": "var resp = source.survey_response.response; if ('ESCICoping[ESCIC12]' in resp) {return source.survey_response.response['ESCICoping[ESCIC12]']}; if ('ASCICoping[ESCIC12]' in resp) {return source.survey_response.response['ASCICoping[ESCIC12]']} else {return source.survey_response.response.ESCICoping_ESCIC12};", "name": "SCI_32" },
    { "path": "_function", "function": "var resp = source.survey_response.response; if ('ESCICoping[ESCIC13]' in resp) {return source.survey_response.response['ESCICoping[ESCIC13]']}; if ('ASCICoping[ESCIC13]' in resp) {return source.survey_response.response['ASCICoping[ESCIC13]']} else {return source.survey_response.response.ESCICoping_ESCIC13};", "name": "SCI_33" },
    { "path": "_function", "function": "var resp = source.survey_response.response; if ('ESCICoping[ESCIC14]' in resp) {return source.survey_response.response['ESCICoping[ESCIC14]']}; if ('ASCICoping[ESCIC14]' in resp) {return source.survey_response.response['ASCICoping[ESCIC14]']} else {return source.survey_response.response.ESCICoping_ESCIC14};", "name": "SCI_34" },
    { "path": "_function", "function": "var resp = source.survey_response.response; if ('ESCICoping[ESCIC15]' in resp) {return source.survey_response.response['ESCICoping[ESCIC15]']}; if ('ASCICoping[ESCIC15]' in resp) {return source.survey_response.response['ASCICoping[ESCIC15]']} else {return source.survey_response.response.ESCICoping_ESCIC15};", "name": "SCI_35" },
    { "path": "_function", "function": "var resp = source.survey_response.response; if ('ESCICoping[ESCIC16]' in resp) {return source.survey_response.response['ESCICoping[ESCIC16]']}; if ('ASCICoping[ESCIC16]' in resp) {return source.survey_response.response['ASCICoping[ESCIC16]']} else {return source.survey_response.response.ESCICoping_ESCIC16};", "name": "SCI_36" },
    { "path": "_function", "function": "var resp = source.survey_response.response; if ('ESCICoping[ESCIC17]' in resp) {return source.survey_response.response['ESCICoping[ESCIC17]']}; if ('ASCICoping[ESCIC17]' in resp) {return source.survey_response.response['ASCICoping[ESCIC17]']} else {return source.survey_response.response.ESCICoping_ESCIC17};", "name": "SCI_37" },
    { "path": "_function", "function": "var resp = source.survey_response.response; if ('ESCICoping[ESCIC18]' in resp) {return source.survey_response.response['ESCICoping[ESCIC18]']}; if ('ASCICoping[ESCIC18]' in resp) {return source.survey_response.response['ASCICoping[ESCIC18]']} else {return source.survey_response.response.ESCICoping_ESCIC18};", "name": "SCI_38" },
    { "path": "_function", "function": "var resp = source.survey_response.response; if ('ESCICoping[ESCIC19]' in resp) {return source.survey_response.response['ESCICoping[ESCIC19]']}; if ('ASCICoping[ESCIC19]' in resp) {return source.survey_response.response['ASCICoping[ESCIC19]']} else {return source.survey_response.response.ESCICoping_ESCIC19};", "name": "SCI_39" },
    { "path": "_function", "function": "var resp = source.survey_response.response; if ('ESCICoping[ESCIC20]' in resp) {return source.survey_response.response['ESCICoping[ESCIC20]']}; if ('ASCICoping[ESCIC20]' in resp) {return source.survey_response.response['ASCICoping[ESCIC20]']} else {return source.survey_response.response.ESCICoping_ESCIC20};", "name": "SCI_40" },

    {"path": "calculation.scores.0.sum_score","name": "SCI_Belastung"},
    {"path": "calculation.scores.1.sum_score","name": "SCI_Stress"},
    {"path": "calculation.scores.2.sum_score","name": "SCI_Coping_Pos"},
    {"path": "calculation.scores.3.sum_score","name": "SCI_Coping_AB"},
    {"path": "calculation.scores.4.sum_score","name": "SCI_Coping_SU"},
    {"path": "calculation.scores.5.sum_score","name": "SCI_Coping_REL"},
    {"path": "calculation.scores.6.sum_score","name": "SCI_Coping_ALK"}

  ]
});
      export_files.push({
    "options": {
        "name": "TMT",
        "description": "Komplettexport",
        "export_optinomic_ids": false,
        "export_patient_details": false,
        "export_stay_details": false,
        "export_header": true,
        "delimter": ";",
        "source": "tmt"
    },

  "fields": [
    { "path": "_function", "function": "return source.stay.cis_fid/100", "name":"FID" },
    { "path": "survey_response.response.Messzeitpunkt", "name": "Messzeitpunkt" },
    { "path": "_function", "function": "var resp = source.survey_response.response; if ('Date' in resp) {return ExportHelpers.formatDateISONoTime(source.survey_response.response.Date)} else {return ExportHelpers.formatDateCH(source.survey_response.filled)};", "name": "Datum"},
    { "path": "patient.gender", "name": "Geschlecht" },
    { "path": "calculation.percentile.education", "name": "Bildungsgruppe" },
    { "path": "survey_response.response.Ausbildungsjahre", "name": "Ausbildungsjahre" },
    { "path": "calculation.percentile.age_perz.altersgruppe", "name": "Altersgruppe" },
    { "path": "patient.extras.age_when_filled", "name": "Alter" },
    { "path": "survey_response.response.TMTATime", "name": "TMTATime" },
    { "path": "survey_response.response.TMTAError", "name": "TMTAError" },
    { "path": "calculation.percentile.z_scores.tmtA_z_rounded", "name": "TMT_A_z" },
    { "path": "survey_response.response.TMTBTime", "name": "TMTBTime" },
    { "path": "survey_response.response.TMTBError", "name": "TMTBError" },
    { "path": "calculation.percentile.z_scores.tmtB_z_rounded", "name": "TMT_B_z" },
    { "path": "calculation.percentile.z_scores.quotient_rounded", "name": "BAquotient" }
  ]
});
      export_files.push({
  "options": {
    "name": "WHOQOL-BREF",
    "description": "whoqol",
    "export_optinomic_ids": false,
    "export_patient_details": false,
    "export_stay_details": false,
    "export_header": true,
    "delimter": ";",
    "source": "whoqol"
  },
  "fields": [
    {"path": "survey_response.response.FID","name": "FID-Angabe"},
    {"path": "_function", "function": "return source.stay.cis_fid/100","name":"FID"},
    {"path": "survey_response.response.Erhebungszeitpunkt","name": "Erhebungszeitpunkt"},
    {"path": "survey_response.response.andererZeitpunkt","name": "andererZeitpunkt"},
    {"path": "survey_response.response.Datum","name": "Datum"},
    {"path": "survey_response.response.EWHOQOL1","name": "WHOQOL_1"},
    {"path": "survey_response.response.EWHOQOL2","name": "WHOQOL_2"},
    {"path": "survey_response.response.EWHOQOL39[EWHOQOL3]","name": "WHOQOL_3"},
    {"path": "survey_response.response.EWHOQOL39[EWHOQOL4]","name": "WHOQOL_4"},
    {"path": "survey_response.response.EWHOQOL39[EWHOQOL5]","name": "WHOQOL_5"},
    {"path": "survey_response.response.EWHOQOL39[EWHOQOL6]","name": "WHOQOL_6"},
    {"path": "survey_response.response.EWHOQOL39[EWHOQOL7]","name": "WHOQOL_7"},
    {"path": "survey_response.response.EWHOQOL1014[EWHOQOL10]","name": "WHOQOL_10"},
    {"path": "survey_response.response.EWHOQOL1014[EWHOQOL11]","name": "WHOQOL_11"},
    {"path": "survey_response.response.EWHOQOL15","name": "WHOQOL_15"},
    {"path": "survey_response.response.EWHOQOL1625[EWHOQOL16]","name": "WHOQOL_16"},
    {"path": "survey_response.response.EWHOQOL1625[EWHOQOL17]","name": "WHOQOL_17"},
    {"path": "survey_response.response.EWHOQOL1625[EWHOQOL18]","name": "WHOQOL_18"},
    {"path": "survey_response.response.EWHOQOL1625[EWHOQOL19]","name": "WHOQOL_19"},
    {"path": "survey_response.response.EWHOQOL26","name": "WHOQOL_26"},
    {"path": "calculation.all_results.koerperliche_lebensqualitaet_sum_score","name": "phys_sum_score"},
    {"path": "calculation.all_results.psychische_lebensqualitaet_scale_score","name": "psych_scale_score"},
    {"path": "calculation.all_results.psychische_lebensqualitaet_sum_score","name": "psych_sum_score"},
    {"path": "calculation.all_results.koerperliche_lebensqualitaet_scale_score","name": "phys_scale_score"}
  ]
});

      // Find Sources Index and enhance options!
      export_files.forEach(function (f, fID) {
        if ("options" in f) {
          if ("source" in f.options) {
            f.source = Object.assign({}, _object_source[f.options.source]);
          }
        };
      });

      var d = {};
      d.default_patient = d.default_patient = [
    { "name": "PID", "path": "patient.cis_pid" },
    { "name": "optinomic_patient_gender", "path": "patient.gender" },
];;
      d.default_stay = d.default_stay = [{
        "name": "Fall",
        "path": "_function",
        "function": "var cis_fid = source.stay.cis_fid + ''; cis_fid.slice(cis_fid.length - 4, cis_fid.length - 2); var fid = parseInt(cis_fid.slice(cis_fid.length - 4, cis_fid.length - 2)); if (fid > 0) { return fid; } else { return ''; };"
    },
    {
        "name": "MedStatFid",
        "path": "_function",
        "function": "var cis_pid = source.patient.cis_pid + '00'; var cis_fid = source.stay.cis_fid + ''; var medstatfid = parseInt(cis_pid + cis_fid.slice(cis_fid.length - 4, cis_fid.length - 2)); return medstatfid;"
    },
    {
        "name": "optinomic_patient_age_when_filled",
        "path": "patient.extras.age_when_filled"
    },
    {
        "name": "optinomic_filled",
        "path": "survey_response.filled"
    },
    {
        "name": "optinomic_start",
        "path": "stay.start"
    },
    {
        "name": "optinomic_stop",
        "path": "stay.stop"
    }
];;
      d.default_optinomic_fields = d.default_optinomic_fields = [
    { "name": "optinomic_patient_id", "path": "patient_id" },
    { "name": "optinomic_cis_pid", "path": "stay.cis_pid" },
    { "name": "optinomic_stay_id", "path": "stay_id" },
    { "name": "optinomic_cis_fid", "path": "stay.cis_fid" },
    { "name": "optinomic_event_id", "path": "event_id" },
    { "name": "optinomic_pum_id", "path": "pum_id" },
    { "name": "optinomic_survey_response_id", "path": "survey_response_id" }
];;
      

      function compare(a, b) {
        if (a.options.name < b.options.name)
          return -1;
        if (a.options.name > b.options.name)
          return 1;
        return 0;
      }

      export_files.sort(compare);
      this.set('_export_files', export_files);
      this.set('_default_fields', d);

      console.log('optinomicExportToolbox (Behavior)', this._export_files, this._calculation_sources);
    },

    // -------------------------------- Liefecycle --------------------------------

    created: function () {
      this.__setSources();
    }
  };
</script>

<link rel="import" href="polymer/polymer-element.html">
<link rel="import" href="paper-button/paper-button.html">
<link rel="import" href="paper-tooltip/paper-tooltip.html">

<dom-module id="file-download">
  <template>
    <style include="optinomic-styles">
      :host {
        display: block;
      }

    </style>

    <div>
      <template is="dom-if" if="[[_filename_set]]">
        <template is="dom-if" if="[[_button_mode]]">
          <paper-button class$="[[buttonColor]]" on-click="_onDownloadFile">[[extension]]</paper-button>
        </template>
        <template is="dom-if" if="[[!_button_mode]]">
          <paper-icon-button class$="[[buttonColor]]" on-click="_onDownloadFile" icon="[[icon]]"></paper-icon-button>
        </template>
      </template>
      <paper-tooltip position="[[tooltip]]">[[_filename_full]]</paper-tooltip>
      <a href="#" id="fileLink" hidden download$="[[_filename_full]]"></a>
    </div>

  </template>

  <script>
    class fileDownload extends Polymer.Element {

      static get is() {
        return 'file-download';
      }

      static get actions() {
        return AsyncActionsBehavior.actions;
      }

      // Properties
      static get properties() {
        return {

          file: {
            type: Object,
            observer: '_setFile'
          },

          name: {
            type: Object,
            observer: '_setFilename'
          },

          extension: {
            type: String,
            observer: '_setFilename'
          },

          dateprefix: {
            type: Object,
            value: true
          },

          stringify: {
            type: Object,
            value: true
          },

          icon: {
            type: String,
            observer: '_setMode'
          },

          tooltip: {
            type: String,
            value: 'top'
          },

          buttonColor: {
            type: String,
            value: 'grey'
          }

        };
      }

      // --------------- Functions ---------------

      _onDownloadFile(e) {

        var content = this._file;

        e.preventDefault();
        var myLink = this.$.fileLink;
        const link = this._createFile(content);
        myLink.href = link;
        myLink.click();
      }

      _createFile(text) {
        const textBlob = new Blob([text], {type: 'text/plain'});
        return window.URL.createObjectURL(textBlob);
      }

      // --------------- Observers ---------------

      _setMode() {
        this._debouncer = Polymer.Debouncer.debounce(this._debouncer, Polymer.Async.timeOut.after(250), () => {

          var _button_mode = true;
          if ((this.icon !== null) && (this.icon !== undefined)) {
            _button_mode = false;
          };
          this.set('_button_mode', _button_mode);

        });
      }

      _setFile() {
        this._setFileDebouncer = Polymer.Debouncer.debounce(this._setFileDebouncer, Polymer.Async.timeOut.after(200), () => {

          var _file = null;
          if ((this.file !== null) && (this.file !== undefined)) {
            if (this.stringify) {
              _file = JSON.stringify(this.file, null, 2);
            } else {
              _file = this.file;
            };

            this.set('_file', _file);
          };

        });
      }

      _setFilename() {
        this._setFilenameDebouncer = Polymer.Debouncer.debounce(this._setFilenameDebouncer, Polymer.Async.timeOut.after(250), () => {

          if ((this.name !== null) && (this.name !== undefined)) {
            if ((this.extension !== null) && (this.extension !== undefined)) {

              var getDatePrefix = function () {
                var d = new Date();
                var y = d.getFullYear();
                var m = d.getMonth() + 1;
                var t = d.getUTCDate();

                if (m < 10) {
                  m = "0" + m;
                };

                if (t < 10) {
                  t = "0" + t;
                };

                return y + "_" + m + "_" + t + " - ";
              }

              var fn = "";
              if (this.dateprefix) {
                fn = getDatePrefix();
              };

              fn = fn + this.name + "." + this.extension;

              this.set('_filename_full', fn);
              this.set('_filename_set', true);

            };
          };

        });
      }

      // --------------- Lifecycle ---------------

      _init() {
        this.set('_filename_set', false);
        this.set('_button_mode', true);
        // console.warn('_init :: fileDownload');
      }

      ready() {
        super.ready();
        this._init();
      }
    }

    window.customElements.define(fileDownload.is, fileDownload);
  </script>
</dom-module>

<link rel="import" href="polymer/polymer-element.html">
<link rel="import" href="paper-button/paper-button.html">
<link rel="import" href="paper-spinner/paper-spinner.html">
<link rel="import" href="iron-collapse/iron-collapse.html">
<link rel="import" href="paper-tooltip/paper-tooltip.html">
<link rel="import" href="optinomic-elements/optinomic-clipboard/optinomic-clipboard.html">
<dom-module id="element-export">
    <template>
        <style include="optinomic-styles">
         :host {
            display: block;
        }

        .container {
            border-top: 1px solid #E0E0E0;
        }

        .circle {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            font-size: 14px;
            font-weight: 500;
            color: #fff;
            line-height: 24px;
            text-align: center;
        }

        .red {
            color: #F44336;
            background-color: #FFEBEE;
        }

        .red:hover {
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);
            transition: all 0.3s cubic-bezier(.25, .8, .25, 1);
        }

        .green {
            color: #4CAF50;
            background-color: #E8F5E9;
        }

        .green:hover {
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);
            transition: all 0.3s cubic-bezier(.25, .8, .25, 1);
        }
        </style>
        <div class="container">
            <div class="horizontal">
                <div style="width:48px;text-align:center">
                    <template is="dom-if" if="[[_loading]]" restamp="true">
                        <paper-spinner active></paper-spinner>
                    </template>
                    <template is="dom-if" if="[[!_loading]]" restamp="true">
                        <template is="dom-if" if="[[_data_ready]]" restamp="true">
                            <file-download icon="input" file="[[_sr]]" extension="json" name="Calculation - [[definition.source.userapp_id]]-[[definition.source.userapp_calculation_id]]" tooltip="right"></file-download>
                        </template>
                    </template>
                </div>
                <div style="width:42px;">
                    <template is="dom-if" if="[[_data_ready]]" restamp="true">
                        <p class=" circle green">[[_sr.survey_responses.length]]</p>
                    </template>
                </div>
                <div class="flex" style="padding-top:10px;">
                    <h4 style="margin:0;color:#3F51B5">[[definition.options.name]]</h4>
                    <p class="caption" style="margin-top:-6px;">[[definition.options.description]]</p>
                </div>
                <div style="width:96px;">
                    <template is="dom-if" if="[[_data_ready]]" restamp="true">
                        <template is="dom-if" if="[[_created_CSV]]" restamp="true">
                            <template is="dom-if" if="[[_settings_override]]" restamp="true">
                                <p class="circle green">S</p>
                                <paper-tooltip position="left">Globale-Einstellungen</paper-tooltip>
                            </template>
                            <template is="dom-if" if="[[_filter_override]]" restamp="true">
                                <p class=" circle red">[[_json_file.rows.length]]</p>
                                <paper-tooltip position="right">Filter</paper-tooltip>
                            </template>
                            <template is="dom-if" if="[[!_filter_override]]" restamp="true">
                                <p class="circle green">[[_json_file.rows.length]]</p>
                                <paper-tooltip position="right">Ungefiltert</paper-tooltip>
                            </template>
                        </template>
                    </template>
                </div>
                <div>
                    <template is="dom-if" if="[[_data_ready]]" restamp="true">
                        <template is="dom-if" if="[[_created_CSV]]" restamp="true">
                            <div class="horizontal">
                                <file-download file="[[_csv_file]]" stringify="false" extension="csv" name="[[definition.options.name]]" tooltip="left" button-color="indigo"></file-download>
                                <file-download icon="file-download" button-color="indigo" file="[[_json_file]]" extension="json" name="[[definition.options.name]]" tooltip="left"></file-download>
                            </div>
                        </template>
                        <template is="dom-if" if="[[!_created_CSV]]" restamp="true">
                            <paper-spinner active></paper-spinner>
                        </template>
                    </template>
                    <template is="dom-if" if="[[!_data_ready]]" restamp="true">
                        <template is="dom-if" if="[[!_loading]]" restamp="true">
                            <paper-button class="grey" on-click="_loadData">Anfordern</paper-button>
                        </template>
                    </template>
                </div>
                <paper-icon-button icon="more-vert" on-click="_showMore" class="grey"></paper-icon-button>
            </div>
            <iron-collapse id="collapse">
                <div class="horizontal">
                    <div style="width:48px;text-align:center">&nbsp;</div>
                    <div class="flex" style="margin-top:24px;margin-bottom:24px;margin-right:48px;">
                        <div class="horizontal">
                            <p class="flex">Definition:
                                <span class="caption">Felder: [[definition.fields.length]]</span>
                                <br>
                                <span class="caption">Quelle: [[definition.source.name]] | [[definition.source.userapp_id]]:[[definition.source.userapp_calculation_id]]</span>
                            </p>
                            <div class="horizontal">
                                <optinomic-clipboard text="[[_downloadDefinition]]"></optinomic-clipboard>
                                <file-download button-color="pink" file="[[_downloadDefinition]]" extension="json" name="Definition - [[definition.options.name]]" tooltip="right"></file-download>
                            </div>
                        </div>
                    </div>
                </div>
            </iron-collapse>
        </div>
    </template>
    <script>
    class elementExport extends Polymer.mixinBehaviors([
        opappBehavior, optinomicExportToolbox
    ], ReduxBehavior(Polymer.Element)) {

        static get is() {
            return 'element-export';
        }

        static get actions() {
            return AsyncActionsBehavior.actions;
        }

        // Properties
        static get properties() {
            return {

                definition: {
                    type: Object,
                    observer: 'definitionChanged'
                },

                settings: {
                    type: Object,
                    observer: 'settingsChanged'
                },

                filter: {
                    type: Object,
                    observer: 'filterChanged'
                },

                autorequest: {
                    type: Boolean,
                    value: false,
                    observer: 'autorequestChanged'
                },

                _sr: {
                    type: Object,
                    statePath: function(state) {
                        var return_obj = null;
                        if ((state._app_userapp_calculations !== null) && (state._app_userapp_calculations !== undefined)) {
                            if ((this.definition !== null) && (this.definition !== undefined)) {

                                var home_str = this.definition.source.userapp_id.split('.').join("_");
                                var path = home_str + "___" + this.definition.source.userapp_calculation_id;
                                if ((state._app_userapp_calculations[path] !== null) && (state._app_userapp_calculations[path] !== undefined)) {

                                    return_obj = state._app_userapp_calculations[path].data;

                                };
                            };
                        };
                        return return_obj;
                    },
                    observer: '_sr_ready'
                }

            };
        }

        // --------------- Functions ---------------

        _getState() {
            console.warn(store.getState());
        }

        _showMore() {
            this.$.collapse.toggle();
        }

        _loadData() {
            this._loadDataDebouncer = Polymer.Debouncer.debounce(this._loadDataDebouncer, Polymer.Async.timeOut.after(250), () => {
                if ((this.definition !== null) && (this.definition !== undefined)) {
                    Polymer.RenderStatus.afterNextRender(this, function() {

                        this.set('_loading', true);
                        this.set('_created_JSON', false);
                        this.set('_created_CSV', false);
                        console.log('_loadData', this.definition, this.autorequest);
                        this.dispatch('actionGetUserAppCalculation', this.definition.source.userapp_id, this.definition.source.userapp_calculation_id);

                    });
                };

            });
        }

        _dataDive(source, field) {

            if (field.path === "_function") {

                var ExportHelpers = (function() {

                    var formatDateCH = function(date_string) {
                        date_string = date_string || null
                        if (date_string !== null) {

                            // 1952-11-19T00:00:00.000000000000Z
                            var year = parseInt(date_string.substring(0, 4));
                            var month = parseInt(date_string.substring(5, 7));
                            var day = parseInt(date_string.substring(8, 10));
                            var date_string_return = day + "." + month + "." + year

                            return date_string_return;
                        } else {
                            return null;
                        }
                    };

                    var formatDateISONoTime = function(date_string) {
                        date_string = date_string || null
                        if (date_string !== null) {

                            var date_string_return = date_string.substring(0, 10);

                            return date_string_return;
                        } else {
                            return null;
                        }
                    };

                    var formatDateYYYYMMDD = function(date_string) {
                        date_string = date_string || null
                        if (date_string !== null) {
                            var date_string_return = date_string.substring(0, 10);
                            date_string_return = date_string_return.split('-').join('');
                            return date_string_return;
                        } else {
                            return null;
                        }
                    };

                    var formatDateISO = function(date_string) {
                        date_string = date_string || null
                        if (date_string !== null) {

                            var date = new Date(date_string);
                            date_string_return = date.toISOString();

                            return date_string_return;
                        } else {
                            return null;
                        }
                    };

                    var stringToDate = function(_date, _format, _delimiter) {
                        var formatLowerCase = _format.toLowerCase();
                        var formatItems = formatLowerCase.split(_delimiter);
                        var dateItems = _date.split(_delimiter);
                        var monthIndex = formatItems.indexOf("mm");
                        var dayIndex = formatItems.indexOf("dd");
                        var yearIndex = formatItems.indexOf("yyyy");
                        var month = parseInt(dateItems[monthIndex]);
                        month -= 1;
                        var formatedDate = new Date(dateItems[yearIndex], month, dateItems[dayIndex]);
                        return formatedDate;
                    }

                    return { formatDateCH: formatDateCH, formatDateISO: formatDateISO, formatDateISONoTime: formatDateISONoTime, formatDateYYYYMMDD: formatDateYYYYMMDD, stringToDate: stringToDate };
                })();

                if ("function" in field) {
                    // Call given Function
                    if ((field.function !== null) && (field.function !== undefined)) {
                        //console.warn('field.function', field.function);

                        try {
                            var fn = new Function('source', 'ExportHelpers', field.function);
                            value = fn(source, ExportHelpers);
                        } catch (err) {
                            value = "Error: Undefined Function";
                        };

                    };
                } else {
                    value = "Undefined Function";
                };

            } else {

                var getMyVal = function(path, origin) {
                    return path.split('.').reduce(function(prev, curr) {
                        return prev[curr];
                    }, origin || this);
                };

                var value = getMyVal(field.path, source);

            };

            if ((value === undefined) || (value === null) || (value === NaN) || (value === "NaN")) {
                value = "";
            };

            // console.log('(_dataDive) ', value, field.path, source);
            return value;

        }

        _createCSVandJSONFile(def, filtered) {

            function create_json(survey_responses, _dataDive) {

                var header_array = [];
                var rows_array = [];
                var header_written = false;

                survey_responses.forEach(function(sr, srID) {

                    var fields = def.fields;
                    var fields_obj = {};

                    if ((fields !== null) && (fields !== undefined)) {
                        fields.forEach(function(field, fieldID) {

                            // Header
                            if ((header_written === false) && (sr.all_found)) {
                                header_array.push(field.name);
                            };

                            // Rows
                            fields_obj[field.name] = _dataDive(sr, field);
                        }.bind(this));

                        rows_array.push(fields_obj);

                        if (header_array.length > 0) {
                            header_written = true;
                        };
                    };

                }.bind(this));

                var file = {
                    "header": header_array,
                    "rows": rows_array
                };

                return file;
            };

            function create_csv(json) {

                var f = "";
                var header_str = "";
                var header_written = false;
                var rows_str = "";
                var delimitter = def.options.delimter;
                var newline = "\r\n";

                json.rows.forEach(function(sr, srID) {

                    if ((sr !== null) && (sr !== undefined)) {
                        json.header.forEach(function(field, fieldID) {

                            // Rows
                            rows_str = rows_str + sr[field];
                            if (fieldID === json.header.length - 1) {
                                // Last
                                if (srID !== json.rows.length - 1) {
                                    // Not File-End
                                    rows_str = rows_str + newline;
                                };
                            } else {
                                // Not last
                                rows_str = rows_str + delimitter;
                            };

                        });

                    };

                });

                // Header
                if (def.options.export_header !== false) {

                    json.header.forEach(function(h, hID) {
                        header_str = header_str + h;

                        if (hID === json.header.length - 1) {
                            // Last
                            header_str = header_str + newline;
                        } else {
                            // Not last
                            header_str = header_str + delimitter;
                        };
                    });

                    var file = header_str + rows_str;
                } else {
                    var file = rows_str;
                };

                return file;
            };

            function check_pg_group(group, value) {
                var return_boolean = false;
                group.forEach(function(g, gID) {
                    if (g === value) {
                        return_boolean = true;
                    };
                });
                return return_boolean;
            };

            function dateCheck(from, to, check) {
                var fDate,
                    lDate,
                    cDate;
                fDate = Date.parse(from);
                lDate = Date.parse(to);
                cDate = Date.parse(check);

                if ((cDate <= lDate && cDate >= fDate)) {
                    return true;
                }
                return false;
            };

            Polymer.RenderStatus.afterNextRender(this, function() {

                if ((this._sr !== undefined) && (this._sr !== null)) {
                    if (this._sr.survey_responses.length > 0) {

                        // We have data -> Proceed.
                        var _sr = Object.assign({}, this.get('_sr'));
                        if ("survey_responses" in _sr) {

                            var file_responses = [];
                            if (filtered) {
                                // filter responses

                                var date_rules = false;
                                var pg_rules = false;

                                if ((this.filter !== null) && (this.filter !== undefined)) {
                                    if (this.filter.erhungszeitraum.active) {
                                        date_rules = true;
                                        // console.log('date_rules', date_rules, this.filter.erhungszeitraum);
                                    };
                                    if ((this.filter.pg.active) && (this.filter.pg.rules.length > 0)) {
                                        pg_rules = true;
                                        // console.log('pg_rules', pg_rules, this.filter.pg.rules);
                                    };
                                };

                                _sr.survey_responses.forEach(function(sr, srID) {

                                    // Patientengruppen Regeln
                                    if (pg_rules) {
                                        var to_add = null;
                                        this.filter.pg.rules.forEach(function(r, rID) {
                                            if (r.operator === "IN") {
                                                if ((r.criterion === "AND") || (r.criterion === null)) {
                                                    if ((to_add === true) || (to_add === null)) {
                                                        to_add = check_pg_group(sr.patient_groups.patient_in_group.yes, r.pg);
                                                    };
                                                } else {
                                                    if ((to_add === false)) {
                                                        to_add = check_pg_group(sr.patient_groups.patient_in_group.yes, r.pg);
                                                    };
                                                };

                                            } else {
                                                if ((r.criterion === "AND") || (r.criterion === null)) {
                                                    if ((to_add === true) || (to_add === null)) {
                                                        to_add = check_pg_group(sr.patient_groups.patient_in_group.no, r.pg);
                                                    };
                                                } else {
                                                    if ((to_add === false)) {
                                                        to_add = check_pg_group(sr.patient_groups.patient_in_group.no, r.pg);
                                                    };
                                                };
                                            };
                                        });

                                        if (to_add) {
                                            file_responses.push(sr);
                                        };
                                    } else {
                                        // all responses
                                        file_responses = _sr.survey_responses;
                                    };
                                }.bind(this));

                                // Erhebungszeitraum Regeln
                                if (date_rules) {
                                    var stored_responses = file_responses.slice(0);
                                    file_responses = [];
                                    stored_responses.forEach(function(sr, rID) {

                                        var filled = sr.survey_response.filled;
                                        var filter = this.filter.erhungszeitraum;

                                        var eintritt_in_range = dateCheck(filter.from, filter.to, sr.stay.start);
                                        var austritt_in_range = dateCheck(filter.from, filter.to, sr.stay.stop);

                                        // Falltyp: Alle
                                        if (filter.typ === "Alle") {
                                            if (dateCheck(filter.from, filter.to, filled)) {
                                                file_responses.push(sr);
                                            };
                                        };

                                        // Falltyp: A1
                                        if (filter.typ === "A1") {
                                            if ((eintritt_in_range === true) && (austritt_in_range === true)) {
                                                file_responses.push(sr);
                                            };
                                        };

                                        // Falltyp: A2
                                        if (filter.typ === "A2") {
                                            if ((eintritt_in_range === false) && (austritt_in_range === true)) {
                                                file_responses.push(sr);
                                            };
                                        };

                                        // Falltyp: B
                                        if (filter.falltyp === "B") {
                                            if ((eintritt_in_range === true) && (austritt_in_range === false)) {
                                                file_responses.push(sr);
                                            };
                                        };

                                        // Falltyp: C
                                        if (filter.typ === "C") {
                                            if ((eintritt_in_range === true) && (austritt_in_range === false)) {
                                                file_responses.push(sr);
                                            };
                                        };

                                        // Falltyp: S1
                                        if (filter.typ === "S1") {
                                            if (eintritt_in_range === true) {
                                                file_responses.push(sr);
                                            };
                                        };

                                        // Falltyp: S2
                                        if (filter.typ === "S2") {
                                            if (austritt_in_range === true) {
                                                file_responses.push(sr);
                                            };
                                        };

                                        // Falltyp: S3
                                        if (filter.typ === "S3") {
                                            if ((eintritt_in_range === true) || (austritt_in_range === true)) {
                                                file_responses.push(sr);
                                            };
                                        };

                                        // console.log('Erhebungszeitraum', filled, eintritt_in_range, austritt_in_range);

                                    }.bind(this));
                                };


                            } else {
                                // all responses
                                file_responses = _sr.survey_responses;
                            };

                            this.set('_json_file', null);
                            this.set('_json_file', create_json(file_responses, this._dataDive));
                            this.set('_created_JSON', true);

                            this.set('_csv_file', null);
                            this.set('_csv_file', create_csv(this._json_file));
                            this.set('_created_CSV', true);

                            // console.log('_createCSVandJSONFile', this._csv_file, this._json_file);

                            this.dispatchEvent(new CustomEvent('json', { detail: this._json_file }));

                            this.dispatchEvent(new CustomEvent('csv', { detail: this._csv_file }));

                        };
                    };
                };
            });
        }

        // --------------- Observers ---------------

        _create_files() {
            if (this._data_ready) {
                this.set('_created_JSON', false);
                this.set('_created_CSV', false);

                var enhanced_definition = Object.assign({}, this.get('definition'));

                if (this._settings_override) {

                    enhanced_definition.options = Object.assign(enhanced_definition.options, this.settings);

                    if (enhanced_definition.options.export_stay_details === true) {
                        enhanced_definition.fields = this._default_fields.default_stay.concat(enhanced_definition.fields);
                    };

                    if (enhanced_definition.options.export_patient_details === true) {
                        enhanced_definition.fields = this._default_fields.default_patient.concat(enhanced_definition.fields);
                    };

                    if (enhanced_definition.options.export_optinomic_ids === true) {
                        enhanced_definition.fields = this._default_fields.default_optinomic_fields.concat(enhanced_definition.fields);
                    };

                    // console.error('==> enhanced_definition & fields', enhanced_definition, this._default_fields);
                };

                var filter_active = this._filter_override || false;
                // console.error('==> _createCSVandJSONFile', enhanced_definition, this._filter_override);
                this._createCSVandJSONFile(enhanced_definition, filter_active);

            };
        }

        _sr_ready() {
            this._sr_readyDebouncer = Polymer.Debouncer.debounce(this._sr_readyDebouncer, Polymer.Async.timeOut.after(280), () => {

                if ((this._sr !== undefined) && (this._sr !== null)) {
                    this._getState();
                    this.set('_loading', false);
                    this.set('_data_ready', true);
                    this._create_files();

                };

            });
        }

        settingsChanged() {
            this._settingsChangedDebouncer = Polymer.Debouncer.debounce(this._settingsChangedDebouncer, Polymer.Async.timeOut.after(150), () => {

                if ((this.settings !== null) && (this.settings !== undefined)) {
                    this.set('_settings_override', true);
                    console.warn('settingsChanged', this.settings);
                } else {
                    this.set('_settings_override', false);
                };
                this._create_files();

            });
        }

        filterChanged() {
            this._filterChangedDebouncer = Polymer.Debouncer.debounce(this._filterChangedDebouncer, Polymer.Async.timeOut.after(150), () => {

                if ((this.filter !== null) && (this.filter !== undefined)) {
                    if ((this.filter.pg.active) || (this.filter.erhungszeitraum.active)) {
                        this.set('_filter_override', true);
                        console.warn('filterChanged', this.filter);
                    } else {
                        this.set('_filter_override', false);
                    };
                } else {
                    this.set('_filter_override', false);
                };
                this._create_files();

            });
        }

        autorequestChanged() {
            this._autorequestChangedDebouncer = Polymer.Debouncer.debounce(this._autorequestChangedDebouncer, Polymer.Async.timeOut.after(250), () => {

                if ((this.autorequest) && ((this._data_ready === false))) {
                    this._loadData();
                };

            });
        }

        definitionChanged() {

            this._definitionChangedDebouncer = Polymer.Debouncer.debounce(this._definitionChangedDebouncer, Polymer.Async.timeOut.after(250), () => {

                if ((this.definition !== null) && (this.definition !== undefined)) {

                    var def = Object.assign({}, this.definition);

                    var _downloadDefinition = {
                        "fields": def.fields,
                        "options": def.options
                    };

                    this.set('_downloadDefinition', _downloadDefinition);
                };

            });
        }

        // --------------- Lifecycle ---------------

        _init() {
            this.set('_loading', false);
            this.set('_data_ready', false);
            // console.warn('_init :: Export-Toolbox', this.definition);
        }

        ready() {
            super.ready();
            this._init();
        }
    }

    window.customElements.define(elementExport.is, elementExport);
    </script>
</dom-module>
<link rel="import" href="polymer/polymer-element.html">
<link rel="import" href="paper-input/paper-input.html">
<link rel="import" href="paper-card/paper-card.html">
<link rel="import" href="vaadin-combo-box/vaadin-combo-box.html">
<link rel="import" href="iron-dropdown/iron-dropdown.html">
<link rel="import" href="vaadin-valo-theme/vaadin-checkbox.html">
<link rel="import" href="vaadin-checkbox/vaadin-checkbox.html">
<link rel="import" href="vaadin-dialog/vaadin-dialog.html">
<link rel="import" href="paper-card/paper-card.html">

<dom-module id="export-filter">
  <template>
    <style include="optinomic-styles">
      :host {
        display: block;
      }

      .field {
        padding-right: 6px;
      }

      .filter_container {
        padding: 24px;
        background-color: #F5F5F5;
        border-radius: 24px;
        margin-bottom: 12px;
      }

      .rule {
        padding: 8px;
        height: 20px;
        background-color: #FCE4EC;
        color: #E91E63;
        border-radius: 3px;
        cursor: pointer;
      }

      .criterion {
        width: 128px;
        color: #E91E63;
        margin-right: 12px;
      }

    </style>

    <vaadin-dialog id="dialog_add_pg_filter" no-close-on-esc no-close-on-outside-click>
      <template>
        <paper-card heading="Patientengruppe: Regel hinzufügen" style="width:350px;">
          <div class="card-content">
            <vaadin-combo-box id="pg" style="width:100%" value="{{_pg_rule_edit.operator}}" label="Selektiere alle Patienten, welche sich..." items="[[_pg_operators]]" item-value-path="value" item-label-path="label">
              <template>
                <b>[[item.label]]</b>
              </template>
            </vaadin-combo-box>
            <p>...folgender Gruppe befinden:</p>
            <vaadin-combo-box id="pg" style="width:100%" value="{{_pg_rule_edit.pg}}" label="Patientengruppe" items="[[_patient_groups]]" item-value-path="value" item-label-path="label">
              <template>
                <b>[[item.label]]&nbsp;</b>(PG[[item.value]])
              </template>
            </vaadin-combo-box>
          </div>
          <div class="card-actions">
            <paper-button on-click="_pg_rule_cancel" style="color:grey">Abbrechen</paper-button>&nbsp;&nbsp;
            <paper-button on-click="_pg_rule_save">Speichern</paper-button>
          </div>
        </paper-card>

      </template>
    </vaadin-dialog>

    <div id="element">
      <div class="filter_container">

        <div class="selector">
          <h3>Erhebungszeitraum</h3>
          <vaadin-checkbox checked="{{_erhungszeitraum_use}}">
            <template is="dom-if" if="[[!_erhungszeitraum_use]]" restamp="true">nicht
            </template>einschränken
          </vaadin-checkbox>
        </div>

        <div hidden$="[[!_erhungszeitraum_use]]">
          <div class="horizontal">
            <div class="field flex">
              <paper-input id="erhebungszeitraum_von" label="Von" placeholder="YYYY-MM-DD" value$="{{_erhebungszeitraum_von}}"></paper-input>
            </div>
            <div class="field flex">
              <paper-input id="erhebungszeitraum_bis" label="Bis" placeholder="YYYY-MM-DD" value$="{{_erhebungszeitraum_bis}}"></paper-input>
            </div>
          </div>

          <vaadin-combo-box id="falltyp" style="width:100%" value="{{_d.falltyp.selected.typ}}" label="Falltyp" items="[[_d.falltyp.all]]" item-value-path="typ" item-label-path="typ">
            <template>
              <paper-icon-item>
                <paper-item-body two-line>
                  <div>
                    <b>[[item.typ]]:</b>
                    [[item.name]]</div>
                </paper-item-body>
              </paper-icon-item>
            </template>
          </vaadin-combo-box>
        </div>
      </div>

      <div class="filter_container">
        <div class="selector">
          <h3>Patientengruppen ([[_patient_groups.length]])</h3>
          <vaadin-checkbox checked="{{_patientgroups_use}}">
            <template is="dom-if" if="[[!_patientgroups_use]]" restamp="true">nicht
            </template>einschränken
          </vaadin-checkbox>
        </div>
        <template is="dom-if" if="[[_patientgroups_use]]">

          <h3>Alle Patienten welche folgender Regel entsprechen:</h3>

          <div>
            <template is="dom-repeat" items="[[_pg_rules]]">
              <div class="horizontal" style="height: 42px;">

                <div class="criterion">

                  <template is="dom-if" if="[[!item.first]]" restamp="true">
                    <vaadin-combo-box id="pg" style="width:100%" value="{{item.criterion}}" items="[[_pg_criterions]]" item-value-path="value" item-label-path="value">
                      <template>
                        <b>[[item.value]]</b>([[item.label]])
                      </template>
                    </vaadin-combo-box>
                  </template>

                  <template is="dom-if" if="[[item.first]]">
                    <span stlye="padding-left:48px;">WHERE</span>
                  </template>

                </div>
                <div class="rule flex" on-click="_pg_edit_rule">[[item.operator]] ([[item.pg_name]])</div>
              </div>
            </template>
          </div>
          <div class="horizontal">
            <div class="horizontal">
              <paper-button on-click="_pg_rule_add" class="grey">Regel hinzufügen</paper-button>
              <p class="caption">[[_pg_rules.length]]</p>
            </div>
            <paper-button on-click="_pg_rule_delete" class="grey">Regeln löschen</paper-button>
          </div>
        </template>

      </div>

      <div class="horizontal">
        <div class="flex">
          <paper-button class="grey" on-tap="_cancelFilter">Nicht anwenden</paper-button>
        </div>
        <div style="height:42px;">
          <paper-button class="pink" on-tap="_setFilter">Anwenden</paper-button>
        </div>
      </div>

    </div>

  </template>

  <script>

    class exportFilter extends Polymer.mixinBehaviors([opappBehavior], ReduxBehavior(Polymer.Element)) {

      static get is() {
        return 'export-filter';
      }

      static get properties() {
        return {

          _patient_groups: {
            type: Object,
            statePath: function (state) {
              var return_array = [];
              if ((state.patient_groups.all !== null) && (state.patient_groups.all !== undefined)) {
                if ((state.patient_groups.data !== null) && (state.patient_groups.data !== undefined)) {

                  state.patient_groups.all.forEach(function (pg, pgID) {
                    var current_pg = state.patient_groups.data[pg];
                    var push_pg = {
                      label: current_pg.data.name,
                      value: pg
                    };
                    return_array.push(push_pg);
                  });

                };
              };
              return return_array;
            }
          }
        };
      }

      _pg_rule_add() {

        var operators = [
          {
            "label": "NICHT IN",
            "value": "NOT"
          }, {
            "label": "IN",
            "value": "IN"
          }
        ];

        var criterions = [
          {
            "label": "ODER",
            "value": "OR"
          }, {
            "label": "UND",
            "value": "AND"
          }
        ];

        this.set('_pg_rule_edit', {"operator": "IN"});
        this.set('_pg_operators', operators);
        this.set('_pg_criterions', criterions);

        var dialog_add_pg_filter = this.$.dialog_add_pg_filter;
        dialog_add_pg_filter.opened = true;

      }

      _pg_rule_delete() {
        this.set('_pg_rules', []);
      }

      _pg_rule_save() {

        var _pg_rules = this.get('_pg_rules');
        _pg_rules = _pg_rules.slice(0);

        var _pg_rule_edit = Object.assign({}, this.get('_pg_rule_edit'));
        var state = this.getState();
        var pg_data = state.patient_groups.data[_pg_rule_edit.pg];
        console.warn('pg_data', pg_data, _pg_rule_edit.pg);
        _pg_rule_edit.pg_name = pg_data.data.name;

        if ("id" in _pg_rule_edit) {
          _pg_rules[_pg_rule_edit.id] = _pg_rule_edit;
        } else {
          _pg_rules.push(_pg_rule_edit);

        };

        _pg_rules.forEach(function (r, rID) {
          r.id = rID;
          if (r.id === 0) {
            r.criterion = null;
            r.first = true;
          } else {
            r.first = false;
            if ("criterion" in r) {} else {
              r.criterion = 'AND';
            };

          };
        });

        this.set('_pg_rules', _pg_rules);
        // console.log('_pg_rules', _pg_rules);

        var dialog_add_pg_filter = this.$.dialog_add_pg_filter;
        dialog_add_pg_filter.opened = false;

      }

      _pg_edit_rule(e) {
        var selected_item = Object.assign({}, e.model.item);
        this.set('_pg_rule_edit', selected_item);

        var dialog_add_pg_filter = this.$.dialog_add_pg_filter;
        dialog_add_pg_filter.opened = true;
      }

      _pg_rule_cancel() {
        var dialog_add_pg_filter = this.$.dialog_add_pg_filter;
        dialog_add_pg_filter.opened = false;

      }

      _setDefaultDates() {
        var erhebungszeitraum_von = this.$.erhebungszeitraum_von;
        var erhebungszeitraum_bis = this.$.erhebungszeitraum_bis;

        var current_year = new Date().getFullYear();
        erhebungszeitraum_von.value = current_year + "-01-01";
        erhebungszeitraum_bis.value = current_year + "-12-31";
      }

      _setFilter() {;

        var erhebungszeitraum_von = this.$.erhebungszeitraum_von;
        var erhebungszeitraum_bis = this.$.erhebungszeitraum_bis;

        var _pg_rules = this.get('_pg_rules');
        _pg_rules = _pg_rules.slice(0);

        var return_object = {
          detail: {
            "action": "filter",
            "filter": {
              "erhungszeitraum": {
                "active": this._erhungszeitraum_use,
                "typ": this._d.falltyp.selected.typ,
                "from": erhebungszeitraum_von.value,
                "to": erhebungszeitraum_bis.value
              },
              "pg": {
                "active": this._patientgroups_use,
                "rules": _pg_rules
              }
            }
          }
        };
        this.dispatchEvent(new CustomEvent('filter', return_object));
      }

      _cancelFilter() {

        var return_object = {
          detail: {
            "action": "cancel",
            "filter": null
          }
        };
        this.dispatchEvent(new CustomEvent('filter', return_object));
      }

      _init() {

        var d = {};

        // Falltyp
        d.falltyp = {
          "all": [
            {
              "id": 0,
              "typ": "Alle",
              "name": "Alle Messungen im Erhebungszeitraum ausgeben"
            }, {
              "id": 1,
              "typ": "A1",
              "name": "Ein- und Austritt im Erhebungszeitraum"
            }, {
              "id": 2,
              "typ": "A2",
              "name": "Einritt vor Erhebungszeitraum und Austritt im Erhebungszeitraum"
            }, {
              "id": 3,
              "typ": "B",
              "name": "Einritt im Erhebungszeitraum und Austritt nach Erhebungszeitraum"
            }, {
              "id": 4,
              "typ": "C",
              "name": "Eintritt vor Erhebungszeitraum und Austritt nach Erhebungszeitraum"
            }, {
              "id": 5,
              "typ": "S1",
              "name": "Eintritt im Erhebungszeitraum"
            }, {
              "id": 6,
              "typ": "S2",
              "name": "Austritt im Erhebungszeitraum"
            }, {
              "id": 7,
              "typ": "S3",
              "name": "Eintritt oder Austritt im Erhebungszeitraum"
            }
          ]
        };
        d.falltyp.selected = d.falltyp.all[0];

        // this._setDefaultFilter(); Set & Log
        d.init_done = true;
        this.set('_d', d);
        this._d = d;
        console.log('(INIT) <element-filter>', d);

        var current_year = new Date().getFullYear();
        this.set('_erhungszeitraum_use', false);
        this.set('_erhebungszeitraum_von', current_year + "-01-01");
        this.set('_erhebungszeitraum_bis', current_year + "-12-31");

        this.set('_patientgroups_use', false);
        this.set('_pg_rules', []);

      }

      constructor() {
        super();
      }

      ready() {
        super.ready();

        Polymer.RenderStatus.afterNextRender(this, function () {
          this._init();
        });
      }

    }

    window.customElements.define(exportFilter.is, exportFilter);
  </script>
</dom-module>

<link rel="import" href="polymer/polymer-element.html">
<link rel="import" href="paper-input/paper-input.html">
<link rel="import" href="paper-checkbox/paper-checkbox.html">

<dom-module id="export-settings">
  <template>
    <style include="optinomic-styles">
      :host {
        display: block;
      }

      .field {
        padding-right: 6px;
      }

      .filter_container {
        margin-bottom: 12px;
      }

      .section {
        width: 200px;
      }

      .settings_container {
        padding: 24px;
        background-color: #F5F5F5;
        border-radius: 24px;
        margin-bottom: 12px;
      }

    </style>

    <div class="settings_container">
      <h2>Export-Settings</h2>
      <p>Sie können hier die Standardeinstellungen der einzelnen Files global übersteuern:</p>
      <div style="padding:18px;">
        <div class="horizontal">
          <h4 class="section">Inhalt</h4>
          <div class="flex horizontal">
            <paper-checkbox id="export_optinomic_ids" checked>Optinomic - ID's</paper-checkbox>
            <paper-checkbox id="export_patient_details" checked>Patienten-Details</paper-checkbox>
            <paper-checkbox id="export_stay_details" checked>Fall-Details</paper-checkbox>
          </div>
        </div>
        <div class="horizontal">
          <h4 class="section">CSV - Optionen</h4>
          <div class="flex horizontal">
            <paper-checkbox class="flex" id="export_header" checked>Header-Zeile exportieren</paper-checkbox>
            <paper-input id="csv_delimter" label="CSV : delimter" placeholder="CSV : delimter" value=";"></paper-input>
          </div>
        </div>
      </div>
      <div class="horizontal">
        <div style="height:42px;">
          <paper-button class="grey" on-tap="_cancelOverrideSettings">Schliessen</paper-button>
        </div>
        <div style="height:42px;">
          <paper-button class="pink" on-tap="_saveOverrideSettings">Anwenden</paper-button>
        </div>
      </div>
    </div>

  </template>

  <script>

    class exportSettings extends Polymer.Element {

      static get is() {
        return 'export-settings';
      }

      static get properties() {
        return {

          something: {
            type: Object
          }
        };
      }

      _cancelOverrideSettings() {

        var return_object = {
          detail: {
            "action": "cancel",
            "settings": null
          }
        };
        this.dispatchEvent(new CustomEvent('settings', return_object));

      }

      _saveOverrideSettings() {

        var settings = {};
        var export_optinomic_ids = this.$.export_optinomic_ids;
        var export_patient_details = this.$.export_patient_details;
        var export_stay_details = this.$.export_stay_details;
        var delimter = this.$.csv_delimter;
        var export_header = this.$.export_header;

        settings.export_optinomic_ids = export_optinomic_ids.checked;
        settings.export_patient_details = export_patient_details.checked;
        settings.export_stay_details = export_stay_details.checked;
        settings.export_header = export_header.checked;
        settings.delimter = delimter.value;
        settings.override = true;

        var return_object = {
          detail: {
            "action": "override",
            "settings": settings
          }
        };
        this.dispatchEvent(new CustomEvent('settings', return_object));

      }

      constructor() {
        super();
      }

      ready() {
        super.ready();

        Polymer.RenderStatus.afterNextRender(this, function () {});
      }

    }

    window.customElements.define(exportSettings.is, exportSettings);
  </script>
</dom-module>

<link rel="import" href="polymer/polymer-element.html">
<link rel="import" href="iron-pages/iron-pages.html">
<link rel="import" href="optinomic-elements/optinomic-title/optinomic-title.html">
<link rel="import" href="optinomic-elements/optinomic-clipboard/optinomic-clipboard.html">
<link rel="import" href="juicy-jsoneditor/juicy-jsoneditor.html">

<link rel="import" href="vaadin-valo-theme/vaadin-button.html">
<link rel="import" href="vaadin-valo-theme/vaadin-checkbox.html">
<link rel="import" href="vaadin-valo-theme/vaadin-combo-box.html">
<link rel="import" href="vaadin-valo-theme/vaadin-date-picker.html">
<link rel="import" href="vaadin-valo-theme/vaadin-form-item.html">
<link rel="import" href="vaadin-valo-theme/vaadin-form-layout.html">
<link rel="import" href="vaadin-valo-theme/vaadin-grid.html">
<link rel="import" href="vaadin-valo-theme/vaadin-overlay.html">
<link rel="import" href="vaadin-valo-theme/vaadin-text-field.html">

<link rel="import" href="vaadin-checkbox/vaadin-checkbox.html">
<link rel="import" href="vaadin-grid/vaadin-grid.html">
<link rel="import" href="vaadin-form-layout/vaadin-form-layout.html">
<link rel="import" href="vaadin-text-field/vaadin-text-field.html">
<link rel="import" href="vaadin-date-picker/vaadin-date-picker.html">
<link rel="import" href="vaadin-split-layout/vaadin-split-layout.html">
<link rel="import" href="vaadin-dialog/vaadin-dialog.html">
<link rel="import" href="vaadin-combo-box/vaadin-combo-box.html">

<dom-module id="optinomic-template">
  <template>
    <style include="optinomic-styles">
      :host {
        display: block;
        --right-top-height: 100%;
        --right-bottom-height: 0;
      }

      .fullscreen {
        height: calc(100vh);
        min-height: calc(100vh);
      }

      .left_bar {
        background: #E0E0E0;
        min-width: 128px;
        max-width: 128px;
        padding: 12px;
      }

      .right_top {
        height: var(--right-top-height);
        min-height: var(--right-top-height);
        transition: all 0.25s;
      }

      .right_bottom {
        height: var(--right-bottom-height);
        max-height: var(--right-bottom-height);
        transition: all 0.25s;
      }

      .page {
        padding: 12px;
      }

    </style>

    <vaadin-split-layout class="fullscreen">
      <div class="left_bar">

        <paper-icon-button style="float:right" class="grey" on-click="_showStart" style="margin-right:6px;" icon="home"></paper-icon-button>
        <h2>Export-Toolbox</h2>
        <div class="horizontal" style="margin-top:-24px;">
          <p>[[_export_files.length]] Files</p>
          <p>[[_calculation_sources.array.length]] Quellen</p>
        </div>

        <hr>
        <h3>Datenbezug</h3>

        <vaadin-checkbox checked="{{_autorequest}}">
          automatisch
        </vaadin-checkbox>

        <hr>
        <h3>Filter</h3>
        <div class="horizontal" style="margin-top:-24px;">
          <p>&nbsp;</p>
          <template is="dom-if" if="[[_filter_have]]" restamp="true">
            <paper-button class="pink" on-click="_showFilter">Bearbeiten</paper-button>
          </template>
          <template is="dom-if" if="[[!_filter_have]]" restamp="true">
            <paper-button class="grey" on-click="_showFilter">Erstellen</paper-button>
          </template>
        </div>

        <hr>
        <h3>Globale Einstellungen</h3>
        <div class="horizontal" style="margin-top:-24px;">
          <p>&nbsp;</p>
          <template is="dom-if" if="[[_settings_have]]" restamp="true">
            <paper-button class="pink" on-click="_showSettings">Bearbeiten</paper-button>
          </template>
          <template is="dom-if" if="[[!_settings_have]]" restamp="true">
            <paper-button class="grey" on-click="_showSettings">Erstellen</paper-button>
          </template>
        </div>

      </div>

      <vaadin-split-layout vertical>
        <div class="right_top page">

          <iron-pages selected="[[_app_state]]" attr-for-selected="name" fallback-selection="start" role="main">
            <div name="start">
              <div class="horizontal">
                <paper-icon-button class="grey" on-click="_showStart" style="margin-right:6px;" icon="home"></paper-icon-button>
                <optinomic-title class="flex" h1="Export-Toolbox" h2="Daten exportieren"></optinomic-title>
              </div>

              <template is="dom-repeat" items="[[_export_files]]" as="ef">
                <element-export on-json="_e_data" definition="[[ef]]" autorequest="[[_autorequest]]" settings="[[_settings]]" filter="[[_filter]]"></element-export>
              </template>
            </div>

          </iron-pages>

        </div>

        <div class="right_bottom">

          <iron-pages selected="[[_app_state]]" attr-for-selected="name" fallback-selection="start">
            <div name="start" class="page">Selektieren Sie eine Aktion!</div>

            <div name="filter" class="page">
              <h2>Filter</h2>
              <export-filter on-filter="_e_filter"></export-filter>
            </div>

            <div name="settings" class="page">
              <h2>Einstellungen</h2>
              <export-settings on-settings="_e_settings"></export-settings>
            </div>
          </iron-pages>

        </div>

      </vaadin-split-layout>
    </vaadin-split-layout>

  </template>

  <script>
    class optinomicTemplate extends Polymer.mixinBehaviors([
      opappBehavior, optinomicExportToolbox
    ], ReduxBehavior(Polymer.Element)) {

      static get is() {
        return 'optinomic-template';
      }

      static get actions() {
        return AsyncActionsBehavior.actions;
      }

      // Properties
      static get properties() {
        return {

          _app_state: {
            type: String,
            value: 'start'
          },

          _autorequest: {
            type: Boolean,
            value: false
          },

          _user: {
            type: Object,
            statePath: '_app_user.data'
          }

        };
      }

      // --------------- Functions ---------------

      _showStart() {
        this._showExtras(false);
        this.set('_app_state', 'start');
      }

      _showFilter() {
        this._showExtras(true);
        this.set('_app_state', 'filter');
      }

      _showSettings() {
        this._showExtras(true);
        this.set('_app_state', 'settings');
      }

      _showExtras(should) {

        var h = window.innerHeight;
        var top = 96;
        var top_px = top + 'px';
        var bottom = h - top;
        var bottom_px = bottom + 'px';
        console.log(h, top_px, bottom_px);

        if (should) {
          this.updateStyles({'--right-top-height': top_px, '--right-bottom-height': bottom_px});
        } else {
          this.updateStyles({'--right-top-height': '100%', '--right-bottom-height': '0%'});
        };

      }

      // --------------- Events ---------------

      _e_data(e) {
        console.warn('_e_data', e.detail);
      }

      _e_settings(e) {

        if (e.detail.action === 'cancel') {
          this.set('_settings', null);
          this.set('_settings_have', false);
        } else {
          this.set('_settings', Object.assign({}, e.detail.settings));
          this.set('_settings_have', true);
        };

        this._showExtras(false);
        console.warn('_e_settings', this._settings);
      }

      _e_filter(e) {

        if (e.detail.action === 'cancel') {
          this.set('_filter', null);
          this.set('_filter_have', false);
        } else {
          this.set('_filter', Object.assign({}, e.detail.filter));
          this.set('_filter_have', true);
        };

        this._showExtras(false);
        console.warn('_e_filter', this._filter);
      }

      // --------------- Lifecycle ---------------

      _init() {
        this.dispatch('getAllPG');
        this._showStart();
        this.set('_settings', null);
        this.set('_settings_have', false);
        this.set('_filter', null);
        this.set('_filter_have', false);

        console.warn('_init :: Export-Toolbox');
      }

      constructor() {
        super();
      }

      ready() {
        super.ready();

        Polymer.RenderStatus.afterNextRender(this, function () {
          this._init();
        });
      }
    }

    window.customElements.define(optinomicTemplate.is, optinomicTemplate);
  </script>
</dom-module>




[javascript]


[css]


[calculation honos_ua_calc javascript ch.suedhang.apps.honos.production ch.suedhang.apps.honos.production:honos_calculation]
function main(responses) {
    var definitions = {
        "user_app_id": "org.optinomic.export.toolbox.v2.suedhang",
        "paitent_app_id": "ch.suedhang.apps.honos.production",
        "calculation_id": "honos_calculation"
    };

        var calc = {};


    // ------------------------------------------
    // Extras
    // ------------------------------------------
    calc.formatDateCH = function(date_string) {
      date_string = date_string || null
      if (date_string !== null) {

        // 1952-11-19T00:00:00.000000000000Z
        var year = parseInt(date_string.substring(0, 4));
        var month = parseInt(date_string.substring(5, 7));
        var day = parseInt(date_string.substring(8, 10));
        var date_string_return = day + "." + month + "." + year

        return date_string_return;
      } else {
        return null;
      }
    };

    calc.createPatientExtras = function(patient, filled_date) {

      function getAge(dateString, when) {
        if (when) {
          var today = new Date(when);
        } else {
          var today = new Date();
        };

        var birthDate = new Date(dateString);
        var age = today.getFullYear() - birthDate.getFullYear();
        var m = today.getMonth() - birthDate.getMonth();
        if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
          age--;
        }
        return age;
      }


      // patient.age = $filter('dateToAge')(patient.birthdate);
      // patient.birthday = $filter('date')(patient.birthdate);

      patient.extras = {};
      patient.extras.age = getAge(patient.birthdate);
      patient.extras.age_when_filled = getAge(patient.birthdate, filled_date);

      patient.extras.birthday = calc.formatDateCH(patient.birthdate);
      patient.extras.birthday_age = patient.extras.birthday + ' | ' + patient.extras.age;

      patient.extras.name = patient.last_name + ' ' + patient.first_name;

      if (patient.gender === 'male') {
        patient.extras.ansprache = 'Herr';
        patient.extras.anrede = 'Herr ' + patient.last_name;
      } else {
        patient.extras.ansprache = 'Frau';
        patient.extras.anrede = 'Frau ' + patient.last_name;
      };
      patient.extras.full_name = patient.extras.ansprache + ' ' + patient.extras.name + ' (' + patient.extras.birthday_age + ')';

      patient.extras.full_address = patient.address1 + ', ' + patient.zip_code + ' ' + patient.city;

      var myPhone = '';
      if (patient.phone_home) {
        myPhone = patient.phone_home;
      }
      if (patient.phone_mobile) {
        if (myPhone != '') {
          myPhone = myPhone + ', ' + patient.phone_mobile;
        } else {
          myPhone = patient.phone_mobile;
        }
      }
      patient.extras.phone = myPhone;
      patient.extras.infoline = patient.extras.full_address

      if (myPhone != '') {
        patient.extras.infoline + ' | ' + patient.extras.phone;
      };


      // -----------------------------------
      // Female = Pink | Male = Blue
      // -----------------------------------
      var myColor = "#3F51B5";
      var myColorAccent = "#E91E63";
      if (patient.gender === "female") {
        myColor = "#E91E63";
        myColorAccent = "#3F51B5";
      }
      patient.extras.color_main = myColor;
      patient.extras.color_accent = myColorAccent;

      return patient.extras;
    };

    calc.createStayExtras = function(current_stay) {
      current_stay.extras = {};

      // Calculate - Duration of the stay
      if (current_stay.stop) {
        current_stay.extras.duration = Math.floor((Date.parse(current_stay.stop) - Date.parse(current_stay.start)) / 86400000);
        current_stay.extras.duration = current_stay.extras.duration + 1; //incl. start & stop date
      } else {
        current_stay.extras.duration = Math.floor((new Date() - Date.parse(current_stay.start)) / 86400000);
      };

      // phase - translation
      var phase = current_stay.phase;
      var translated_de = "";
      if (phase === 'before_stay') {
        translated_de = "Bevorstehende Behandlung";
        translated_en = "the stay starts in the future";
      };
      if (phase === 'in_stay') {
        translated_de = "In akuteller Behandlung";
        translated_en = "the patient is currently in stay";
      };
      if (phase === 'after_exit') {
        translated_de = "Die Behandlung wurde vor weniger als 14 Tage beendet";
        translated_en = "the stay ended less than 14 days ago (included)";
      };
      if (phase === 'frozen') {
        translated_de = "Die Behandlung wurde manuell eingefroren";
        translated_en = "the stay has manually been frozen (no more events, changes, ...)";
      };
      if (phase === 'unfrozen') {
        translated_de = "Die Behandlung ist abgeschlossen, wurde jedoch zur Bearbeitung wieder geöffnet";
        translated_en = "the stay is complete but has been unfrozen by somebody";
      };
      if (phase === 'complete') {
        translated_de = "Die Behandlung wurde vor mehr als 14 Tage beendet";
        translated_en = "the stay ended more than 14 days ago";
      };
      current_stay.extras.phase_de = translated_de;
      current_stay.extras.phase_en = translated_en;

      // from_to
      current_stay.extras.beginn = calc.formatDateCH(current_stay.start);
      current_stay.extras.from_to = calc.formatDateCH(current_stay.start);
      current_stay.extras.from_to = current_stay.extras.from_to + ' - ';
      if (current_stay.stop) {
        current_stay.extras.from_to = current_stay.extras.from_to + calc.formatDateCH(current_stay.stop);
        current_stay.extras.ende = calc.formatDateCH(current_stay.stop);
      } else {
        current_stay.extras.from_to = current_stay.extras.from_to + "Unbekannt";
      };

      return current_stay.extras;
    };



    // ------------------------------------------
    // F U N C T I O N S
    // ------------------------------------------
    calc.getCurrentPatients = function(d) {

      calc.definitions = definitions;
      calc.definitions.patient_app_calculation = calc.definitions.paitent_app_id + ":" + calc.definitions.calculation_id;

      var return_obj = {
        "patient_groups": JSON.parse(JSON.stringify(d.patient_groups)),
        "patients": null,
        "definitions": calc.definitions
      };

      if ("patients" in d) {

        var found = false;
        d.patients.forEach(function(r, rID) {
          if (r.identifier === calc.definitions.user_app_id) {
            return_obj.patients = JSON.parse(JSON.stringify(r.patients));
          };
        });

        return return_obj;
      };
    };


    calc.getPatientGroupsMatrix = function(pid) {
      var patient_groups = responses.patient_groups;
      pid = pid || null;

      var return_obj = null;

      if (pid !== null) {

        return_obj = {
          "matrix": {},
          "patient_in_group": {
            "yes": [],
            "no": []
          }
        };
        patient_groups.forEach(function(pg, pgID) {

          var pg_set = {
            "name": pg.entity.data.name,
            "patient_in_group": false
          };

          function inGroup(p) {
            return p.id === pid;
          };

          if (pg.patients.filter(inGroup).length > 0) {
            pg_set.patient_in_group = true;
            return_obj.patient_in_group.yes.push(pg.entity.id);
          } else {
            return_obj.patient_in_group.no.push(pg.entity.id);
          };

          return_obj.matrix[pg.entity.id] = pg_set;

        });
      };

      return return_obj;
    };


    calc.getSurveyResponses = function(all) {


      var return_array = [];
      all.forEach(function(d, dID) {


        if ("foreign_survey_responses" in d) {

          if (calc.definitions.paitent_app_id in d.foreign_survey_responses) {

            var foreign_survey_responses = d.foreign_survey_responses[calc.definitions.paitent_app_id];
            // console.log('foreign_survey_responses', foreign_survey_responses);

            foreign_survey_responses.forEach(function(fsr, fsrID) {


              var data = {
                "all_found": false,
                "survey_response": null,
                "survey_response_id": null,
                "survey_response_found": false,
                "event": null,
                "event_id": null,
                "event_found": false,
                "pum": null,
                "pum_id": null,
                "pum_found": false,
                "stay": null,
                "stay_id": null,
                "stay_found": false,
                "patient": null,
                "patient_id": null,
                "patient_found": false,
                "calculation": null,
                "calculation_id": calc.definitions.calculation_id,
                "calculation_found": false,
                "calculation_found_method": null,
                "patient_groups": {}
              };


              // Survey Response
              data.survey_response_id = fsr.id;
              data.survey_response = fsr.data;
              data.event_id = fsr.data.event_id;

              // Events
              if ("events" in d) {
                d.events.forEach(function(e, eID) {
                  if (e.id === data.event_id) {
                    data.event_found = true;
                    data.event = e.data;
                    data.pum_id = e.data.patient_uses_module_id;
                  };
                });
              };



              // patient_uses_modules
              if ("patient_uses_modules" in d) {
                d.patient_uses_modules.forEach(function(pum, pumID) {
                  if (data.event_found === false) {
                    // If no event is there
                    data.pum_id = pum.id;
                  };


                  if (pum.id === data.pum_id) {
                    data.pum_found = true;
                    data.pum = pum.data;
                    data.stay_id = pum.data.stay_id;
                    data.patient_id = pum.data.patient_id;
                    data.patient_groups = calc.getPatientGroupsMatrix(data.patient_id);
                  };

                });
              };

              // stays
              if ("stays" in d) {
                d.stays.forEach(function(s, sID) {
                  if (s.id === data.stay_id) {
                    data.stay_found = true;
                    data.stay = s.data;
                    data.stay.extras = calc.createStayExtras(data.stay);
                  };
                });
              };

              // patients
              if ("patient" in d) {
                if (d.patient.id === data.patient_id) {
                  data.patient_found = true;
                  data.patient = d.patient.data;
                  data.patient.extras = calc.createPatientExtras(d.patient.data, data.survey_response.filled);
                };
              };


              // Calculations
              if ("other_calculations" in d) {
                if (calc.definitions.patient_app_calculation in d.other_calculations) {

                  var calculation_results = d.other_calculations[calc.definitions.patient_app_calculation];

                  calculation_results.forEach(function(current_calculation, calculationID) {


                    var variant_info = false;
                    if ("info" in current_calculation) {
                      if ("response" in current_calculation.info) {
                        variant_info = true;
                      };
                    };

                    var variant_response = false;
                    if ("response" in current_calculation) {
                      if ("data" in current_calculation.response) {
                        if ("response" in current_calculation.response.data) {
                          variant_response = true;
                        };
                      };
                    };



                    // Check stuff

                    if (variant_info) {
                      var calc_resp = current_calculation.info.response;

                      if (JSON.stringify(calc_resp) === JSON.stringify(data.survey_response.response)) {
                        // console.log('(+) EQUAL: ', calc_resp);

                        data.calculation_found = true;
                        data.calculation_found_method = "variant_info";
                        data.calculation = current_calculation;
                      };
                    };

                    if (variant_response) {
                      var calc_resp = current_calculation.response.data.response;

                      if (JSON.stringify(calc_resp) === JSON.stringify(data.survey_response.response)) {
                        // console.log('(+) EQUAL: ', calc_resp);

                        data.calculation_found = true;
                        data.calculation_found_method = "variant_response";
                        data.calculation = current_calculation;

                      } else {

                        if ("TMTAError" in calc_resp) {
                          // TMT - Special
                          // console.error('DEBUG HERE ::', calc_resp, data.survey_response, current_calculation);

                          if ((parseInt(calc_resp.TMTAError) === parseInt(data.survey_response.response.TMTAError)) &&
                            (parseInt(calc_resp.TMTATime) === parseInt(data.survey_response.response.TMTATime)) &&
                            (parseInt(calc_resp.TMTBError) === parseInt(data.survey_response.response.TMTBError)) &&
                            (parseInt(calc_resp.TMTBTime) === parseInt(data.survey_response.response.TMTBTime)) &&
                            (parseInt(calc_resp.Ausbildungsjahre) === parseInt(data.survey_response.response.Ausbildungsjahre)) &&
                            (parseInt(calc_resp.Messzeitpunkt) === parseInt(data.survey_response.response.Messzeitpunkt))
                          ) {

                            data.calculation_found = true;
                            data.calculation_found_method = "variant_response_tmt";
                            data.calculation = current_calculation;
                          };

                        };

                      };
                    };
                  });


                };
              };


              // All Found
              if (data.calculation_found && data.event_found && data.patient_found && data.stay_found && data.pum_found) {
                data.all_found = true;
              };
              if (data.calculation_found && data.patient_found && data.stay_found) {
                // Save
                return_array.push(data);
              };

              data.survey_response_found = true;

            });



          };
        };


      });



      return return_array;
    };


    // ------------------------------------------
    // F U N C T I O N  -  Main
    // ------------------------------------------
    calc.getResults = function(d) {

      var results = calc.getCurrentPatients(d);
      results.survey_responses = calc.getSurveyResponses(results.patients);

      // var firstAllFound = calc.findFirstAllFound(results.survey_responses);
      // var flatten = calc.flatten(firstAllFound);
      // var fieldsArray = calc.getFieldsArray(flatten);

      var return_obj = {
        "_version": "1.4",
        "definitions": results.definitions,
        "survey_responses": results.survey_responses,
        "patient_groups": null
      };

      return return_obj;
    };


    return calc.getResults(responses);

}


[calculation bscl_ua_calc javascript ch.suedhang.apps.bscl_anq.production ch.suedhang.apps.bscl_anq.production:scores_calculation]
function main(responses) {
    var definitions = {
        "user_app_id": "org.optinomic.export.toolbox.v2.suedhang",
        "paitent_app_id": "ch.suedhang.apps.bscl_anq.production",
        "calculation_id": "scores_calculation"
    };

        var calc = {};


    // ------------------------------------------
    // Extras
    // ------------------------------------------
    calc.formatDateCH = function(date_string) {
      date_string = date_string || null
      if (date_string !== null) {

        // 1952-11-19T00:00:00.000000000000Z
        var year = parseInt(date_string.substring(0, 4));
        var month = parseInt(date_string.substring(5, 7));
        var day = parseInt(date_string.substring(8, 10));
        var date_string_return = day + "." + month + "." + year

        return date_string_return;
      } else {
        return null;
      }
    };

    calc.createPatientExtras = function(patient, filled_date) {

      function getAge(dateString, when) {
        if (when) {
          var today = new Date(when);
        } else {
          var today = new Date();
        };

        var birthDate = new Date(dateString);
        var age = today.getFullYear() - birthDate.getFullYear();
        var m = today.getMonth() - birthDate.getMonth();
        if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
          age--;
        }
        return age;
      }


      // patient.age = $filter('dateToAge')(patient.birthdate);
      // patient.birthday = $filter('date')(patient.birthdate);

      patient.extras = {};
      patient.extras.age = getAge(patient.birthdate);
      patient.extras.age_when_filled = getAge(patient.birthdate, filled_date);

      patient.extras.birthday = calc.formatDateCH(patient.birthdate);
      patient.extras.birthday_age = patient.extras.birthday + ' | ' + patient.extras.age;

      patient.extras.name = patient.last_name + ' ' + patient.first_name;

      if (patient.gender === 'male') {
        patient.extras.ansprache = 'Herr';
        patient.extras.anrede = 'Herr ' + patient.last_name;
      } else {
        patient.extras.ansprache = 'Frau';
        patient.extras.anrede = 'Frau ' + patient.last_name;
      };
      patient.extras.full_name = patient.extras.ansprache + ' ' + patient.extras.name + ' (' + patient.extras.birthday_age + ')';

      patient.extras.full_address = patient.address1 + ', ' + patient.zip_code + ' ' + patient.city;

      var myPhone = '';
      if (patient.phone_home) {
        myPhone = patient.phone_home;
      }
      if (patient.phone_mobile) {
        if (myPhone != '') {
          myPhone = myPhone + ', ' + patient.phone_mobile;
        } else {
          myPhone = patient.phone_mobile;
        }
      }
      patient.extras.phone = myPhone;
      patient.extras.infoline = patient.extras.full_address

      if (myPhone != '') {
        patient.extras.infoline + ' | ' + patient.extras.phone;
      };


      // -----------------------------------
      // Female = Pink | Male = Blue
      // -----------------------------------
      var myColor = "#3F51B5";
      var myColorAccent = "#E91E63";
      if (patient.gender === "female") {
        myColor = "#E91E63";
        myColorAccent = "#3F51B5";
      }
      patient.extras.color_main = myColor;
      patient.extras.color_accent = myColorAccent;

      return patient.extras;
    };

    calc.createStayExtras = function(current_stay) {
      current_stay.extras = {};

      // Calculate - Duration of the stay
      if (current_stay.stop) {
        current_stay.extras.duration = Math.floor((Date.parse(current_stay.stop) - Date.parse(current_stay.start)) / 86400000);
        current_stay.extras.duration = current_stay.extras.duration + 1; //incl. start & stop date
      } else {
        current_stay.extras.duration = Math.floor((new Date() - Date.parse(current_stay.start)) / 86400000);
      };

      // phase - translation
      var phase = current_stay.phase;
      var translated_de = "";
      if (phase === 'before_stay') {
        translated_de = "Bevorstehende Behandlung";
        translated_en = "the stay starts in the future";
      };
      if (phase === 'in_stay') {
        translated_de = "In akuteller Behandlung";
        translated_en = "the patient is currently in stay";
      };
      if (phase === 'after_exit') {
        translated_de = "Die Behandlung wurde vor weniger als 14 Tage beendet";
        translated_en = "the stay ended less than 14 days ago (included)";
      };
      if (phase === 'frozen') {
        translated_de = "Die Behandlung wurde manuell eingefroren";
        translated_en = "the stay has manually been frozen (no more events, changes, ...)";
      };
      if (phase === 'unfrozen') {
        translated_de = "Die Behandlung ist abgeschlossen, wurde jedoch zur Bearbeitung wieder geöffnet";
        translated_en = "the stay is complete but has been unfrozen by somebody";
      };
      if (phase === 'complete') {
        translated_de = "Die Behandlung wurde vor mehr als 14 Tage beendet";
        translated_en = "the stay ended more than 14 days ago";
      };
      current_stay.extras.phase_de = translated_de;
      current_stay.extras.phase_en = translated_en;

      // from_to
      current_stay.extras.beginn = calc.formatDateCH(current_stay.start);
      current_stay.extras.from_to = calc.formatDateCH(current_stay.start);
      current_stay.extras.from_to = current_stay.extras.from_to + ' - ';
      if (current_stay.stop) {
        current_stay.extras.from_to = current_stay.extras.from_to + calc.formatDateCH(current_stay.stop);
        current_stay.extras.ende = calc.formatDateCH(current_stay.stop);
      } else {
        current_stay.extras.from_to = current_stay.extras.from_to + "Unbekannt";
      };

      return current_stay.extras;
    };



    // ------------------------------------------
    // F U N C T I O N S
    // ------------------------------------------
    calc.getCurrentPatients = function(d) {

      calc.definitions = definitions;
      calc.definitions.patient_app_calculation = calc.definitions.paitent_app_id + ":" + calc.definitions.calculation_id;

      var return_obj = {
        "patient_groups": JSON.parse(JSON.stringify(d.patient_groups)),
        "patients": null,
        "definitions": calc.definitions
      };

      if ("patients" in d) {

        var found = false;
        d.patients.forEach(function(r, rID) {
          if (r.identifier === calc.definitions.user_app_id) {
            return_obj.patients = JSON.parse(JSON.stringify(r.patients));
          };
        });

        return return_obj;
      };
    };


    calc.getPatientGroupsMatrix = function(pid) {
      var patient_groups = responses.patient_groups;
      pid = pid || null;

      var return_obj = null;

      if (pid !== null) {

        return_obj = {
          "matrix": {},
          "patient_in_group": {
            "yes": [],
            "no": []
          }
        };
        patient_groups.forEach(function(pg, pgID) {

          var pg_set = {
            "name": pg.entity.data.name,
            "patient_in_group": false
          };

          function inGroup(p) {
            return p.id === pid;
          };

          if (pg.patients.filter(inGroup).length > 0) {
            pg_set.patient_in_group = true;
            return_obj.patient_in_group.yes.push(pg.entity.id);
          } else {
            return_obj.patient_in_group.no.push(pg.entity.id);
          };

          return_obj.matrix[pg.entity.id] = pg_set;

        });
      };

      return return_obj;
    };


    calc.getSurveyResponses = function(all) {


      var return_array = [];
      all.forEach(function(d, dID) {


        if ("foreign_survey_responses" in d) {

          if (calc.definitions.paitent_app_id in d.foreign_survey_responses) {

            var foreign_survey_responses = d.foreign_survey_responses[calc.definitions.paitent_app_id];
            // console.log('foreign_survey_responses', foreign_survey_responses);

            foreign_survey_responses.forEach(function(fsr, fsrID) {


              var data = {
                "all_found": false,
                "survey_response": null,
                "survey_response_id": null,
                "survey_response_found": false,
                "event": null,
                "event_id": null,
                "event_found": false,
                "pum": null,
                "pum_id": null,
                "pum_found": false,
                "stay": null,
                "stay_id": null,
                "stay_found": false,
                "patient": null,
                "patient_id": null,
                "patient_found": false,
                "calculation": null,
                "calculation_id": calc.definitions.calculation_id,
                "calculation_found": false,
                "calculation_found_method": null,
                "patient_groups": {}
              };


              // Survey Response
              data.survey_response_id = fsr.id;
              data.survey_response = fsr.data;
              data.event_id = fsr.data.event_id;

              // Events
              if ("events" in d) {
                d.events.forEach(function(e, eID) {
                  if (e.id === data.event_id) {
                    data.event_found = true;
                    data.event = e.data;
                    data.pum_id = e.data.patient_uses_module_id;
                  };
                });
              };



              // patient_uses_modules
              if ("patient_uses_modules" in d) {
                d.patient_uses_modules.forEach(function(pum, pumID) {
                  if (data.event_found === false) {
                    // If no event is there
                    data.pum_id = pum.id;
                  };


                  if (pum.id === data.pum_id) {
                    data.pum_found = true;
                    data.pum = pum.data;
                    data.stay_id = pum.data.stay_id;
                    data.patient_id = pum.data.patient_id;
                    data.patient_groups = calc.getPatientGroupsMatrix(data.patient_id);
                  };

                });
              };

              // stays
              if ("stays" in d) {
                d.stays.forEach(function(s, sID) {
                  if (s.id === data.stay_id) {
                    data.stay_found = true;
                    data.stay = s.data;
                    data.stay.extras = calc.createStayExtras(data.stay);
                  };
                });
              };

              // patients
              if ("patient" in d) {
                if (d.patient.id === data.patient_id) {
                  data.patient_found = true;
                  data.patient = d.patient.data;
                  data.patient.extras = calc.createPatientExtras(d.patient.data, data.survey_response.filled);
                };
              };


              // Calculations
              if ("other_calculations" in d) {
                if (calc.definitions.patient_app_calculation in d.other_calculations) {

                  var calculation_results = d.other_calculations[calc.definitions.patient_app_calculation];

                  calculation_results.forEach(function(current_calculation, calculationID) {


                    var variant_info = false;
                    if ("info" in current_calculation) {
                      if ("response" in current_calculation.info) {
                        variant_info = true;
                      };
                    };

                    var variant_response = false;
                    if ("response" in current_calculation) {
                      if ("data" in current_calculation.response) {
                        if ("response" in current_calculation.response.data) {
                          variant_response = true;
                        };
                      };
                    };



                    // Check stuff

                    if (variant_info) {
                      var calc_resp = current_calculation.info.response;

                      if (JSON.stringify(calc_resp) === JSON.stringify(data.survey_response.response)) {
                        // console.log('(+) EQUAL: ', calc_resp);

                        data.calculation_found = true;
                        data.calculation_found_method = "variant_info";
                        data.calculation = current_calculation;
                      };
                    };

                    if (variant_response) {
                      var calc_resp = current_calculation.response.data.response;

                      if (JSON.stringify(calc_resp) === JSON.stringify(data.survey_response.response)) {
                        // console.log('(+) EQUAL: ', calc_resp);

                        data.calculation_found = true;
                        data.calculation_found_method = "variant_response";
                        data.calculation = current_calculation;

                      } else {

                        if ("TMTAError" in calc_resp) {
                          // TMT - Special
                          // console.error('DEBUG HERE ::', calc_resp, data.survey_response, current_calculation);

                          if ((parseInt(calc_resp.TMTAError) === parseInt(data.survey_response.response.TMTAError)) &&
                            (parseInt(calc_resp.TMTATime) === parseInt(data.survey_response.response.TMTATime)) &&
                            (parseInt(calc_resp.TMTBError) === parseInt(data.survey_response.response.TMTBError)) &&
                            (parseInt(calc_resp.TMTBTime) === parseInt(data.survey_response.response.TMTBTime)) &&
                            (parseInt(calc_resp.Ausbildungsjahre) === parseInt(data.survey_response.response.Ausbildungsjahre)) &&
                            (parseInt(calc_resp.Messzeitpunkt) === parseInt(data.survey_response.response.Messzeitpunkt))
                          ) {

                            data.calculation_found = true;
                            data.calculation_found_method = "variant_response_tmt";
                            data.calculation = current_calculation;
                          };

                        };

                      };
                    };
                  });


                };
              };


              // All Found
              if (data.calculation_found && data.event_found && data.patient_found && data.stay_found && data.pum_found) {
                data.all_found = true;
              };
              if (data.calculation_found && data.patient_found && data.stay_found) {
                // Save
                return_array.push(data);
              };

              data.survey_response_found = true;

            });



          };
        };


      });



      return return_array;
    };


    // ------------------------------------------
    // F U N C T I O N  -  Main
    // ------------------------------------------
    calc.getResults = function(d) {

      var results = calc.getCurrentPatients(d);
      results.survey_responses = calc.getSurveyResponses(results.patients);

      // var firstAllFound = calc.findFirstAllFound(results.survey_responses);
      // var flatten = calc.flatten(firstAllFound);
      // var fieldsArray = calc.getFieldsArray(flatten);

      var return_obj = {
        "_version": "1.4",
        "definitions": results.definitions,
        "survey_responses": results.survey_responses,
        "patient_groups": null
      };

      return return_obj;
    };


    return calc.getResults(responses);

}





