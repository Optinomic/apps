/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _reactDom = __webpack_require__(/*! react-dom */ 1);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _react = __webpack_require__(/*! react */ 147);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _MyApp = __webpack_require__(/*! ./MyApp.jsx */ 159);
	
	var _MyApp2 = _interopRequireDefault(_MyApp);
	
	__webpack_require__(/*! ag-grid-root/ag-grid.css */ 168);
	
	__webpack_require__(/*! ag-grid-root/theme-fresh.css */ 170);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// waiting for dom to load before booting react. we could alternatively
	// put the index.js reference at the end fo the index.html, but i prefer this way.
	
	// is there a better way of doing this?
	document.addEventListener('DOMContentLoaded', function () {
	    var container = document.getElementById('myAppContainer');
	    _reactDom2.default.render(_react2.default.createElement(_MyApp2.default), container);
	});

/***/ },
/* 1 */
/*!******************************!*\
  !*** ./~/react-dom/index.js ***!
  \******************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(/*! react/lib/ReactDOM */ 2);

/***/ },
/* 2 */
/*!*********************************!*\
  !*** ./~/react/lib/ReactDOM.js ***!
  \*********************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOM
	 */
	
	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/
	
	'use strict';
	
	var ReactCurrentOwner = __webpack_require__(/*! ./ReactCurrentOwner */ 4);
	var ReactDOMTextComponent = __webpack_require__(/*! ./ReactDOMTextComponent */ 5);
	var ReactDefaultInjection = __webpack_require__(/*! ./ReactDefaultInjection */ 70);
	var ReactInstanceHandles = __webpack_require__(/*! ./ReactInstanceHandles */ 44);
	var ReactMount = __webpack_require__(/*! ./ReactMount */ 27);
	var ReactPerf = __webpack_require__(/*! ./ReactPerf */ 17);
	var ReactReconciler = __webpack_require__(/*! ./ReactReconciler */ 49);
	var ReactUpdates = __webpack_require__(/*! ./ReactUpdates */ 53);
	var ReactVersion = __webpack_require__(/*! ./ReactVersion */ 145);
	
	var findDOMNode = __webpack_require__(/*! ./findDOMNode */ 90);
	var renderSubtreeIntoContainer = __webpack_require__(/*! ./renderSubtreeIntoContainer */ 146);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 24);
	
	ReactDefaultInjection.inject();
	
	var render = ReactPerf.measure('React', 'render', ReactMount.render);
	
	var React = {
	  findDOMNode: findDOMNode,
	  render: render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,
	
	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
	};
	
	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	/* eslint-enable camelcase */
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    CurrentOwner: ReactCurrentOwner,
	    InstanceHandles: ReactInstanceHandles,
	    Mount: ReactMount,
	    Reconciler: ReactReconciler,
	    TextComponent: ReactDOMTextComponent
	  });
	}
	
	if (process.env.NODE_ENV !== 'production') {
	  var ExecutionEnvironment = __webpack_require__(/*! fbjs/lib/ExecutionEnvironment */ 8);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {
	
	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        console.debug('Download the React DevTools for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }
	
	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;
	
	    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : undefined;
	
	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim,
	
	    // shams
	    Object.create, Object.freeze];
	
	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        console.error('One or more ES5 shim/shams expected by React are not available: ' + 'https://fb.me/react-warning-polyfills');
	        break;
	      }
	    }
	  }
	}
	
	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 3 */
/*!**********************************************************!*\
  !*** (webpack)/~/node-libs-browser/~/process/browser.js ***!
  \**********************************************************/
/***/ function(module, exports) {

	'use strict';
	
	// shim for using process in browser
	
	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while (len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () {
	    return '/';
	};
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function () {
	    return 0;
	};

/***/ },
/* 4 */
/*!******************************************!*\
  !*** ./~/react/lib/ReactCurrentOwner.js ***!
  \******************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCurrentOwner
	 */
	
	'use strict';
	
	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	
	var ReactCurrentOwner = {
	
	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null
	
	};
	
	module.exports = ReactCurrentOwner;

/***/ },
/* 5 */
/*!**********************************************!*\
  !*** ./~/react/lib/ReactDOMTextComponent.js ***!
  \**********************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextComponent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var DOMChildrenOperations = __webpack_require__(/*! ./DOMChildrenOperations */ 6);
	var DOMPropertyOperations = __webpack_require__(/*! ./DOMPropertyOperations */ 21);
	var ReactComponentBrowserEnvironment = __webpack_require__(/*! ./ReactComponentBrowserEnvironment */ 25);
	var ReactMount = __webpack_require__(/*! ./ReactMount */ 27);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 38);
	var escapeTextContentForBrowser = __webpack_require__(/*! ./escapeTextContentForBrowser */ 20);
	var setTextContent = __webpack_require__(/*! ./setTextContent */ 19);
	var validateDOMNesting = __webpack_require__(/*! ./validateDOMNesting */ 69);
	
	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings in elements so that they can undergo
	 * the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function ReactDOMTextComponent(props) {
	  // This constructor and its argument is currently used by mocks.
	};
	
	assign(ReactDOMTextComponent.prototype, {
	
	  /**
	   * @param {ReactText} text
	   * @internal
	   */
	  construct: function construct(text) {
	    // TODO: This is really a ReactText (ReactNode), not a ReactElement
	    this._currentElement = text;
	    this._stringText = '' + text;
	
	    // Properties
	    this._rootNodeID = null;
	    this._mountIndex = 0;
	  },
	
	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function mountComponent(rootID, transaction, context) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (context[validateDOMNesting.ancestorInfoContextKey]) {
	        validateDOMNesting('span', null, context[validateDOMNesting.ancestorInfoContextKey]);
	      }
	    }
	
	    this._rootNodeID = rootID;
	    if (transaction.useCreateElement) {
	      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
	      var el = ownerDocument.createElement('span');
	      DOMPropertyOperations.setAttributeForID(el, rootID);
	      // Populate node cache
	      ReactMount.getID(el);
	      setTextContent(el, this._stringText);
	      return el;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);
	
	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this in a `span` for the reasons stated above, but
	        // since this is a situation where React won't take over (static pages),
	        // we can simply return the text as it is.
	        return escapedText;
	      }
	
	      return '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' + escapedText + '</span>';
	    }
	  },
	
	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function receiveComponent(nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var node = ReactMount.getNode(this._rootNodeID);
	        DOMChildrenOperations.updateTextContent(node, nextStringText);
	      }
	    }
	  },
	
	  unmountComponent: function unmountComponent() {
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	  }
	
	});
	
	module.exports = ReactDOMTextComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 6 */
/*!**********************************************!*\
  !*** ./~/react/lib/DOMChildrenOperations.js ***!
  \**********************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMChildrenOperations
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var Danger = __webpack_require__(/*! ./Danger */ 7);
	var ReactMultiChildUpdateTypes = __webpack_require__(/*! ./ReactMultiChildUpdateTypes */ 15);
	var ReactPerf = __webpack_require__(/*! ./ReactPerf */ 17);
	
	var setInnerHTML = __webpack_require__(/*! ./setInnerHTML */ 18);
	var setTextContent = __webpack_require__(/*! ./setTextContent */ 19);
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 12);
	
	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	function insertChildAt(parentNode, childNode, index) {
	  // By exploiting arrays returning `undefined` for an undefined index, we can
	  // rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. However, using `undefined` is not allowed by all
	  // browsers so we must replace it with `null`.
	
	  // fix render order error in safari
	  // IE8 will throw error when index out of list size.
	  var beforeChild = index >= parentNode.childNodes.length ? null : parentNode.childNodes.item(index);
	
	  parentNode.insertBefore(childNode, beforeChild);
	}
	
	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {
	
	  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,
	
	  updateTextContent: setTextContent,
	
	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markupList List of markup strings.
	   * @internal
	   */
	  processUpdates: function processUpdates(updates, markupList) {
	    var update;
	    // Mapping from parent IDs to initial child orderings.
	    var initialChildren = null;
	    // List of children that will be moved or removed.
	    var updatedChildren = null;
	
	    for (var i = 0; i < updates.length; i++) {
	      update = updates[i];
	      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
	        var updatedIndex = update.fromIndex;
	        var updatedChild = update.parentNode.childNodes[updatedIndex];
	        var parentID = update.parentID;
	
	        !updatedChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.', updatedIndex, parentID) : invariant(false) : undefined;
	
	        initialChildren = initialChildren || {};
	        initialChildren[parentID] = initialChildren[parentID] || [];
	        initialChildren[parentID][updatedIndex] = updatedChild;
	
	        updatedChildren = updatedChildren || [];
	        updatedChildren.push(updatedChild);
	      }
	    }
	
	    var renderedMarkup;
	    // markupList is either a list of markup or just a list of elements
	    if (markupList.length && typeof markupList[0] === 'string') {
	      renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);
	    } else {
	      renderedMarkup = markupList;
	    }
	
	    // Remove updated children first so that `toIndex` is consistent.
	    if (updatedChildren) {
	      for (var j = 0; j < updatedChildren.length; j++) {
	        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
	      }
	    }
	
	    for (var k = 0; k < updates.length; k++) {
	      update = updates[k];
	      switch (update.type) {
	        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
	          insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);
	          break;
	        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
	          insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);
	          break;
	        case ReactMultiChildUpdateTypes.SET_MARKUP:
	          setInnerHTML(update.parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
	          setTextContent(update.parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.REMOVE_NODE:
	          // Already removed by the for-loop above.
	          break;
	      }
	    }
	  }
	
	};
	
	ReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {
	  updateTextContent: 'updateTextContent'
	});
	
	module.exports = DOMChildrenOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 7 */
/*!*******************************!*\
  !*** ./~/react/lib/Danger.js ***!
  \*******************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Danger
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(/*! fbjs/lib/ExecutionEnvironment */ 8);
	
	var createNodesFromMarkup = __webpack_require__(/*! fbjs/lib/createNodesFromMarkup */ 9);
	var emptyFunction = __webpack_require__(/*! fbjs/lib/emptyFunction */ 14);
	var getMarkupWrap = __webpack_require__(/*! fbjs/lib/getMarkupWrap */ 13);
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 12);
	
	var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
	var RESULT_INDEX_ATTR = 'data-danger-index';
	
	/**
	 * Extracts the `nodeName` from a string of markup.
	 *
	 * NOTE: Extracting the `nodeName` does not require a regular expression match
	 * because we make assumptions about React-generated markup (i.e. there are no
	 * spaces surrounding the opening tag and there is at least one attribute).
	 *
	 * @param {string} markup String of markup.
	 * @return {string} Node name of the supplied markup.
	 * @see http://jsperf.com/extract-nodename
	 */
	function getNodeName(markup) {
	  return markup.substring(1, markup.indexOf(' '));
	}
	
	var Danger = {
	
	  /**
	   * Renders markup into an array of nodes. The markup is expected to render
	   * into a list of root nodes. Also, the length of `resultList` and
	   * `markupList` should be the same.
	   *
	   * @param {array<string>} markupList List of markup strings to render.
	   * @return {array<DOMElement>} List of rendered nodes.
	   * @internal
	   */
	  dangerouslyRenderMarkup: function dangerouslyRenderMarkup(markupList) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString for server rendering.') : invariant(false) : undefined;
	    var nodeName;
	    var markupByNodeName = {};
	    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
	    for (var i = 0; i < markupList.length; i++) {
	      !markupList[i] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(false) : undefined;
	      nodeName = getNodeName(markupList[i]);
	      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
	      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
	      markupByNodeName[nodeName][i] = markupList[i];
	    }
	    var resultList = [];
	    var resultListAssignmentCount = 0;
	    for (nodeName in markupByNodeName) {
	      if (!markupByNodeName.hasOwnProperty(nodeName)) {
	        continue;
	      }
	      var markupListByNodeName = markupByNodeName[nodeName];
	
	      // This for-in loop skips the holes of the sparse array. The order of
	      // iteration should follow the order of assignment, which happens to match
	      // numerical index order, but we don't rely on that.
	      var resultIndex;
	      for (resultIndex in markupListByNodeName) {
	        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
	          var markup = markupListByNodeName[resultIndex];
	
	          // Push the requested markup with an additional RESULT_INDEX_ATTR
	          // attribute.  If the markup does not start with a < character, it
	          // will be discarded below (with an appropriate console.error).
	          markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,
	          // This index will be parsed back out below.
	          '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" ');
	        }
	      }
	
	      // Render each group of markup with similar wrapping `nodeName`.
	      var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction // Do nothing special with <script> tags.
	      );
	
	      for (var j = 0; j < renderNodes.length; ++j) {
	        var renderNode = renderNodes[j];
	        if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {
	
	          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
	          renderNode.removeAttribute(RESULT_INDEX_ATTR);
	
	          !!resultList.hasOwnProperty(resultIndex) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Assigning to an already-occupied result index.') : invariant(false) : undefined;
	
	          resultList[resultIndex] = renderNode;
	
	          // This should match resultList.length and markupList.length when
	          // we're done.
	          resultListAssignmentCount += 1;
	        } else if (process.env.NODE_ENV !== 'production') {
	          console.error('Danger: Discarding unexpected node:', renderNode);
	        }
	      }
	    }
	
	    // Although resultList was populated out of order, it should now be a dense
	    // array.
	    !(resultListAssignmentCount === resultList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Did not assign to every index of resultList.') : invariant(false) : undefined;
	
	    !(resultList.length === markupList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(false) : undefined;
	
	    return resultList;
	  },
	
	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function dangerouslyReplaceNodeWithMarkup(oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;
	    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(false) : undefined;
	    !(oldChild.tagName.toLowerCase() !== 'html') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See ReactDOMServer.renderToString().') : invariant(false) : undefined;
	
	    var newChild;
	    if (typeof markup === 'string') {
	      newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	    } else {
	      newChild = markup;
	    }
	    oldChild.parentNode.replaceChild(newChild, oldChild);
	  }
	
	};
	
	module.exports = Danger;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 8 */
/*!****************************************************!*\
  !*** ./~/react/~/fbjs/lib/ExecutionEnvironment.js ***!
  \****************************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ExecutionEnvironment
	 */
	
	'use strict';
	
	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	
	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {
	
	  canUseDOM: canUseDOM,
	
	  canUseWorkers: typeof Worker !== 'undefined',
	
	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
	
	  canUseViewport: canUseDOM && !!window.screen,
	
	  isInWorker: !canUseDOM // For now, this is true - might change in the future.
	
	};
	
	module.exports = ExecutionEnvironment;

/***/ },
/* 9 */
/*!*****************************************************!*\
  !*** ./~/react/~/fbjs/lib/createNodesFromMarkup.js ***!
  \*****************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createNodesFromMarkup
	 * @typechecks
	 */
	
	/*eslint-disable fb-www/unsafe-html*/
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(/*! ./ExecutionEnvironment */ 8);
	
	var createArrayFromMixed = __webpack_require__(/*! ./createArrayFromMixed */ 10);
	var getMarkupWrap = __webpack_require__(/*! ./getMarkupWrap */ 13);
	var invariant = __webpack_require__(/*! ./invariant */ 12);
	
	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
	
	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;
	
	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}
	
	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : undefined;
	  var nodeName = getNodeName(markup);
	
	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];
	
	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }
	
	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : undefined;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }
	
	  var nodes = createArrayFromMixed(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}
	
	module.exports = createNodesFromMarkup;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 10 */
/*!****************************************************!*\
  !*** ./~/react/~/fbjs/lib/createArrayFromMixed.js ***!
  \****************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createArrayFromMixed
	 * @typechecks
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	var toArray = __webpack_require__(/*! ./toArray */ 11);
	
	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return(
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}
	
	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}
	
	module.exports = createArrayFromMixed;

/***/ },
/* 11 */
/*!***************************************!*\
  !*** ./~/react/~/fbjs/lib/toArray.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule toArray
	 * @typechecks
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	var invariant = __webpack_require__(/*! ./invariant */ 12);
	
	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;
	
	  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
	  // old versions of Safari).
	  !(!Array.isArray(obj) && ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : undefined;
	
	  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : undefined;
	
	  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : undefined;
	
	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }
	
	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}
	
	module.exports = toArray;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 12 */
/*!*****************************************!*\
  !*** ./~/react/~/fbjs/lib/invariant.js ***!
  \*****************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */
	
	'use strict';
	
	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */
	
	function invariant(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }
	
	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }
	
	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}
	
	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 13 */
/*!*********************************************!*\
  !*** ./~/react/~/fbjs/lib/getMarkupWrap.js ***!
  \*********************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getMarkupWrap
	 */
	
	/*eslint-disable fb-www/unsafe-html */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(/*! ./ExecutionEnvironment */ 8);
	
	var invariant = __webpack_require__(/*! ./invariant */ 12);
	
	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
	
	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */
	
	var shouldWrap = {};
	
	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];
	
	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];
	
	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],
	
	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],
	
	  'optgroup': selectWrap,
	  'option': selectWrap,
	
	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,
	
	  'td': trWrap,
	  'th': trWrap
	};
	
	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});
	
	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : undefined;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}
	
	module.exports = getMarkupWrap;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 14 */
/*!*********************************************!*\
  !*** ./~/react/~/fbjs/lib/emptyFunction.js ***!
  \*********************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyFunction
	 */
	
	"use strict";
	
	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}
	
	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	function emptyFunction() {}
	
	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};
	
	module.exports = emptyFunction;

/***/ },
/* 15 */
/*!***************************************************!*\
  !*** ./~/react/lib/ReactMultiChildUpdateTypes.js ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChildUpdateTypes
	 */
	
	'use strict';
	
	var keyMirror = __webpack_require__(/*! fbjs/lib/keyMirror */ 16);
	
	/**
	 * When a component's children are updated, a series of update configuration
	 * objects are created in order to batch and serialize the required changes.
	 *
	 * Enumerates all the possible types of update configurations.
	 *
	 * @internal
	 */
	var ReactMultiChildUpdateTypes = keyMirror({
	  INSERT_MARKUP: null,
	  MOVE_EXISTING: null,
	  REMOVE_NODE: null,
	  SET_MARKUP: null,
	  TEXT_CONTENT: null
	});
	
	module.exports = ReactMultiChildUpdateTypes;

/***/ },
/* 16 */
/*!*****************************************!*\
  !*** ./~/react/~/fbjs/lib/keyMirror.js ***!
  \*****************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyMirror
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(/*! ./invariant */ 12);
	
	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function keyMirror(obj) {
	  var ret = {};
	  var key;
	  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : undefined;
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};
	
	module.exports = keyMirror;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 17 */
/*!**********************************!*\
  !*** ./~/react/lib/ReactPerf.js ***!
  \**********************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPerf
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * ReactPerf is a general AOP system designed to measure performance. This
	 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
	 */
	
	var ReactPerf = {
	  /**
	   * Boolean to enable/disable measurement. Set to false by default to prevent
	   * accidental logging and perf loss.
	   */
	  enableMeasure: false,
	
	  /**
	   * Holds onto the measure function in use. By default, don't measure
	   * anything, but we'll override this if we inject a measure function.
	   */
	  storedMeasure: _noMeasure,
	
	  /**
	   * @param {object} object
	   * @param {string} objectName
	   * @param {object<string>} methodNames
	   */
	  measureMethods: function measureMethods(object, objectName, methodNames) {
	    if (process.env.NODE_ENV !== 'production') {
	      for (var key in methodNames) {
	        if (!methodNames.hasOwnProperty(key)) {
	          continue;
	        }
	        object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);
	      }
	    }
	  },
	
	  /**
	   * Use this to wrap methods you want to measure. Zero overhead in production.
	   *
	   * @param {string} objName
	   * @param {string} fnName
	   * @param {function} func
	   * @return {function}
	   */
	  measure: function measure(objName, fnName, func) {
	    if (process.env.NODE_ENV !== 'production') {
	      var measuredFunc = null;
	      var wrapper = function wrapper() {
	        if (ReactPerf.enableMeasure) {
	          if (!measuredFunc) {
	            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
	          }
	          return measuredFunc.apply(this, arguments);
	        }
	        return func.apply(this, arguments);
	      };
	      wrapper.displayName = objName + '_' + fnName;
	      return wrapper;
	    }
	    return func;
	  },
	
	  injection: {
	    /**
	     * @param {function} measure
	     */
	    injectMeasure: function injectMeasure(measure) {
	      ReactPerf.storedMeasure = measure;
	    }
	  }
	};
	
	/**
	 * Simply passes through the measured function, without measuring it.
	 *
	 * @param {string} objName
	 * @param {string} fnName
	 * @param {function} func
	 * @return {function}
	 */
	function _noMeasure(objName, fnName, func) {
	  return func;
	}
	
	module.exports = ReactPerf;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 18 */
/*!*************************************!*\
  !*** ./~/react/lib/setInnerHTML.js ***!
  \*************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setInnerHTML
	 */
	
	/* globals MSApp */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(/*! fbjs/lib/ExecutionEnvironment */ 8);
	
	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;
	
	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = function setInnerHTML(node, html) {
	  node.innerHTML = html;
	};
	
	// Win8 apps: Allow all html to be inserted
	if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	  setInnerHTML = function setInnerHTML(node, html) {
	    MSApp.execUnsafeLocalFunction(function () {
	      node.innerHTML = html;
	    });
	  };
	}
	
	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html
	
	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function setInnerHTML(node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }
	
	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xFEFF) + html;
	
	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	}
	
	module.exports = setInnerHTML;

/***/ },
/* 19 */
/*!***************************************!*\
  !*** ./~/react/lib/setTextContent.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setTextContent
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(/*! fbjs/lib/ExecutionEnvironment */ 8);
	var escapeTextContentForBrowser = __webpack_require__(/*! ./escapeTextContentForBrowser */ 20);
	var setInnerHTML = __webpack_require__(/*! ./setInnerHTML */ 18);
	
	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function setTextContent(node, text) {
	  node.textContent = text;
	};
	
	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function setTextContent(node, text) {
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}
	
	module.exports = setTextContent;

/***/ },
/* 20 */
/*!****************************************************!*\
  !*** ./~/react/lib/escapeTextContentForBrowser.js ***!
  \****************************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule escapeTextContentForBrowser
	 */
	
	'use strict';
	
	var ESCAPE_LOOKUP = {
	  '&': '&amp;',
	  '>': '&gt;',
	  '<': '&lt;',
	  '"': '&quot;',
	  '\'': '&#x27;'
	};
	
	var ESCAPE_REGEX = /[&><"']/g;
	
	function escaper(match) {
	  return ESCAPE_LOOKUP[match];
	}
	
	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  return ('' + text).replace(ESCAPE_REGEX, escaper);
	}
	
	module.exports = escapeTextContentForBrowser;

/***/ },
/* 21 */
/*!**********************************************!*\
  !*** ./~/react/lib/DOMPropertyOperations.js ***!
  \**********************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMPropertyOperations
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(/*! ./DOMProperty */ 22);
	var ReactPerf = __webpack_require__(/*! ./ReactPerf */ 17);
	
	var quoteAttributeValueForBrowser = __webpack_require__(/*! ./quoteAttributeValueForBrowser */ 23);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 24);
	
	// Simplified subset
	var VALID_ATTRIBUTE_NAME_REGEX = /^[a-zA-Z_][\w\.\-]*$/;
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};
	
	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : undefined;
	  return false;
	}
	
	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}
	
	if (process.env.NODE_ENV !== 'production') {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true
	  };
	  var warnedProperties = {};
	
	  var warnUnknownProperty = function warnUnknownProperty(name) {
	    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return;
	    }
	
	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();
	
	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;
	
	    // For now, only warn when we have a suggested correction. This prevents
	    // logging too much when using transferPropsTo.
	    process.env.NODE_ENV !== 'production' ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?', name, standardName) : undefined;
	  };
	}
	
	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {
	
	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function createMarkupForID(id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },
	
	  setAttributeForID: function setAttributeForID(node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },
	
	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function createMarkupForProperty(name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	    return null;
	  },
	
	  /**
	   * Creates markup for a custom property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {string} Markup string, or empty string if the property was invalid.
	   */
	  createMarkupForCustomAttribute: function createMarkupForCustomAttribute(name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },
	
	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function setValueForProperty(node, name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	      } else if (propertyInfo.mustUseAttribute) {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      } else {
	        var propName = propertyInfo.propertyName;
	        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
	        // property type before comparing; only `value` does and is string.
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== '' + value) {
	          // Contrary to `setAttribute`, object properties are properly
	          // `toString`ed by IE8/9.
	          node[propName] = value;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	  },
	
	  setValueForAttribute: function setValueForAttribute(node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }
	  },
	
	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function deleteValueForProperty(node, name) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseAttribute) {
	        node.removeAttribute(propertyInfo.attributeName);
	      } else {
	        var propName = propertyInfo.propertyName;
	        var defaultValue = DOMProperty.getDefaultValueForProperty(node.nodeName, propName);
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== defaultValue) {
	          node[propName] = defaultValue;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	  }
	
	};
	
	ReactPerf.measureMethods(DOMPropertyOperations, 'DOMPropertyOperations', {
	  setValueForProperty: 'setValueForProperty',
	  setValueForAttribute: 'setValueForAttribute',
	  deleteValueForProperty: 'deleteValueForProperty'
	});
	
	module.exports = DOMPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 22 */
/*!************************************!*\
  !*** ./~/react/lib/DOMProperty.js ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMProperty
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 12);
	
	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}
	
	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_ATTRIBUTE: 0x1,
	  MUST_USE_PROPERTY: 0x2,
	  HAS_SIDE_EFFECTS: 0x4,
	  HAS_BOOLEAN_VALUE: 0x8,
	  HAS_NUMERIC_VALUE: 0x10,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,
	
	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function injectDOMPropertyConfig(domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};
	
	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }
	
	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' + '\'%s\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : undefined;
	
	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];
	
	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,
	
	        mustUseAttribute: checkMask(propConfig, Injection.MUST_USE_ATTRIBUTE),
	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };
	
	      !(!propertyInfo.mustUseAttribute || !propertyInfo.mustUseProperty) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Cannot require using both attribute and property: %s', propName) : invariant(false) : undefined;
	      !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : undefined;
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : undefined;
	
	      if (process.env.NODE_ENV !== 'production') {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }
	
	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (process.env.NODE_ENV !== 'production') {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }
	
	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }
	
	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }
	
	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }
	
	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};
	var defaultValueCache = {};
	
	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {
	
	  ID_ATTRIBUTE_NAME: 'data-reactid',
	
	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseAttribute:
	   *   Whether the property must be accessed and mutated using `*Attribute()`.
	   *   (This includes anything that fails `<propName> in <element>`.)
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasSideEffects:
	   *   Whether or not setting a value causes side effects such as triggering
	   *   resources to be loaded or text selection changes. If true, we read from
	   *   the DOM before updating to ensure that the value is only set if it has
	   *   changed.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},
	
	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   * @type {Object}
	   */
	  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,
	
	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],
	
	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function isCustomAttribute(attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },
	
	  /**
	   * Returns the default property value for a DOM property (i.e., not an
	   * attribute). Most default values are '' or false, but not all. Worse yet,
	   * some (in particular, `type`) vary depending on the type of element.
	   *
	   * TODO: Is it better to grab all the possible properties when creating an
	   * element to avoid having to create the same element twice?
	   */
	  getDefaultValueForProperty: function getDefaultValueForProperty(nodeName, prop) {
	    var nodeDefaults = defaultValueCache[nodeName];
	    var testElement;
	    if (!nodeDefaults) {
	      defaultValueCache[nodeName] = nodeDefaults = {};
	    }
	    if (!(prop in nodeDefaults)) {
	      testElement = document.createElement(nodeName);
	      nodeDefaults[prop] = testElement[prop];
	    }
	    return nodeDefaults[prop];
	  },
	
	  injection: DOMPropertyInjection
	};
	
	module.exports = DOMProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 23 */
/*!******************************************************!*\
  !*** ./~/react/lib/quoteAttributeValueForBrowser.js ***!
  \******************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule quoteAttributeValueForBrowser
	 */
	
	'use strict';
	
	var escapeTextContentForBrowser = __webpack_require__(/*! ./escapeTextContentForBrowser */ 20);
	
	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}
	
	module.exports = quoteAttributeValueForBrowser;

/***/ },
/* 24 */
/*!***************************************!*\
  !*** ./~/react/~/fbjs/lib/warning.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule warning
	 */
	
	'use strict';
	
	var emptyFunction = __webpack_require__(/*! ./emptyFunction */ 14);
	
	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */
	
	var warning = emptyFunction;
	
	if (process.env.NODE_ENV !== 'production') {
	  warning = function warning(condition, format) {
	    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }
	
	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }
	
	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }
	
	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    }
	  };
	}
	
	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 25 */
/*!*********************************************************!*\
  !*** ./~/react/lib/ReactComponentBrowserEnvironment.js ***!
  \*********************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentBrowserEnvironment
	 */
	
	'use strict';
	
	var ReactDOMIDOperations = __webpack_require__(/*! ./ReactDOMIDOperations */ 26);
	var ReactMount = __webpack_require__(/*! ./ReactMount */ 27);
	
	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {
	
	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,
	
	  replaceNodeWithMarkupByID: ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,
	
	  /**
	   * If a particular environment requires that some resources be cleaned up,
	   * specify this in the injected Mixin. In the DOM, we would likely want to
	   * purge any cached node ID lookups.
	   *
	   * @private
	   */
	  unmountIDFromEnvironment: function unmountIDFromEnvironment(rootNodeID) {
	    ReactMount.purgeID(rootNodeID);
	  }
	
	};
	
	module.exports = ReactComponentBrowserEnvironment;

/***/ },
/* 26 */
/*!*********************************************!*\
  !*** ./~/react/lib/ReactDOMIDOperations.js ***!
  \*********************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIDOperations
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var DOMChildrenOperations = __webpack_require__(/*! ./DOMChildrenOperations */ 6);
	var DOMPropertyOperations = __webpack_require__(/*! ./DOMPropertyOperations */ 21);
	var ReactMount = __webpack_require__(/*! ./ReactMount */ 27);
	var ReactPerf = __webpack_require__(/*! ./ReactPerf */ 17);
	
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 12);
	
	/**
	 * Errors for properties that should not be updated with `updatePropertyByID()`.
	 *
	 * @type {object}
	 * @private
	 */
	var INVALID_PROPERTY_ERRORS = {
	  dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
	  style: '`style` must be set using `updateStylesByID()`.'
	};
	
	/**
	 * Operations used to process updates to DOM nodes.
	 */
	var ReactDOMIDOperations = {
	
	  /**
	   * Updates a DOM node with new property values. This should only be used to
	   * update DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A valid property name, see `DOMProperty`.
	   * @param {*} value New value of the property.
	   * @internal
	   */
	  updatePropertyByID: function updatePropertyByID(id, name, value) {
	    var node = ReactMount.getNode(id);
	    !!INVALID_PROPERTY_ERRORS.hasOwnProperty(name) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(false) : undefined;
	
	    // If we're updating to null or undefined, we should remove the property
	    // from the DOM node instead of inadvertantly setting to a string. This
	    // brings us in line with the same behavior we have on initial render.
	    if (value != null) {
	      DOMPropertyOperations.setValueForProperty(node, name, value);
	    } else {
	      DOMPropertyOperations.deleteValueForProperty(node, name);
	    }
	  },
	
	  /**
	   * Replaces a DOM node that exists in the document with markup.
	   *
	   * @param {string} id ID of child to be replaced.
	   * @param {string} markup Dangerous markup to inject in place of child.
	   * @internal
	   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
	   */
	  dangerouslyReplaceNodeWithMarkupByID: function dangerouslyReplaceNodeWithMarkupByID(id, markup) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
	  },
	
	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markup List of markup strings.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function dangerouslyProcessChildrenUpdates(updates, markup) {
	    for (var i = 0; i < updates.length; i++) {
	      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
	    }
	    DOMChildrenOperations.processUpdates(updates, markup);
	  }
	};
	
	ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
	  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
	  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
	});
	
	module.exports = ReactDOMIDOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 27 */
/*!***********************************!*\
  !*** ./~/react/lib/ReactMount.js ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMount
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(/*! ./DOMProperty */ 22);
	var ReactBrowserEventEmitter = __webpack_require__(/*! ./ReactBrowserEventEmitter */ 28);
	var ReactCurrentOwner = __webpack_require__(/*! ./ReactCurrentOwner */ 4);
	var ReactDOMFeatureFlags = __webpack_require__(/*! ./ReactDOMFeatureFlags */ 40);
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 41);
	var ReactEmptyComponentRegistry = __webpack_require__(/*! ./ReactEmptyComponentRegistry */ 43);
	var ReactInstanceHandles = __webpack_require__(/*! ./ReactInstanceHandles */ 44);
	var ReactInstanceMap = __webpack_require__(/*! ./ReactInstanceMap */ 46);
	var ReactMarkupChecksum = __webpack_require__(/*! ./ReactMarkupChecksum */ 47);
	var ReactPerf = __webpack_require__(/*! ./ReactPerf */ 17);
	var ReactReconciler = __webpack_require__(/*! ./ReactReconciler */ 49);
	var ReactUpdateQueue = __webpack_require__(/*! ./ReactUpdateQueue */ 52);
	var ReactUpdates = __webpack_require__(/*! ./ReactUpdates */ 53);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 38);
	var emptyObject = __webpack_require__(/*! fbjs/lib/emptyObject */ 57);
	var containsNode = __webpack_require__(/*! fbjs/lib/containsNode */ 58);
	var instantiateReactComponent = __webpack_require__(/*! ./instantiateReactComponent */ 61);
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 12);
	var setInnerHTML = __webpack_require__(/*! ./setInnerHTML */ 18);
	var shouldUpdateReactComponent = __webpack_require__(/*! ./shouldUpdateReactComponent */ 66);
	var validateDOMNesting = __webpack_require__(/*! ./validateDOMNesting */ 69);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 24);
	
	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var nodeCache = {};
	
	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;
	
	var ownerDocumentContextKey = '__ReactMount_ownerDocument$' + Math.random().toString(36).slice(2);
	
	/** Mapping from reactRootID to React component instance. */
	var instancesByReactRootID = {};
	
	/** Mapping from reactRootID to `container` nodes. */
	var containersByReactRootID = {};
	
	if (process.env.NODE_ENV !== 'production') {
	  /** __DEV__-only mapping from reactRootID to root elements. */
	  var rootElementsByReactRootID = {};
	}
	
	// Used to store breadth-first search state in findComponentRoot.
	var findComponentRootReusableArray = [];
	
	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}
	
	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }
	
	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}
	
	/**
	 * @param {DOMElement} container DOM element that may contain a React component.
	 * @return {?string} A "reactRoot" ID, if a React component is rendered.
	 */
	function getReactRootID(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return rootElement && ReactMount.getID(rootElement);
	}
	
	/**
	 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
	 * element can return its control whose name or ID equals ATTR_NAME. All
	 * DOM nodes support `getAttributeNode` but this can also get called on
	 * other objects so just return '' if we're given something other than a
	 * DOM node (such as window).
	 *
	 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
	 * @return {string} ID of the supplied `domNode`.
	 */
	function getID(node) {
	  var id = internalGetID(node);
	  if (id) {
	    if (nodeCache.hasOwnProperty(id)) {
	      var cached = nodeCache[id];
	      if (cached !== node) {
	        !!isValid(cached, id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Two valid but unequal nodes with the same `%s`: %s', ATTR_NAME, id) : invariant(false) : undefined;
	
	        nodeCache[id] = node;
	      }
	    } else {
	      nodeCache[id] = node;
	    }
	  }
	
	  return id;
	}
	
	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}
	
	/**
	 * Sets the React-specific ID of the given node.
	 *
	 * @param {DOMElement} node The DOM node whose ID will be set.
	 * @param {string} id The value of the ID attribute.
	 */
	function setID(node, id) {
	  var oldID = internalGetID(node);
	  if (oldID !== id) {
	    delete nodeCache[oldID];
	  }
	  node.setAttribute(ATTR_NAME, id);
	  nodeCache[id] = node;
	}
	
	/**
	 * Finds the node with the supplied React-generated DOM ID.
	 *
	 * @param {string} id A React-generated DOM ID.
	 * @return {DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNode(id) {
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}
	
	/**
	 * Finds the node with the supplied public React instance.
	 *
	 * @param {*} instance A public React instance.
	 * @return {?DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNodeFromInstance(instance) {
	  var id = ReactInstanceMap.get(instance)._rootNodeID;
	  if (ReactEmptyComponentRegistry.isNullComponentID(id)) {
	    return null;
	  }
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}
	
	/**
	 * A node is "valid" if it is contained by a currently mounted container.
	 *
	 * This means that the node does not have to be contained by a document in
	 * order to be considered valid.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @param {string} id The expected ID of the node.
	 * @return {boolean} Whether the node is contained by a mounted container.
	 */
	function isValid(node, id) {
	  if (node) {
	    !(internalGetID(node) === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Unexpected modification of `%s`', ATTR_NAME) : invariant(false) : undefined;
	
	    var container = ReactMount.findReactContainerForID(id);
	    if (container && containsNode(container, node)) {
	      return true;
	    }
	  }
	
	  return false;
	}
	
	/**
	 * Causes the cache to forget about one React-specific ID.
	 *
	 * @param {string} id The ID to forget.
	 */
	function purgeID(id) {
	  delete nodeCache[id];
	}
	
	var deepestNodeSoFar = null;
	function findDeepestCachedAncestorImpl(ancestorID) {
	  var ancestor = nodeCache[ancestorID];
	  if (ancestor && isValid(ancestor, ancestorID)) {
	    deepestNodeSoFar = ancestor;
	  } else {
	    // This node isn't populated in the cache, so presumably none of its
	    // descendants are. Break out of the loop.
	    return false;
	  }
	}
	
	/**
	 * Return the deepest cached node whose ID is a prefix of `targetID`.
	 */
	function findDeepestCachedAncestor(targetID) {
	  deepestNodeSoFar = null;
	  ReactInstanceHandles.traverseAncestors(targetID, findDeepestCachedAncestorImpl);
	
	  var foundNode = deepestNodeSoFar;
	  deepestNodeSoFar = null;
	  return foundNode;
	}
	
	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(componentInstance, rootID, container, transaction, shouldReuseMarkup, context) {
	  if (ReactDOMFeatureFlags.useCreateElement) {
	    context = assign({}, context);
	    if (container.nodeType === DOC_NODE_TYPE) {
	      context[ownerDocumentContextKey] = container;
	    } else {
	      context[ownerDocumentContextKey] = container.ownerDocument;
	    }
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    if (context === emptyObject) {
	      context = {};
	    }
	    var tag = container.nodeName.toLowerCase();
	    context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(null, tag, null);
	  }
	  var markup = ReactReconciler.mountComponent(componentInstance, rootID, transaction, context);
	  componentInstance._renderedComponent._topLevelWrapper = componentInstance;
	  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup, transaction);
	}
	
	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, rootID, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* forceHTML */shouldReuseMarkup);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, rootID, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}
	
	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container) {
	  ReactReconciler.unmountComponent(instance);
	
	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }
	
	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}
	
	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(node) {
	  var reactRootID = getReactRootID(node);
	  return reactRootID ? reactRootID !== ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID) : false;
	}
	
	/**
	 * Returns the first (deepest) ancestor of a node which is rendered by this copy
	 * of React.
	 */
	function findFirstReactDOMImpl(node) {
	  // This node might be from another React instance, so we make sure not to
	  // examine the node cache here
	  for (; node && node.parentNode !== node; node = node.parentNode) {
	    if (node.nodeType !== 1) {
	      // Not a DOMElement, therefore not a React component
	      continue;
	    }
	    var nodeID = internalGetID(node);
	    if (!nodeID) {
	      continue;
	    }
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
	
	    // If containersByReactRootID contains the container we find by crawling up
	    // the tree, we know that this instance of React rendered the node.
	    // nb. isValid's strategy (with containsNode) does not work because render
	    // trees may be nested and we don't want a false positive in that case.
	    var current = node;
	    var lastID;
	    do {
	      lastID = internalGetID(current);
	      current = current.parentNode;
	      if (current == null) {
	        // The passed-in node has been detached from the container it was
	        // originally rendered into.
	        return null;
	      }
	    } while (lastID !== reactRootID);
	
	    if (current === containersByReactRootID[reactRootID]) {
	      return node;
	    }
	  }
	  return null;
	}
	
	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var TopLevelWrapper = function TopLevelWrapper() {};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (process.env.NODE_ENV !== 'production') {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  // this.props is actually a ReactElement
	  return this.props;
	};
	
	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {
	
	  TopLevelWrapper: TopLevelWrapper,
	
	  /** Exposed for debugging purposes **/
	  _instancesByReactRootID: instancesByReactRootID,
	
	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function scrollMonitor(container, renderCallback) {
	    renderCallback();
	  },
	
	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function _updateRootComponent(prevComponent, nextElement, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });
	
	    if (process.env.NODE_ENV !== 'production') {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[getReactRootID(container)] = getReactRootElementInContainer(container);
	    }
	
	    return prevComponent;
	  },
	
	  /**
	   * Register a component into the instance map and starts scroll value
	   * monitoring
	   * @param {ReactComponent} nextComponent component instance to render
	   * @param {DOMElement} container container to render into
	   * @return {string} reactRoot ID prefix
	   */
	  _registerComponent: function _registerComponent(nextComponent, container) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : invariant(false) : undefined;
	
	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
	
	    var reactRootID = ReactMount.registerContainer(container);
	    instancesByReactRootID[reactRootID] = nextComponent;
	    return reactRootID;
	  },
	
	  /**
	   * Render a new component into the DOM.
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function _renderNewRootComponent(nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;
	
	    var componentInstance = instantiateReactComponent(nextElement, null);
	    var reactRootID = ReactMount._registerComponent(componentInstance, container);
	
	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.
	
	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, reactRootID, container, shouldReuseMarkup, context);
	
	    if (process.env.NODE_ENV !== 'production') {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[reactRootID] = getReactRootElementInContainer(container);
	    }
	
	    return componentInstance;
	  },
	
	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function renderSubtreeIntoContainer(parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && parentComponent._reactInternalInstance != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : invariant(false) : undefined;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },
	
	  _renderSubtreeIntoContainer: function _renderSubtreeIntoContainer(parentComponent, nextElement, container, callback) {
	    !ReactElement.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing an element string, make sure to instantiate ' + 'it by passing it to React.createElement.' : typeof nextElement === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' :
	    // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : invariant(false) : undefined;
	
	    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : undefined;
	
	    var nextWrappedElement = new ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);
	
	    var prevComponent = instancesByReactRootID[getReactRootID(container)];
	
	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }
	
	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);
	
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : undefined;
	
	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : undefined;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }
	
	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, parentComponent != null ? parentComponent._reactInternalInstance._processChildContext(parentComponent._reactInternalInstance._context) : emptyObject)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },
	
	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function render(nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },
	
	  /**
	   * Registers a container node into which React components will be rendered.
	   * This also creates the "reactRoot" ID that will be assigned to the element
	   * rendered within.
	   *
	   * @param {DOMElement} container DOM element to register as a container.
	   * @return {string} The "reactRoot" ID of elements rendered within.
	   */
	  registerContainer: function registerContainer(container) {
	    var reactRootID = getReactRootID(container);
	    if (reactRootID) {
	      // If one exists, make sure it is a valid "reactRoot" ID.
	      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
	    }
	    if (!reactRootID) {
	      // No valid "reactRoot" ID found, create one.
	      reactRootID = ReactInstanceHandles.createReactRootID();
	    }
	    containersByReactRootID[reactRootID] = container;
	    return reactRootID;
	  },
	
	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function unmountComponentAtNode(container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;
	
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : invariant(false) : undefined;
	
	    var reactRootID = getReactRootID(container);
	    var component = instancesByReactRootID[reactRootID];
	    if (!component) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);
	
	      // Check if the container itself is a React root node.
	      var containerID = internalGetID(container);
	      var isContainerReactRoot = containerID && containerID === ReactInstanceHandles.getReactRootIDFromNodeID(containerID);
	
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : undefined;
	      }
	
	      return false;
	    }
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, component, container);
	    delete instancesByReactRootID[reactRootID];
	    delete containersByReactRootID[reactRootID];
	    if (process.env.NODE_ENV !== 'production') {
	      delete rootElementsByReactRootID[reactRootID];
	    }
	    return true;
	  },
	
	  /**
	   * Finds the container DOM element that contains React component to which the
	   * supplied DOM `id` belongs.
	   *
	   * @param {string} id The ID of an element rendered by a React component.
	   * @return {?DOMElement} DOM element that contains the `id`.
	   */
	  findReactContainerForID: function findReactContainerForID(id) {
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
	    var container = containersByReactRootID[reactRootID];
	
	    if (process.env.NODE_ENV !== 'production') {
	      var rootElement = rootElementsByReactRootID[reactRootID];
	      if (rootElement && rootElement.parentNode !== container) {
	        process.env.NODE_ENV !== 'production' ? warning(
	        // Call internalGetID here because getID calls isValid which calls
	        // findReactContainerForID (this function).
	        internalGetID(rootElement) === reactRootID, 'ReactMount: Root element ID differed from reactRootID.') : undefined;
	        var containerChild = container.firstChild;
	        if (containerChild && reactRootID === internalGetID(containerChild)) {
	          // If the container has a new child with the same ID as the old
	          // root element, then rootElementsByReactRootID[reactRootID] is
	          // just stale and needs to be updated. The case that deserves a
	          // warning is when the container is empty.
	          rootElementsByReactRootID[reactRootID] = containerChild;
	        } else {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'ReactMount: Root element has been removed from its original ' + 'container. New container: %s', rootElement.parentNode) : undefined;
	        }
	      }
	    }
	
	    return container;
	  },
	
	  /**
	   * Finds an element rendered by React with the supplied ID.
	   *
	   * @param {string} id ID of a DOM node in the React component.
	   * @return {DOMElement} Root DOM node of the React component.
	   */
	  findReactNodeByID: function findReactNodeByID(id) {
	    var reactRoot = ReactMount.findReactContainerForID(id);
	    return ReactMount.findComponentRoot(reactRoot, id);
	  },
	
	  /**
	   * Traverses up the ancestors of the supplied node to find a node that is a
	   * DOM representation of a React component rendered by this copy of React.
	   *
	   * @param {*} node
	   * @return {?DOMEventTarget}
	   * @internal
	   */
	  getFirstReactDOM: function getFirstReactDOM(node) {
	    return findFirstReactDOMImpl(node);
	  },
	
	  /**
	   * Finds a node with the supplied `targetID` inside of the supplied
	   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
	   * quickly.
	   *
	   * @param {DOMEventTarget} ancestorNode Search from this root.
	   * @pararm {string} targetID ID of the DOM representation of the component.
	   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
	   * @internal
	   */
	  findComponentRoot: function findComponentRoot(ancestorNode, targetID) {
	    var firstChildren = findComponentRootReusableArray;
	    var childIndex = 0;
	
	    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;
	
	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw on the next line; give an early warning
	      process.env.NODE_ENV !== 'production' ? warning(deepestAncestor != null, 'React can\'t find the root component node for data-reactid value ' + '`%s`. If you\'re seeing this message, it probably means that ' + 'you\'ve loaded two copies of React on the page. At this time, only ' + 'a single copy of React can be loaded at a time.', targetID) : undefined;
	    }
	
	    firstChildren[0] = deepestAncestor.firstChild;
	    firstChildren.length = 1;
	
	    while (childIndex < firstChildren.length) {
	      var child = firstChildren[childIndex++];
	      var targetChild;
	
	      while (child) {
	        var childID = ReactMount.getID(child);
	        if (childID) {
	          // Even if we find the node we're looking for, we finish looping
	          // through its siblings to ensure they're cached so that we don't have
	          // to revisit this node again. Otherwise, we make n^2 calls to getID
	          // when visiting the many children of a single node in order.
	
	          if (targetID === childID) {
	            targetChild = child;
	          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
	            // If we find a child whose ID is an ancestor of the given ID,
	            // then we can be sure that we only want to search the subtree
	            // rooted at this child, so we can throw out the rest of the
	            // search state.
	            firstChildren.length = childIndex = 0;
	            firstChildren.push(child.firstChild);
	          }
	        } else {
	          // If this child had no ID, then there's a chance that it was
	          // injected automatically by the browser, as when a `<table>`
	          // element sprouts an extra `<tbody>` child as a side effect of
	          // `.innerHTML` parsing. Optimistically continue down this
	          // branch, but not before examining the other siblings.
	          firstChildren.push(child.firstChild);
	        }
	
	        child = child.nextSibling;
	      }
	
	      if (targetChild) {
	        // Emptying firstChildren/findComponentRootReusableArray is
	        // not necessary for correctness, but it helps the GC reclaim
	        // any nodes that were left at the end of the search.
	        firstChildren.length = 0;
	
	        return targetChild;
	      }
	    }
	
	    firstChildren.length = 0;
	
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findComponentRoot(..., %s): Unable to find element. This probably ' + 'means the DOM was unexpectedly mutated (e.g., by the browser), ' + 'usually due to forgetting a <tbody> when using tables, nesting tags ' + 'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' + 'parent. ' + 'Try inspecting the child nodes of the element with React ID `%s`.', targetID, ReactMount.getID(ancestorNode)) : invariant(false) : undefined;
	  },
	
	  _mountImageIntoNode: function _mountImageIntoNode(markup, container, shouldReuseMarkup, transaction) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : invariant(false) : undefined;
	
	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	
	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);
	
	        var normalizedMarkup = markup;
	        if (process.env.NODE_ENV !== 'production') {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }
	
	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);
	
	        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using ' + 'server rendering but the checksum was invalid. This usually ' + 'means you rendered a different component type or props on ' + 'the client from the one on the server, or your render() ' + 'methods are impure. React cannot handle this case due to ' + 'cross-browser quirks by rendering at the document root. You ' + 'should look for environment dependent code in your components ' + 'and ensure the props are the same client and server side:\n%s', difference) : invariant(false) : undefined;
	
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : undefined;
	        }
	      }
	    }
	
	    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but ' + 'you didn\'t use server rendering. We can\'t do this ' + 'without using server rendering due to cross-browser quirks. ' + 'See ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;
	
	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      container.appendChild(markup);
	    } else {
	      setInnerHTML(container, markup);
	    }
	  },
	
	  ownerDocumentContextKey: ownerDocumentContextKey,
	
	  /**
	   * React ID utilities.
	   */
	
	  getReactRootID: getReactRootID,
	
	  getID: getID,
	
	  setID: setID,
	
	  getNode: getNode,
	
	  getNodeFromInstance: getNodeFromInstance,
	
	  isValid: isValid,
	
	  purgeID: purgeID
	};
	
	ReactPerf.measureMethods(ReactMount, 'ReactMount', {
	  _renderNewRootComponent: '_renderNewRootComponent',
	  _mountImageIntoNode: '_mountImageIntoNode'
	});
	
	module.exports = ReactMount;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 28 */
/*!*************************************************!*\
  !*** ./~/react/lib/ReactBrowserEventEmitter.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserEventEmitter
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(/*! ./EventConstants */ 29);
	var EventPluginHub = __webpack_require__(/*! ./EventPluginHub */ 30);
	var EventPluginRegistry = __webpack_require__(/*! ./EventPluginRegistry */ 31);
	var ReactEventEmitterMixin = __webpack_require__(/*! ./ReactEventEmitterMixin */ 36);
	var ReactPerf = __webpack_require__(/*! ./ReactPerf */ 17);
	var ViewportMetrics = __webpack_require__(/*! ./ViewportMetrics */ 37);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 38);
	var isEventSupported = __webpack_require__(/*! ./isEventSupported */ 39);
	
	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */
	
	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;
	
	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};
	
	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);
	
	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}
	
	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {
	
	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,
	
	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function injectReactEventListener(ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },
	
	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function setEnabled(enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },
	
	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function isEnabled() {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },
	
	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function listenTo(registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];
	
	    var topLevelTypes = EventConstants.topLevelTypes;
	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === topLevelTypes.topWheel) {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === topLevelTypes.topScroll) {
	
	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {
	
	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);
	          }
	
	          // to make sure blur and focus event listeners are only attached once
	          isListening[topLevelTypes.topBlur] = true;
	          isListening[topLevelTypes.topFocus] = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }
	
	        isListening[dependency] = true;
	      }
	    }
	  },
	
	  trapBubbledEvent: function trapBubbledEvent(topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },
	
	  trapCapturedEvent: function trapCapturedEvent(topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },
	
	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function ensureScrollValueMonitoring() {
	    if (!isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  },
	
	  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,
	
	  registrationNameModules: EventPluginHub.registrationNameModules,
	
	  putListener: EventPluginHub.putListener,
	
	  getListener: EventPluginHub.getListener,
	
	  deleteListener: EventPluginHub.deleteListener,
	
	  deleteAllListeners: EventPluginHub.deleteAllListeners
	
	});
	
	ReactPerf.measureMethods(ReactBrowserEventEmitter, 'ReactBrowserEventEmitter', {
	  putListener: 'putListener',
	  deleteListener: 'deleteListener'
	});
	
	module.exports = ReactBrowserEventEmitter;

/***/ },
/* 29 */
/*!***************************************!*\
  !*** ./~/react/lib/EventConstants.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventConstants
	 */
	
	'use strict';
	
	var keyMirror = __webpack_require__(/*! fbjs/lib/keyMirror */ 16);
	
	var PropagationPhases = keyMirror({ bubbled: null, captured: null });
	
	/**
	 * Types of raw signals from the browser caught at the top level.
	 */
	var topLevelTypes = keyMirror({
	  topAbort: null,
	  topBlur: null,
	  topCanPlay: null,
	  topCanPlayThrough: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topDurationChange: null,
	  topEmptied: null,
	  topEncrypted: null,
	  topEnded: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topLoadedData: null,
	  topLoadedMetadata: null,
	  topLoadStart: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topPause: null,
	  topPlay: null,
	  topPlaying: null,
	  topProgress: null,
	  topRateChange: null,
	  topReset: null,
	  topScroll: null,
	  topSeeked: null,
	  topSeeking: null,
	  topSelectionChange: null,
	  topStalled: null,
	  topSubmit: null,
	  topSuspend: null,
	  topTextInput: null,
	  topTimeUpdate: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topVolumeChange: null,
	  topWaiting: null,
	  topWheel: null
	});
	
	var EventConstants = {
	  topLevelTypes: topLevelTypes,
	  PropagationPhases: PropagationPhases
	};
	
	module.exports = EventConstants;

/***/ },
/* 30 */
/*!***************************************!*\
  !*** ./~/react/lib/EventPluginHub.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginHub
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	var EventPluginRegistry = __webpack_require__(/*! ./EventPluginRegistry */ 31);
	var EventPluginUtils = __webpack_require__(/*! ./EventPluginUtils */ 32);
	var ReactErrorUtils = __webpack_require__(/*! ./ReactErrorUtils */ 33);
	
	var accumulateInto = __webpack_require__(/*! ./accumulateInto */ 34);
	var forEachAccumulated = __webpack_require__(/*! ./forEachAccumulated */ 35);
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 12);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 24);
	
	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};
	
	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;
	
	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function executeDispatchesAndRelease(event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);
	
	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function executeDispatchesAndReleaseSimulated(e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function executeDispatchesAndReleaseTopLevel(e) {
	  return executeDispatchesAndRelease(e, false);
	};
	
	/**
	 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
	 *   hierarchy given ids of the logical DOM elements involved.
	 */
	var InstanceHandle = null;
	
	function validateInstanceHandle() {
	  var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;
	  process.env.NODE_ENV !== 'production' ? warning(valid, 'InstanceHandle not injected before use!') : undefined;
	}
	
	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {
	
	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {
	
	    /**
	     * @param {object} InjectedMount
	     * @public
	     */
	    injectMount: EventPluginUtils.injection.injectMount,
	
	    /**
	     * @param {object} InjectedInstanceHandle
	     * @public
	     */
	    injectInstanceHandle: function injectInstanceHandle(InjectedInstanceHandle) {
	      InstanceHandle = InjectedInstanceHandle;
	      if (process.env.NODE_ENV !== 'production') {
	        validateInstanceHandle();
	      }
	    },
	
	    getInstanceHandle: function getInstanceHandle() {
	      if (process.env.NODE_ENV !== 'production') {
	        validateInstanceHandle();
	      }
	      return InstanceHandle;
	    },
	
	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,
	
	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName
	
	  },
	
	  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,
	
	  registrationNameModules: EventPluginRegistry.registrationNameModules,
	
	  /**
	   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {?function} listener The callback to store.
	   */
	  putListener: function putListener(id, registrationName, listener) {
	    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener === 'undefined' ? 'undefined' : _typeof(listener)) : invariant(false) : undefined;
	
	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[id] = listener;
	
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(id, registrationName, listener);
	    }
	  },
	
	  /**
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function getListener(id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    return bankForRegistrationName && bankForRegistrationName[id];
	  },
	
	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function deleteListener(id, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(id, registrationName);
	    }
	
	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      delete bankForRegistrationName[id];
	    }
	  },
	
	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {string} id ID of the DOM element.
	   */
	  deleteAllListeners: function deleteAllListeners(id) {
	    for (var registrationName in listenerBank) {
	      if (!listenerBank[registrationName][id]) {
	        continue;
	      }
	
	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(id, registrationName);
	      }
	
	      delete listenerBank[registrationName][id];
	    }
	  },
	
	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },
	
	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function enqueueEvents(events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },
	
	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function processEventQueue(simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : undefined;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },
	
	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function __purge() {
	    listenerBank = {};
	  },
	
	  __getListenerBank: function __getListenerBank() {
	    return listenerBank;
	  }
	
	};
	
	module.exports = EventPluginHub;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 31 */
/*!********************************************!*\
  !*** ./~/react/lib/EventPluginRegistry.js ***!
  \********************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginRegistry
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 12);
	
	/**
	 * Injectable ordering of event plugins.
	 */
	var EventPluginOrder = null;
	
	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};
	
	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!EventPluginOrder) {
	    // Wait until an `EventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var PluginModule = namesToPlugins[pluginName];
	    var pluginIndex = EventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : undefined;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : undefined;
	    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
	    var publishedEvents = PluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : undefined;
	    }
	  }
	}
	
	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : undefined;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;
	
	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);
	    return true;
	  }
	  return false;
	}
	
	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, PluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : undefined;
	  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;
	}
	
	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {
	
	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],
	
	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},
	
	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},
	
	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},
	
	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function injectEventPluginOrder(InjectedEventPluginOrder) {
	    !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : undefined;
	    // Clone the ordering so it cannot be dynamically mutated.
	    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
	    recomputePluginOrdering();
	  },
	
	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function injectEventPluginsByName(injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var PluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {
	        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : undefined;
	        namesToPlugins[pluginName] = PluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },
	
	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function getPluginModuleForEvent(event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    for (var phase in dispatchConfig.phasedRegistrationNames) {
	      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
	        continue;
	      }
	      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];
	      if (PluginModule) {
	        return PluginModule;
	      }
	    }
	    return null;
	  },
	
	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function _resetEventPlugins() {
	    EventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;
	
	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }
	
	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	  }
	
	};
	
	module.exports = EventPluginRegistry;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 32 */
/*!*****************************************!*\
  !*** ./~/react/lib/EventPluginUtils.js ***!
  \*****************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginUtils
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(/*! ./EventConstants */ 29);
	var ReactErrorUtils = __webpack_require__(/*! ./ReactErrorUtils */ 33);
	
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 12);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 24);
	
	/**
	 * Injected dependencies:
	 */
	
	/**
	 * - `Mount`: [required] Module that can convert between React dom IDs and
	 *   actual node references.
	 */
	var injection = {
	  Mount: null,
	  injectMount: function injectMount(InjectedMount) {
	    injection.Mount = InjectedMount;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(InjectedMount && InjectedMount.getNode && InjectedMount.getID, 'EventPluginUtils.injection.injectMount(...): Injected Mount ' + 'module is missing getNode or getID.') : undefined;
	    }
	  }
	};
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	function isEndish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
	}
	
	function isMoveish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
	}
	function isStartish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
	}
	
	var validateEventDispatches;
	if (process.env.NODE_ENV !== 'production') {
	  validateEventDispatches = function validateEventDispatches(event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchIDs = event._dispatchIDs;
	
	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var idsIsArr = Array.isArray(dispatchIDs);
	    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
	
	    process.env.NODE_ENV !== 'production' ? warning(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : undefined;
	  };
	}
	
	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {string} domID DOM id to pass to the callback.
	 */
	function executeDispatch(event, simulated, listener, domID) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = injection.Mount.getNode(domID);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event, domID);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event, domID);
	  }
	  event.currentTarget = null;
	}
	
	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchIDs[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchIDs);
	  }
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	}
	
	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchIDs[i])) {
	        return dispatchIDs[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchIDs)) {
	      return dispatchIDs;
	    }
	  }
	  return null;
	}
	
	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchIDs = null;
	  event._dispatchListeners = null;
	  return ret;
	}
	
	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchID = event._dispatchIDs;
	  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : invariant(false) : undefined;
	  var res = dispatchListener ? dispatchListener(event, dispatchID) : null;
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	  return res;
	}
	
	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}
	
	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,
	
	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,
	
	  getNode: function getNode(id) {
	    return injection.Mount.getNode(id);
	  },
	  getID: function getID(node) {
	    return injection.Mount.getID(node);
	  },
	
	  injection: injection
	};
	
	module.exports = EventPluginUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 33 */
/*!****************************************!*\
  !*** ./~/react/lib/ReactErrorUtils.js ***!
  \****************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactErrorUtils
	 * @typechecks
	 */
	
	'use strict';
	
	var caughtError = null;
	
	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {?String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a, b) {
	  try {
	    return func(a, b);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	    return undefined;
	  }
	}
	
	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,
	
	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,
	
	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function rethrowCaughtError() {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};
	
	if (process.env.NODE_ENV !== 'production') {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {
	      var boundFunc = func.bind(null, a, b);
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}
	
	module.exports = ReactErrorUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 34 */
/*!***************************************!*\
  !*** ./~/react/lib/accumulateInto.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule accumulateInto
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 12);
	
	/**
	 *
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */
	
	function accumulateInto(current, next) {
	  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : undefined;
	  if (current == null) {
	    return next;
	  }
	
	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  var currentIsArray = Array.isArray(current);
	  var nextIsArray = Array.isArray(next);
	
	  if (currentIsArray && nextIsArray) {
	    current.push.apply(current, next);
	    return current;
	  }
	
	  if (currentIsArray) {
	    current.push(next);
	    return current;
	  }
	
	  if (nextIsArray) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }
	
	  return [current, next];
	}
	
	module.exports = accumulateInto;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 35 */
/*!*******************************************!*\
  !*** ./~/react/lib/forEachAccumulated.js ***!
  \*******************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule forEachAccumulated
	 */
	
	'use strict';
	
	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	
	var forEachAccumulated = function forEachAccumulated(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	};
	
	module.exports = forEachAccumulated;

/***/ },
/* 36 */
/*!***********************************************!*\
  !*** ./~/react/lib/ReactEventEmitterMixin.js ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventEmitterMixin
	 */
	
	'use strict';
	
	var EventPluginHub = __webpack_require__(/*! ./EventPluginHub */ 30);
	
	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}
	
	var ReactEventEmitterMixin = {
	
	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {object} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native environment event.
	   */
	  handleTopLevel: function handleTopLevel(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};
	
	module.exports = ReactEventEmitterMixin;

/***/ },
/* 37 */
/*!****************************************!*\
  !*** ./~/react/lib/ViewportMetrics.js ***!
  \****************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ViewportMetrics
	 */
	
	'use strict';
	
	var ViewportMetrics = {
	
	  currentScrollLeft: 0,
	
	  currentScrollTop: 0,
	
	  refreshScrollValues: function refreshScrollValues(scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }
	
	};
	
	module.exports = ViewportMetrics;

/***/ },
/* 38 */
/*!**************************************!*\
  !*** ./~/react/lib/Object.assign.js ***!
  \**************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Object.assign
	 */
	
	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign
	
	'use strict';
	
	function assign(target, sources) {
	  if (target == null) {
	    throw new TypeError('Object.assign target cannot be null or undefined');
	  }
	
	  var to = Object(target);
	  var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
	    var nextSource = arguments[nextIndex];
	    if (nextSource == null) {
	      continue;
	    }
	
	    var from = Object(nextSource);
	
	    // We don't currently support accessors nor proxies. Therefore this
	    // copy cannot throw. If we ever supported this then we must handle
	    // exceptions and side-effects. We don't support symbols so they won't
	    // be transferred.
	
	    for (var key in from) {
	      if (hasOwnProperty.call(from, key)) {
	        to[key] = from[key];
	      }
	    }
	  }
	
	  return to;
	}
	
	module.exports = assign;

/***/ },
/* 39 */
/*!*****************************************!*\
  !*** ./~/react/lib/isEventSupported.js ***!
  \*****************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventSupported
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(/*! fbjs/lib/ExecutionEnvironment */ 8);
	
	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}
	
	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }
	
	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;
	
	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }
	
	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }
	
	  return isSupported;
	}
	
	module.exports = isEventSupported;

/***/ },
/* 40 */
/*!*********************************************!*\
  !*** ./~/react/lib/ReactDOMFeatureFlags.js ***!
  \*********************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFeatureFlags
	 */
	
	'use strict';
	
	var ReactDOMFeatureFlags = {
	  useCreateElement: false
	};
	
	module.exports = ReactDOMFeatureFlags;

/***/ },
/* 41 */
/*!*************************************!*\
  !*** ./~/react/lib/ReactElement.js ***!
  \*************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElement
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	var ReactCurrentOwner = __webpack_require__(/*! ./ReactCurrentOwner */ 4);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 38);
	var canDefineProperty = __webpack_require__(/*! ./canDefineProperty */ 42);
	
	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;
	
	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};
	
	/**
	 * Base constructor for all React elements. This is only used to make this
	 * work with a dynamic instanceof check. Nothing should live on this prototype.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function ReactElement(type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,
	
	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,
	
	    // Record the component responsible for creating this element.
	    _owner: owner
	  };
	
	  if (process.env.NODE_ENV !== 'production') {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};
	
	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    Object.freeze(element.props);
	    Object.freeze(element);
	  }
	
	  return element;
	};
	
	ReactElement.createElement = function (type, config, children) {
	  var propName;
	
	  // Reserved names are extracted
	  var props = {};
	
	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;
	
	  if (config != null) {
	    ref = config.ref === undefined ? null : config.ref;
	    key = config.key === undefined ? null : '' + config.key;
	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }
	
	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }
	
	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (typeof props[propName] === 'undefined') {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }
	
	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};
	
	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};
	
	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
	
	  return newElement;
	};
	
	ReactElement.cloneAndReplaceProps = function (oldElement, newProps) {
	  var newElement = ReactElement(oldElement.type, oldElement.key, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, newProps);
	
	  if (process.env.NODE_ENV !== 'production') {
	    // If the key on the original is valid, then the clone is valid
	    newElement._store.validated = oldElement._store.validated;
	  }
	
	  return newElement;
	};
	
	ReactElement.cloneElement = function (element, config, children) {
	  var propName;
	
	  // Original props are copied
	  var props = assign({}, element.props);
	
	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;
	
	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;
	
	  if (config != null) {
	    if (config.ref !== undefined) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (config.key !== undefined) {
	      key = '' + config.key;
	    }
	    // Remaining properties override existing props
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }
	
	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }
	
	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};
	
	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};
	
	module.exports = ReactElement;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 42 */
/*!******************************************!*\
  !*** ./~/react/lib/canDefineProperty.js ***!
  \******************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule canDefineProperty
	 */
	
	'use strict';
	
	var canDefineProperty = false;
	if (process.env.NODE_ENV !== 'production') {
	  try {
	    Object.defineProperty({}, 'x', { get: function get() {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}
	
	module.exports = canDefineProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 43 */
/*!****************************************************!*\
  !*** ./~/react/lib/ReactEmptyComponentRegistry.js ***!
  \****************************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponentRegistry
	 */
	
	'use strict';
	
	// This registry keeps track of the React IDs of the components that rendered to
	// `null` (in reality a placeholder such as `noscript`)
	
	var nullComponentIDsRegistry = {};
	
	/**
	 * @param {string} id Component's `_rootNodeID`.
	 * @return {boolean} True if the component is rendered to null.
	 */
	function isNullComponentID(id) {
	  return !!nullComponentIDsRegistry[id];
	}
	
	/**
	 * Mark the component as having rendered to null.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function registerNullComponentID(id) {
	  nullComponentIDsRegistry[id] = true;
	}
	
	/**
	 * Unmark the component as having rendered to null: it renders to something now.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function deregisterNullComponentID(id) {
	  delete nullComponentIDsRegistry[id];
	}
	
	var ReactEmptyComponentRegistry = {
	  isNullComponentID: isNullComponentID,
	  registerNullComponentID: registerNullComponentID,
	  deregisterNullComponentID: deregisterNullComponentID
	};
	
	module.exports = ReactEmptyComponentRegistry;

/***/ },
/* 44 */
/*!*********************************************!*\
  !*** ./~/react/lib/ReactInstanceHandles.js ***!
  \*********************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceHandles
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactRootIndex = __webpack_require__(/*! ./ReactRootIndex */ 45);
	
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 12);
	
	var SEPARATOR = '.';
	var SEPARATOR_LENGTH = SEPARATOR.length;
	
	/**
	 * Maximum depth of traversals before we consider the possibility of a bad ID.
	 */
	var MAX_TREE_DEPTH = 10000;
	
	/**
	 * Creates a DOM ID prefix to use when mounting React components.
	 *
	 * @param {number} index A unique integer
	 * @return {string} React root ID.
	 * @internal
	 */
	function getReactRootIDString(index) {
	  return SEPARATOR + index.toString(36);
	}
	
	/**
	 * Checks if a character in the supplied ID is a separator or the end.
	 *
	 * @param {string} id A React DOM ID.
	 * @param {number} index Index of the character to check.
	 * @return {boolean} True if the character is a separator or end of the ID.
	 * @private
	 */
	function isBoundary(id, index) {
	  return id.charAt(index) === SEPARATOR || index === id.length;
	}
	
	/**
	 * Checks if the supplied string is a valid React DOM ID.
	 *
	 * @param {string} id A React DOM ID, maybe.
	 * @return {boolean} True if the string is a valid React DOM ID.
	 * @private
	 */
	function isValidID(id) {
	  return id === '' || id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR;
	}
	
	/**
	 * Checks if the first ID is an ancestor of or equal to the second ID.
	 *
	 * @param {string} ancestorID
	 * @param {string} descendantID
	 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
	 * @internal
	 */
	function isAncestorIDOf(ancestorID, descendantID) {
	  return descendantID.indexOf(ancestorID) === 0 && isBoundary(descendantID, ancestorID.length);
	}
	
	/**
	 * Gets the parent ID of the supplied React DOM ID, `id`.
	 *
	 * @param {string} id ID of a component.
	 * @return {string} ID of the parent, or an empty string.
	 * @private
	 */
	function getParentID(id) {
	  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
	}
	
	/**
	 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
	 * supplied `destinationID`. If they are equal, the ID is returned.
	 *
	 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
	 * @param {string} destinationID ID of the destination node.
	 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
	 * @private
	 */
	function getNextDescendantID(ancestorID, destinationID) {
	  !(isValidID(ancestorID) && isValidID(destinationID)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(%s, %s): Received an invalid React DOM ID.', ancestorID, destinationID) : invariant(false) : undefined;
	  !isAncestorIDOf(ancestorID, destinationID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(...): React has made an invalid assumption about ' + 'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.', ancestorID, destinationID) : invariant(false) : undefined;
	  if (ancestorID === destinationID) {
	    return ancestorID;
	  }
	  // Skip over the ancestor and the immediate separator. Traverse until we hit
	  // another separator or we reach the end of `destinationID`.
	  var start = ancestorID.length + SEPARATOR_LENGTH;
	  var i;
	  for (i = start; i < destinationID.length; i++) {
	    if (isBoundary(destinationID, i)) {
	      break;
	    }
	  }
	  return destinationID.substr(0, i);
	}
	
	/**
	 * Gets the nearest common ancestor ID of two IDs.
	 *
	 * Using this ID scheme, the nearest common ancestor ID is the longest common
	 * prefix of the two IDs that immediately preceded a "marker" in both strings.
	 *
	 * @param {string} oneID
	 * @param {string} twoID
	 * @return {string} Nearest common ancestor ID, or the empty string if none.
	 * @private
	 */
	function getFirstCommonAncestorID(oneID, twoID) {
	  var minLength = Math.min(oneID.length, twoID.length);
	  if (minLength === 0) {
	    return '';
	  }
	  var lastCommonMarkerIndex = 0;
	  // Use `<=` to traverse until the "EOL" of the shorter string.
	  for (var i = 0; i <= minLength; i++) {
	    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
	      lastCommonMarkerIndex = i;
	    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
	      break;
	    }
	  }
	  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
	  !isValidID(longestCommonID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s', oneID, twoID, longestCommonID) : invariant(false) : undefined;
	  return longestCommonID;
	}
	
	/**
	 * Traverses the parent path between two IDs (either up or down). The IDs must
	 * not be the same, and there must exist a parent path between them. If the
	 * callback returns `false`, traversal is stopped.
	 *
	 * @param {?string} start ID at which to start traversal.
	 * @param {?string} stop ID at which to end traversal.
	 * @param {function} cb Callback to invoke each ID with.
	 * @param {*} arg Argument to invoke the callback with.
	 * @param {?boolean} skipFirst Whether or not to skip the first node.
	 * @param {?boolean} skipLast Whether or not to skip the last node.
	 * @private
	 */
	function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
	  start = start || '';
	  stop = stop || '';
	  !(start !== stop) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.', start) : invariant(false) : undefined;
	  var traverseUp = isAncestorIDOf(stop, start);
	  !(traverseUp || isAncestorIDOf(start, stop)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' + 'not have a parent path.', start, stop) : invariant(false) : undefined;
	  // Traverse from `start` to `stop` one depth at a time.
	  var depth = 0;
	  var traverse = traverseUp ? getParentID : getNextDescendantID;
	  for (var id = start;; /* until break */id = traverse(id, stop)) {
	    var ret;
	    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
	      ret = cb(id, traverseUp, arg);
	    }
	    if (ret === false || id === stop) {
	      // Only break //after// visiting `stop`.
	      break;
	    }
	    !(depth++ < MAX_TREE_DEPTH) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' + 'traversing the React DOM ID tree. This may be due to malformed IDs: %s', start, stop, id) : invariant(false) : undefined;
	  }
	}
	
	/**
	 * Manages the IDs assigned to DOM representations of React components. This
	 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
	 * order to simulate events).
	 *
	 * @internal
	 */
	var ReactInstanceHandles = {
	
	  /**
	   * Constructs a React root ID
	   * @return {string} A React root ID.
	   */
	  createReactRootID: function createReactRootID() {
	    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
	  },
	
	  /**
	   * Constructs a React ID by joining a root ID with a name.
	   *
	   * @param {string} rootID Root ID of a parent component.
	   * @param {string} name A component's name (as flattened children).
	   * @return {string} A React ID.
	   * @internal
	   */
	  createReactID: function createReactID(rootID, name) {
	    return rootID + name;
	  },
	
	  /**
	   * Gets the DOM ID of the React component that is the root of the tree that
	   * contains the React component with the supplied DOM ID.
	   *
	   * @param {string} id DOM ID of a React component.
	   * @return {?string} DOM ID of the React component that is the root.
	   * @internal
	   */
	  getReactRootIDFromNodeID: function getReactRootIDFromNodeID(id) {
	    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
	      var index = id.indexOf(SEPARATOR, 1);
	      return index > -1 ? id.substr(0, index) : id;
	    }
	    return null;
	  },
	
	  /**
	   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	   * should would receive a `mouseEnter` or `mouseLeave` event.
	   *
	   * NOTE: Does not invoke the callback on the nearest common ancestor because
	   * nothing "entered" or "left" that element.
	   *
	   * @param {string} leaveID ID being left.
	   * @param {string} enterID ID being entered.
	   * @param {function} cb Callback to invoke on each entered/left ID.
	   * @param {*} upArg Argument to invoke the callback with on left IDs.
	   * @param {*} downArg Argument to invoke the callback with on entered IDs.
	   * @internal
	   */
	  traverseEnterLeave: function traverseEnterLeave(leaveID, enterID, cb, upArg, downArg) {
	    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
	    if (ancestorID !== leaveID) {
	      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
	    }
	    if (ancestorID !== enterID) {
	      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
	    }
	  },
	
	  /**
	   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseTwoPhase: function traverseTwoPhase(targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, false);
	      traverseParentPath(targetID, '', cb, arg, false, true);
	    }
	  },
	
	  /**
	   * Same as `traverseTwoPhase` but skips the `targetID`.
	   */
	  traverseTwoPhaseSkipTarget: function traverseTwoPhaseSkipTarget(targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, true);
	      traverseParentPath(targetID, '', cb, arg, true, true);
	    }
	  },
	
	  /**
	   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
	   * example, passing `.0.$row-0.1` would result in `cb` getting called
	   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseAncestors: function traverseAncestors(targetID, cb, arg) {
	    traverseParentPath('', targetID, cb, arg, true, false);
	  },
	
	  getFirstCommonAncestorID: getFirstCommonAncestorID,
	
	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getNextDescendantID: getNextDescendantID,
	
	  isAncestorIDOf: isAncestorIDOf,
	
	  SEPARATOR: SEPARATOR
	
	};
	
	module.exports = ReactInstanceHandles;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 45 */
/*!***************************************!*\
  !*** ./~/react/lib/ReactRootIndex.js ***!
  \***************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRootIndex
	 * @typechecks
	 */
	
	'use strict';
	
	var ReactRootIndexInjection = {
	  /**
	   * @param {function} _createReactRootIndex
	   */
	  injectCreateReactRootIndex: function injectCreateReactRootIndex(_createReactRootIndex) {
	    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
	  }
	};
	
	var ReactRootIndex = {
	  createReactRootIndex: null,
	  injection: ReactRootIndexInjection
	};
	
	module.exports = ReactRootIndex;

/***/ },
/* 46 */
/*!*****************************************!*\
  !*** ./~/react/lib/ReactInstanceMap.js ***!
  \*****************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceMap
	 */
	
	'use strict';
	
	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */
	
	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
	
	var ReactInstanceMap = {
	
	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function remove(key) {
	    key._reactInternalInstance = undefined;
	  },
	
	  get: function get(key) {
	    return key._reactInternalInstance;
	  },
	
	  has: function has(key) {
	    return key._reactInternalInstance !== undefined;
	  },
	
	  set: function set(key, value) {
	    key._reactInternalInstance = value;
	  }
	
	};
	
	module.exports = ReactInstanceMap;

/***/ },
/* 47 */
/*!********************************************!*\
  !*** ./~/react/lib/ReactMarkupChecksum.js ***!
  \********************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMarkupChecksum
	 */
	
	'use strict';
	
	var adler32 = __webpack_require__(/*! ./adler32 */ 48);
	
	var TAG_END = /\/?>/;
	
	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',
	
	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function addChecksumToMarkup(markup) {
	    var checksum = adler32(markup);
	
	    // Add checksum (handle both parent tags and self-closing tags)
	    return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	  },
	
	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function canReuseMarkup(markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};
	
	module.exports = ReactMarkupChecksum;

/***/ },
/* 48 */
/*!********************************!*\
  !*** ./~/react/lib/adler32.js ***!
  \********************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule adler32
	 */
	
	'use strict';
	
	var MOD = 65521;
	
	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    for (; i < Math.min(i + 4096, m); i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}
	
	module.exports = adler32;

/***/ },
/* 49 */
/*!****************************************!*\
  !*** ./~/react/lib/ReactReconciler.js ***!
  \****************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconciler
	 */
	
	'use strict';
	
	var ReactRef = __webpack_require__(/*! ./ReactRef */ 50);
	
	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}
	
	var ReactReconciler = {
	
	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function mountComponent(internalInstance, rootID, transaction, context) {
	    var markup = internalInstance.mountComponent(rootID, transaction, context);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    return markup;
	  },
	
	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function unmountComponent(internalInstance) {
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent();
	  },
	
	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function receiveComponent(internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;
	
	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.
	
	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }
	
	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);
	
	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }
	
	    internalInstance.receiveComponent(nextElement, transaction, context);
	
	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	  },
	
	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function performUpdateIfNecessary(internalInstance, transaction) {
	    internalInstance.performUpdateIfNecessary(transaction);
	  }
	
	};
	
	module.exports = ReactReconciler;

/***/ },
/* 50 */
/*!*********************************!*\
  !*** ./~/react/lib/ReactRef.js ***!
  \*********************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRef
	 */
	
	'use strict';
	
	var ReactOwner = __webpack_require__(/*! ./ReactOwner */ 51);
	
	var ReactRef = {};
	
	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}
	
	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}
	
	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};
	
	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.
	
	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.
	
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	
	  return(
	    // This has a few false positives w/r/t empty components.
	    prevEmpty || nextEmpty || nextElement._owner !== prevElement._owner || nextElement.ref !== prevElement.ref
	  );
	};
	
	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};
	
	module.exports = ReactRef;

/***/ },
/* 51 */
/*!***********************************!*\
  !*** ./~/react/lib/ReactOwner.js ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactOwner
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 12);
	
	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {
	
	  /**
	   * @param {?object} object
	   * @return {boolean} True if `object` is a valid owner.
	   * @final
	   */
	  isValidOwner: function isValidOwner(object) {
	    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	  },
	
	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function addComponentAsRefTo(component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
	    owner.attachRef(ref, component);
	  },
	
	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function removeComponentAsRefFrom(component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
	    // Check that `component` is still the current ref because we do not want to
	    // detach the ref if another component stole it.
	    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }
	
	};
	
	module.exports = ReactOwner;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 52 */
/*!*****************************************!*\
  !*** ./~/react/lib/ReactUpdateQueue.js ***!
  \*****************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdateQueue
	 */
	
	'use strict';
	
	var ReactCurrentOwner = __webpack_require__(/*! ./ReactCurrentOwner */ 4);
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 41);
	var ReactInstanceMap = __webpack_require__(/*! ./ReactInstanceMap */ 46);
	var ReactUpdates = __webpack_require__(/*! ./ReactUpdates */ 53);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 38);
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 12);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 24);
	
	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}
	
	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor.displayName) : undefined;
	    }
	    return null;
	  }
	
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition ' + '(such as within `render`). Render methods should be a pure function ' + 'of props and state.', callerName) : undefined;
	  }
	
	  return internalInstance;
	}
	
	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function isMounted(publicInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },
	
	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function enqueueCallback(publicInstance, callback) {
	    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);
	
	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }
	
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },
	
	  enqueueCallbackInternal: function enqueueCallbackInternal(internalInstance, callback) {
	    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function enqueueForceUpdate(publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    internalInstance._pendingForceUpdate = true;
	
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;
	
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function enqueueSetState(publicInstance, partialState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);
	
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function enqueueSetProps(publicInstance, partialProps) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setProps');
	    if (!internalInstance) {
	      return;
	    }
	    ReactUpdateQueue.enqueueSetPropsInternal(internalInstance, partialProps);
	  },
	
	  enqueueSetPropsInternal: function enqueueSetPropsInternal(internalInstance, partialProps) {
	    var topLevelWrapper = internalInstance._topLevelWrapper;
	    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setProps(...): You called `setProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;
	
	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
	    var element = wrapElement.props;
	    var props = assign({}, element.props, partialProps);
	    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));
	
	    enqueueUpdate(topLevelWrapper);
	  },
	
	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function enqueueReplaceProps(publicInstance, props) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceProps');
	    if (!internalInstance) {
	      return;
	    }
	    ReactUpdateQueue.enqueueReplacePropsInternal(internalInstance, props);
	  },
	
	  enqueueReplacePropsInternal: function enqueueReplacePropsInternal(internalInstance, props) {
	    var topLevelWrapper = internalInstance._topLevelWrapper;
	    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'replaceProps(...): You called `replaceProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;
	
	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
	    var element = wrapElement.props;
	    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));
	
	    enqueueUpdate(topLevelWrapper);
	  },
	
	  enqueueElementInternal: function enqueueElementInternal(internalInstance, newElement) {
	    internalInstance._pendingElement = newElement;
	    enqueueUpdate(internalInstance);
	  }
	
	};
	
	module.exports = ReactUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 53 */
/*!*************************************!*\
  !*** ./~/react/lib/ReactUpdates.js ***!
  \*************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdates
	 */
	
	'use strict';
	
	var CallbackQueue = __webpack_require__(/*! ./CallbackQueue */ 54);
	var PooledClass = __webpack_require__(/*! ./PooledClass */ 55);
	var ReactPerf = __webpack_require__(/*! ./ReactPerf */ 17);
	var ReactReconciler = __webpack_require__(/*! ./ReactReconciler */ 49);
	var Transaction = __webpack_require__(/*! ./Transaction */ 56);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 38);
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 12);
	
	var dirtyComponents = [];
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;
	
	var batchingStrategy = null;
	
	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy') : invariant(false) : undefined;
	}
	
	var NESTED_UPDATES = {
	  initialize: function initialize() {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function close() {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};
	
	var UPDATE_QUEUEING = {
	  initialize: function initialize() {
	    this.callbackQueue.reset();
	  },
	  close: function close() {
	    this.callbackQueue.notifyAll();
	  }
	};
	
	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];
	
	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled( /* forceHTML */false);
	}
	
	assign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function getTransactionWrappers() {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  destructor: function destructor() {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },
	
	  perform: function perform(method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});
	
	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);
	
	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}
	
	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}
	
	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length) : invariant(false) : undefined;
	
	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);
	
	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];
	
	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;
	
	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction);
	
	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}
	
	var flushBatchedUpdates = function flushBatchedUpdates() {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }
	
	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	flushBatchedUpdates = ReactPerf.measure('ReactUpdates', 'flushBatchedUpdates', flushBatchedUpdates);
	
	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();
	
	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setProps, setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)
	
	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }
	
	  dirtyComponents.push(component);
	}
	
	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' + 'updates are not being batched.') : invariant(false) : undefined;
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}
	
	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function injectReconcileTransaction(ReconcileTransaction) {
	    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : invariant(false) : undefined;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },
	
	  injectBatchingStrategy: function injectBatchingStrategy(_batchingStrategy) {
	    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : invariant(false) : undefined;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : invariant(false) : undefined;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : invariant(false) : undefined;
	    batchingStrategy = _batchingStrategy;
	  }
	};
	
	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,
	
	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};
	
	module.exports = ReactUpdates;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 54 */
/*!**************************************!*\
  !*** ./~/react/lib/CallbackQueue.js ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CallbackQueue
	 */
	
	'use strict';
	
	var PooledClass = __webpack_require__(/*! ./PooledClass */ 55);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 38);
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 12);
	
	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	function CallbackQueue() {
	  this._callbacks = null;
	  this._contexts = null;
	}
	
	assign(CallbackQueue.prototype, {
	
	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	  enqueue: function enqueue(callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._contexts = this._contexts || [];
	    this._callbacks.push(callback);
	    this._contexts.push(context);
	  },
	
	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	  notifyAll: function notifyAll() {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    if (callbacks) {
	      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : invariant(false) : undefined;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i]);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  },
	
	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	  reset: function reset() {
	    this._callbacks = null;
	    this._contexts = null;
	  },
	
	  /**
	   * `PooledClass` looks for this.
	   */
	  destructor: function destructor() {
	    this.reset();
	  }
	
	});
	
	PooledClass.addPoolingTo(CallbackQueue);
	
	module.exports = CallbackQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 55 */
/*!************************************!*\
  !*** ./~/react/lib/PooledClass.js ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule PooledClass
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 12);
	
	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};
	
	var twoArgumentPooler = function twoArgumentPooler(a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};
	
	var threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};
	
	var fourArgumentPooler = function fourArgumentPooler(a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};
	
	var fiveArgumentPooler = function fiveArgumentPooler(a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};
	
	var standardReleaser = function standardReleaser(instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : invariant(false) : undefined;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};
	
	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;
	
	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances (optional).
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};
	
	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};
	
	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 56 */
/*!************************************!*\
  !*** ./~/react/lib/Transaction.js ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Transaction
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 12);
	
	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var Mixin = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function reinitializeTransaction() {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },
	
	  _isInTransaction: false,
	
	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,
	
	  isInTransaction: function isInTransaction() {
	    return !!this._isInTransaction;
	  },
	
	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function perform(method, scope, a, b, c, d, e, f) {
	    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there ' + 'is already an outstanding transaction.') : invariant(false) : undefined;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },
	
	  initializeAll: function initializeAll(startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },
	
	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function closeAll(startIndex) {
	    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : invariant(false) : undefined;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};
	
	var Transaction = {
	
	  Mixin: Mixin,
	
	  /**
	   * Token to look for to determine if an error occurred.
	   */
	  OBSERVED_ERROR: {}
	
	};
	
	module.exports = Transaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 57 */
/*!*******************************************!*\
  !*** ./~/react/~/fbjs/lib/emptyObject.js ***!
  \*******************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyObject
	 */
	
	'use strict';
	
	var emptyObject = {};
	
	if (process.env.NODE_ENV !== 'production') {
	  Object.freeze(emptyObject);
	}
	
	module.exports = emptyObject;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 58 */
/*!********************************************!*\
  !*** ./~/react/~/fbjs/lib/containsNode.js ***!
  \********************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule containsNode
	 * @typechecks
	 */
	
	'use strict';
	
	var isTextNode = __webpack_require__(/*! ./isTextNode */ 59);
	
	/*eslint-disable no-bitwise */
	
	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 *
	 * @param {?DOMNode} outerNode Outer DOM node.
	 * @param {?DOMNode} innerNode Inner DOM node.
	 * @return {boolean} True if `outerNode` contains or is `innerNode`.
	 */
	function containsNode(_x, _x2) {
	  var _again = true;
	
	  _function: while (_again) {
	    var outerNode = _x,
	        innerNode = _x2;
	    _again = false;
	
	    if (!outerNode || !innerNode) {
	      return false;
	    } else if (outerNode === innerNode) {
	      return true;
	    } else if (isTextNode(outerNode)) {
	      return false;
	    } else if (isTextNode(innerNode)) {
	      _x = outerNode;
	      _x2 = innerNode.parentNode;
	      _again = true;
	      continue _function;
	    } else if (outerNode.contains) {
	      return outerNode.contains(innerNode);
	    } else if (outerNode.compareDocumentPosition) {
	      return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	    } else {
	      return false;
	    }
	  }
	}
	
	module.exports = containsNode;

/***/ },
/* 59 */
/*!******************************************!*\
  !*** ./~/react/~/fbjs/lib/isTextNode.js ***!
  \******************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextNode
	 * @typechecks
	 */
	
	'use strict';
	
	var isNode = __webpack_require__(/*! ./isNode */ 60);
	
	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}
	
	module.exports = isTextNode;

/***/ },
/* 60 */
/*!**************************************!*\
  !*** ./~/react/~/fbjs/lib/isNode.js ***!
  \**************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isNode
	 * @typechecks
	 */
	
	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	function isNode(object) {
	  return !!(object && (typeof Node === 'function' ? object instanceof Node : (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}
	
	module.exports = isNode;

/***/ },
/* 61 */
/*!**************************************************!*\
  !*** ./~/react/lib/instantiateReactComponent.js ***!
  \**************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule instantiateReactComponent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	var ReactCompositeComponent = __webpack_require__(/*! ./ReactCompositeComponent */ 62);
	var ReactEmptyComponent = __webpack_require__(/*! ./ReactEmptyComponent */ 67);
	var ReactNativeComponent = __webpack_require__(/*! ./ReactNativeComponent */ 68);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 38);
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 12);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 24);
	
	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function ReactCompositeComponentWrapper() {};
	assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {
	  _instantiateReactComponent: instantiateReactComponent
	});
	
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}
	
	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node) {
	  var instance;
	
	  if (node === null || node === false) {
	    instance = new ReactEmptyComponent(instantiateReactComponent);
	  } else if ((typeof node === 'undefined' ? 'undefined' : _typeof(node)) === 'object') {
	    var element = node;
	    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) ' + 'or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : _typeof(element.type), getDeclarationErrorAddendum(element._owner)) : invariant(false) : undefined;
	
	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactNativeComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	    } else {
	      instance = new ReactCompositeComponentWrapper();
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactNativeComponent.createInstanceForText(node);
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node === 'undefined' ? 'undefined' : _typeof(node)) : invariant(false) : undefined;
	  }
	
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(typeof instance.construct === 'function' && typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : undefined;
	  }
	
	  // Sets up the instance. This can probably just move into the constructor now.
	  instance.construct(node);
	
	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;
	
	  if (process.env.NODE_ENV !== 'production') {
	    instance._isOwnerNecessary = false;
	    instance._warnedAboutRefsInRender = false;
	  }
	
	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (process.env.NODE_ENV !== 'production') {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }
	
	  return instance;
	}
	
	module.exports = instantiateReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 62 */
/*!************************************************!*\
  !*** ./~/react/lib/ReactCompositeComponent.js ***!
  \************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCompositeComponent
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	var ReactComponentEnvironment = __webpack_require__(/*! ./ReactComponentEnvironment */ 63);
	var ReactCurrentOwner = __webpack_require__(/*! ./ReactCurrentOwner */ 4);
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 41);
	var ReactInstanceMap = __webpack_require__(/*! ./ReactInstanceMap */ 46);
	var ReactPerf = __webpack_require__(/*! ./ReactPerf */ 17);
	var ReactPropTypeLocations = __webpack_require__(/*! ./ReactPropTypeLocations */ 64);
	var ReactPropTypeLocationNames = __webpack_require__(/*! ./ReactPropTypeLocationNames */ 65);
	var ReactReconciler = __webpack_require__(/*! ./ReactReconciler */ 49);
	var ReactUpdateQueue = __webpack_require__(/*! ./ReactUpdateQueue */ 52);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 38);
	var emptyObject = __webpack_require__(/*! fbjs/lib/emptyObject */ 57);
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 12);
	var shouldUpdateReactComponent = __webpack_require__(/*! ./shouldUpdateReactComponent */ 66);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 24);
	
	function getDeclarationErrorAddendum(component) {
	  var owner = component._currentElement._owner || null;
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  return Component(this.props, this.context, this.updater);
	};
	
	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */
	
	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;
	
	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponentMixin = {
	
	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function construct(element) {
	    this._currentElement = element;
	    this._rootNodeID = null;
	    this._instance = null;
	
	    // See ReactUpdateQueue
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	
	    this._renderedComponent = null;
	
	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;
	
	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	  },
	
	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function mountComponent(rootID, transaction, context) {
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._rootNodeID = rootID;
	
	    var publicProps = this._processProps(this._currentElement.props);
	    var publicContext = this._processContext(context);
	
	    var Component = this._currentElement.type;
	
	    // Initialize the public class
	    var inst;
	    var renderedElement;
	
	    // This is a way to detect if Component is a stateless arrow function
	    // component, which is not newable. It might not be 100% reliable but is
	    // something we can do until we start detecting that Component extends
	    // React.Component. We already assume that typeof Component === 'function'.
	    var canInstantiate = 'prototype' in Component;
	
	    if (canInstantiate) {
	      if (process.env.NODE_ENV !== 'production') {
	        ReactCurrentOwner.current = this;
	        try {
	          inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	        } finally {
	          ReactCurrentOwner.current = null;
	        }
	      } else {
	        inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	      }
	    }
	
	    if (!canInstantiate || inst === null || inst === false || ReactElement.isValidElement(inst)) {
	      renderedElement = inst;
	      inst = new StatelessComponent(Component);
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`, returned ' + 'null/false from a stateless component, or tried to render an ' + 'element whose type is a function that isn\'t a React component.', Component.displayName || Component.name || 'Component') : undefined;
	      } else {
	        // We support ES6 inheriting from React.Component, the module pattern,
	        // and stateless components, but not ES6 classes that don't extend
	        process.env.NODE_ENV !== 'production' ? warning(Component.prototype && Component.prototype.isReactComponent || !canInstantiate || !(inst instanceof Component), '%s(...): React component classes must extend React.Component.', Component.displayName || Component.name || 'Component') : undefined;
	      }
	    }
	
	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = ReactUpdateQueue;
	
	    this._instance = inst;
	
	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);
	
	    if (process.env.NODE_ENV !== 'production') {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : undefined;
	    }
	
	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !((typeof initialState === 'undefined' ? 'undefined' : _typeof(initialState)) === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	
	    if (inst.componentWillMount) {
	      inst.componentWillMount();
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }
	
	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }
	
	    this._renderedComponent = this._instantiateReactComponent(renderedElement);
	
	    var markup = ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, this._processChildContext(context));
	    if (inst.componentDidMount) {
	      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	    }
	
	    return markup;
	  },
	
	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function unmountComponent() {
	    var inst = this._instance;
	
	    if (inst.componentWillUnmount) {
	      inst.componentWillUnmount();
	    }
	
	    ReactReconciler.unmountComponent(this._renderedComponent);
	    this._renderedComponent = null;
	    this._instance = null;
	
	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;
	
	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = null;
	    this._topLevelWrapper = null;
	
	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);
	
	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },
	
	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function _maskContext(context) {
	    var maskedContext = null;
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },
	
	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function _processContext(context) {
	    var maskedContext = this._maskContext(context);
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkPropTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);
	      }
	    }
	    return maskedContext;
	  },
	
	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function _processChildContext(currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    var childContext = inst.getChildContext && inst.getChildContext();
	    if (childContext) {
	      !(_typeof(Component.childContextTypes) === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	      if (process.env.NODE_ENV !== 'production') {
	        this._checkPropTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : invariant(false) : undefined;
	      }
	      return assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },
	
	  /**
	   * Processes props by setting default values for unspecified props and
	   * asserting that the props are valid. Does not mutate its argument; returns
	   * a new props object with defaults merged in.
	   *
	   * @param {object} newProps
	   * @return {object}
	   * @private
	   */
	  _processProps: function _processProps(newProps) {
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.propTypes) {
	        this._checkPropTypes(Component.propTypes, newProps, ReactPropTypeLocations.prop);
	      }
	    }
	    return newProps;
	  },
	
	  /**
	   * Assert that the props are valid
	   *
	   * @param {object} propTypes Map of prop name to a ReactPropType
	   * @param {object} props
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkPropTypes: function _checkPropTypes(propTypes, props, location) {
	    // TODO: Stop validating prop types here and only use the element
	    // validation.
	    var componentName = this.getName();
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error;
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually ' + 'from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
	          error = propTypes[propName](props, propName, componentName, location);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error instanceof Error) {
	          // We may want to extend this logic for similar errors in
	          // top-level render calls, so I'm abstracting it away into
	          // a function to minimize refactoring in the future
	          var addendum = getDeclarationErrorAddendum(this);
	
	          if (location === ReactPropTypeLocations.prop) {
	            // Preface gives us something to blacklist in warning module
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Composite propType: %s%s', error.message, addendum) : undefined;
	          } else {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Context Types: %s%s', error.message, addendum) : undefined;
	          }
	        }
	      }
	    }
	  },
	
	  receiveComponent: function receiveComponent(nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;
	
	    this._pendingElement = null;
	
	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },
	
	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function performUpdateIfNecessary(transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement || this._currentElement, transaction, this._context);
	    }
	
	    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    }
	  },
	
	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function updateComponent(transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;
	
	    var nextContext = this._context === nextUnmaskedContext ? inst.context : this._processContext(nextUnmaskedContext);
	    var nextProps;
	
	    // Distinguish between a props update versus a simple state update
	    if (prevParentElement === nextParentElement) {
	      // Skip checking prop types again -- we don't read inst.props to avoid
	      // warning for DOM component props in this upgrade
	      nextProps = nextParentElement.props;
	    } else {
	      nextProps = this._processProps(nextParentElement.props);
	      // An update here will schedule an update but immediately set
	      // _pendingStateQueue which will ensure that any state updates gets
	      // immediately reconciled instead of waiting for the next batch.
	
	      if (inst.componentWillReceiveProps) {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }
	
	    var nextState = this._processPendingState(nextProps, nextContext);
	
	    var shouldUpdate = this._pendingForceUpdate || !inst.shouldComponentUpdate || inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(typeof shouldUpdate !== 'undefined', '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : undefined;
	    }
	
	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },
	
	  _processPendingState: function _processPendingState(props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;
	
	    if (!queue) {
	      return inst.state;
	    }
	
	    if (replace && queue.length === 1) {
	      return queue[0];
	    }
	
	    var nextState = assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }
	
	    return nextState;
	  },
	
	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function _performComponentUpdate(nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var inst = this._instance;
	
	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }
	
	    if (inst.componentWillUpdate) {
	      inst.componentWillUpdate(nextProps, nextState, nextContext);
	    }
	
	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;
	
	    this._updateRenderedComponent(transaction, unmaskedContext);
	
	    if (hasComponentDidUpdate) {
	      transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	    }
	  },
	
	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function _updateRenderedComponent(transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      // These two IDs are actually the same! But nothing should rely on that.
	      var thisID = this._rootNodeID;
	      var prevComponentID = prevComponentInstance._rootNodeID;
	      ReactReconciler.unmountComponent(prevComponentInstance);
	
	      this._renderedComponent = this._instantiateReactComponent(nextRenderedElement);
	      var nextMarkup = ReactReconciler.mountComponent(this._renderedComponent, thisID, transaction, this._processChildContext(context));
	      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	    }
	  },
	
	  /**
	   * @protected
	   */
	  _replaceNodeWithMarkupByID: function _replaceNodeWithMarkupByID(prevComponentID, nextMarkup) {
	    ReactComponentEnvironment.replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	  },
	
	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function _renderValidatedComponentWithoutOwnerOrContext() {
	    var inst = this._instance;
	    var renderedComponent = inst.render();
	    if (process.env.NODE_ENV !== 'production') {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (typeof renderedComponent === 'undefined' && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedComponent = null;
	      }
	    }
	
	    return renderedComponent;
	  },
	
	  /**
	   * @private
	   */
	  _renderValidatedComponent: function _renderValidatedComponent() {
	    var renderedComponent;
	    ReactCurrentOwner.current = this;
	    try {
	      renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();
	    } finally {
	      ReactCurrentOwner.current = null;
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid ReactComponent must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	    return renderedComponent;
	  },
	
	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function attachRef(ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : invariant(false) : undefined;
	    var publicComponentInstance = component.getPublicInstance();
	    if (process.env.NODE_ENV !== 'production') {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : undefined;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },
	
	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function detachRef(ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },
	
	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function getName() {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },
	
	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function getPublicInstance() {
	    var inst = this._instance;
	    if (inst instanceof StatelessComponent) {
	      return null;
	    }
	    return inst;
	  },
	
	  // Stub
	  _instantiateReactComponent: null
	
	};
	
	ReactPerf.measureMethods(ReactCompositeComponentMixin, 'ReactCompositeComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent',
	  _renderValidatedComponent: '_renderValidatedComponent'
	});
	
	var ReactCompositeComponent = {
	
	  Mixin: ReactCompositeComponentMixin
	
	};
	
	module.exports = ReactCompositeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 63 */
/*!**************************************************!*\
  !*** ./~/react/lib/ReactComponentEnvironment.js ***!
  \**************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentEnvironment
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 12);
	
	var injected = false;
	
	var ReactComponentEnvironment = {
	
	  /**
	   * Optionally injectable environment dependent cleanup hook. (server vs.
	   * browser etc). Example: A browser system caches DOM nodes based on component
	   * ID and must remove that cache entry when this instance is unmounted.
	   */
	  unmountIDFromEnvironment: null,
	
	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkupByID: null,
	
	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,
	
	  injection: {
	    injectEnvironment: function injectEnvironment(environment) {
	      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : undefined;
	      ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;
	      ReactComponentEnvironment.replaceNodeWithMarkupByID = environment.replaceNodeWithMarkupByID;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }
	
	};
	
	module.exports = ReactComponentEnvironment;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 64 */
/*!***********************************************!*\
  !*** ./~/react/lib/ReactPropTypeLocations.js ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocations
	 */
	
	'use strict';
	
	var keyMirror = __webpack_require__(/*! fbjs/lib/keyMirror */ 16);
	
	var ReactPropTypeLocations = keyMirror({
	  prop: null,
	  context: null,
	  childContext: null
	});
	
	module.exports = ReactPropTypeLocations;

/***/ },
/* 65 */
/*!***************************************************!*\
  !*** ./~/react/lib/ReactPropTypeLocationNames.js ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocationNames
	 */
	
	'use strict';
	
	var ReactPropTypeLocationNames = {};
	
	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}
	
	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 66 */
/*!***************************************************!*\
  !*** ./~/react/lib/shouldUpdateReactComponent.js ***!
  \***************************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shouldUpdateReactComponent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }
	
	  var prevType = typeof prevElement === 'undefined' ? 'undefined' : _typeof(prevElement);
	  var nextType = typeof nextElement === 'undefined' ? 'undefined' : _typeof(nextElement);
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	  return false;
	}
	
	module.exports = shouldUpdateReactComponent;

/***/ },
/* 67 */
/*!********************************************!*\
  !*** ./~/react/lib/ReactEmptyComponent.js ***!
  \********************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponent
	 */
	
	'use strict';
	
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 41);
	var ReactEmptyComponentRegistry = __webpack_require__(/*! ./ReactEmptyComponentRegistry */ 43);
	var ReactReconciler = __webpack_require__(/*! ./ReactReconciler */ 49);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 38);
	
	var placeholderElement;
	
	var ReactEmptyComponentInjection = {
	  injectEmptyComponent: function injectEmptyComponent(component) {
	    placeholderElement = ReactElement.createElement(component);
	  }
	};
	
	var ReactEmptyComponent = function ReactEmptyComponent(instantiate) {
	  this._currentElement = null;
	  this._rootNodeID = null;
	  this._renderedComponent = instantiate(placeholderElement);
	};
	assign(ReactEmptyComponent.prototype, {
	  construct: function construct(element) {},
	  mountComponent: function mountComponent(rootID, transaction, context) {
	    ReactEmptyComponentRegistry.registerNullComponentID(rootID);
	    this._rootNodeID = rootID;
	    return ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, context);
	  },
	  receiveComponent: function receiveComponent() {},
	  unmountComponent: function unmountComponent(rootID, transaction, context) {
	    ReactReconciler.unmountComponent(this._renderedComponent);
	    ReactEmptyComponentRegistry.deregisterNullComponentID(this._rootNodeID);
	    this._rootNodeID = null;
	    this._renderedComponent = null;
	  }
	});
	
	ReactEmptyComponent.injection = ReactEmptyComponentInjection;
	
	module.exports = ReactEmptyComponent;

/***/ },
/* 68 */
/*!*********************************************!*\
  !*** ./~/react/lib/ReactNativeComponent.js ***!
  \*********************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNativeComponent
	 */
	
	'use strict';
	
	var assign = __webpack_require__(/*! ./Object.assign */ 38);
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 12);
	
	var autoGenerateWrapperClass = null;
	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around native tags.
	var tagToComponentClass = {};
	var textComponentClass = null;
	
	var ReactNativeComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function injectGenericComponentClass(componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function injectTextComponentClass(componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function injectComponentClasses(componentClasses) {
	    assign(tagToComponentClass, componentClasses);
	  }
	};
	
	/**
	 * Get a composite component wrapper class for a specific tag.
	 *
	 * @param {ReactElement} element The tag for which to get the class.
	 * @return {function} The React class constructor function.
	 */
	function getComponentClassForElement(element) {
	  if (typeof element.type === 'function') {
	    return element.type;
	  }
	  var tag = element.type;
	  var componentClass = tagToComponentClass[tag];
	  if (componentClass == null) {
	    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
	  }
	  return componentClass;
	}
	
	/**
	 * Get a native internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : undefined;
	  return new genericComponentClass(element.type, element.props);
	}
	
	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}
	
	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}
	
	var ReactNativeComponent = {
	  getComponentClassForElement: getComponentClassForElement,
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactNativeComponentInjection
	};
	
	module.exports = ReactNativeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 69 */
/*!*******************************************!*\
  !*** ./~/react/lib/validateDOMNesting.js ***!
  \*******************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule validateDOMNesting
	 */
	
	'use strict';
	
	var assign = __webpack_require__(/*! ./Object.assign */ 38);
	var emptyFunction = __webpack_require__(/*! fbjs/lib/emptyFunction */ 14);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 24);
	
	var validateDOMNesting = emptyFunction;
	
	if (process.env.NODE_ENV !== 'production') {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
	
	  var emptyAncestorInfo = {
	    parentTag: null,
	
	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,
	
	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };
	
	  var updatedAncestorInfo = function updatedAncestorInfo(oldInfo, tag, instance) {
	    var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };
	
	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }
	
	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }
	
	    ancestorInfo.parentTag = info;
	
	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }
	
	    return ancestorInfo;
	  };
	
	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function isTagValidWithParent(tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	    }
	
	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
	
	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;
	
	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }
	
	    return true;
	  };
	
	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function findInvalidAncestorForTag(tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':
	
	      case 'pre':
	      case 'listing':
	
	      case 'table':
	
	      case 'hr':
	
	      case 'xmp':
	
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;
	
	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
	
	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;
	
	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;
	
	      case 'button':
	        return ancestorInfo.buttonTagInScope;
	
	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;
	
	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }
	
	    return null;
	  };
	
	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function findOwnerStack(instance) {
	    if (!instance) {
	      return [];
	    }
	
	    var stack = [];
	    /*eslint-disable space-after-keywords */
	    do {
	      /*eslint-enable space-after-keywords */
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };
	
	  var didWarn = {};
	
	  validateDOMNesting = function validateDOMNesting(childTag, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.parentTag;
	    var parentTag = parentInfo && parentInfo.tag;
	
	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;
	
	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;
	
	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;
	
	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);
	
	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;
	
	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }
	
	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');
	
	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;
	
	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a child of <%s>. ' + 'See %s.%s', childTag, ancestorTag, ownerInfo, info) : undefined;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a descendant of ' + '<%s>. See %s.', childTag, ancestorTag, ownerInfo) : undefined;
	      }
	    }
	  };
	
	  validateDOMNesting.ancestorInfoContextKey = '__validateDOMNesting_ancestorInfo$' + Math.random().toString(36).slice(2);
	
	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;
	
	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.parentTag;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}
	
	module.exports = validateDOMNesting;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 70 */
/*!**********************************************!*\
  !*** ./~/react/lib/ReactDefaultInjection.js ***!
  \**********************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultInjection
	 */
	
	'use strict';
	
	var BeforeInputEventPlugin = __webpack_require__(/*! ./BeforeInputEventPlugin */ 71);
	var ChangeEventPlugin = __webpack_require__(/*! ./ChangeEventPlugin */ 79);
	var ClientReactRootIndex = __webpack_require__(/*! ./ClientReactRootIndex */ 82);
	var DefaultEventPluginOrder = __webpack_require__(/*! ./DefaultEventPluginOrder */ 83);
	var EnterLeaveEventPlugin = __webpack_require__(/*! ./EnterLeaveEventPlugin */ 84);
	var ExecutionEnvironment = __webpack_require__(/*! fbjs/lib/ExecutionEnvironment */ 8);
	var HTMLDOMPropertyConfig = __webpack_require__(/*! ./HTMLDOMPropertyConfig */ 88);
	var ReactBrowserComponentMixin = __webpack_require__(/*! ./ReactBrowserComponentMixin */ 89);
	var ReactComponentBrowserEnvironment = __webpack_require__(/*! ./ReactComponentBrowserEnvironment */ 25);
	var ReactDefaultBatchingStrategy = __webpack_require__(/*! ./ReactDefaultBatchingStrategy */ 91);
	var ReactDOMComponent = __webpack_require__(/*! ./ReactDOMComponent */ 92);
	var ReactDOMTextComponent = __webpack_require__(/*! ./ReactDOMTextComponent */ 5);
	var ReactEventListener = __webpack_require__(/*! ./ReactEventListener */ 117);
	var ReactInjection = __webpack_require__(/*! ./ReactInjection */ 120);
	var ReactInstanceHandles = __webpack_require__(/*! ./ReactInstanceHandles */ 44);
	var ReactMount = __webpack_require__(/*! ./ReactMount */ 27);
	var ReactReconcileTransaction = __webpack_require__(/*! ./ReactReconcileTransaction */ 124);
	var SelectEventPlugin = __webpack_require__(/*! ./SelectEventPlugin */ 129);
	var ServerReactRootIndex = __webpack_require__(/*! ./ServerReactRootIndex */ 130);
	var SimpleEventPlugin = __webpack_require__(/*! ./SimpleEventPlugin */ 131);
	var SVGDOMPropertyConfig = __webpack_require__(/*! ./SVGDOMPropertyConfig */ 140);
	
	var alreadyInjected = false;
	
	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;
	
	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);
	
	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
	  ReactInjection.EventPluginHub.injectMount(ReactMount);
	
	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });
	
	  ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent);
	
	  ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent);
	
	  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);
	
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);
	
	  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');
	
	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	
	  ReactInjection.RootIndex.injectCreateReactRootIndex(ExecutionEnvironment.canUseDOM ? ClientReactRootIndex.createReactRootIndex : ServerReactRootIndex.createReactRootIndex);
	
	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
	
	  if (process.env.NODE_ENV !== 'production') {
	    var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
	    if (/[?&]react_perf\b/.test(url)) {
	      var ReactDefaultPerf = __webpack_require__(/*! ./ReactDefaultPerf */ 141);
	      ReactDefaultPerf.start();
	    }
	  }
	}
	
	module.exports = {
	  inject: inject
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 71 */
/*!***********************************************!*\
  !*** ./~/react/lib/BeforeInputEventPlugin.js ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015 Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BeforeInputEventPlugin
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	var EventConstants = __webpack_require__(/*! ./EventConstants */ 29);
	var EventPropagators = __webpack_require__(/*! ./EventPropagators */ 72);
	var ExecutionEnvironment = __webpack_require__(/*! fbjs/lib/ExecutionEnvironment */ 8);
	var FallbackCompositionState = __webpack_require__(/*! ./FallbackCompositionState */ 73);
	var SyntheticCompositionEvent = __webpack_require__(/*! ./SyntheticCompositionEvent */ 75);
	var SyntheticInputEvent = __webpack_require__(/*! ./SyntheticInputEvent */ 77);
	
	var keyOf = __webpack_require__(/*! fbjs/lib/keyOf */ 78);
	
	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;
	
	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;
	
	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}
	
	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();
	
	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
	
	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return (typeof opera === 'undefined' ? 'undefined' : _typeof(opera)) === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}
	
	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBeforeInput: null }),
	      captured: keyOf({ onBeforeInputCapture: null })
	    },
	    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionEnd: null }),
	      captured: keyOf({ onCompositionEndCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionStart: null }),
	      captured: keyOf({ onCompositionStartCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionUpdate: null }),
	      captured: keyOf({ onCompositionUpdateCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  }
	};
	
	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;
	
	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}
	
	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionStart:
	      return eventTypes.compositionStart;
	    case topLevelTypes.topCompositionEnd:
	      return eventTypes.compositionEnd;
	    case topLevelTypes.topCompositionUpdate:
	      return eventTypes.compositionUpdate;
	  }
	}
	
	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;
	}
	
	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topKeyUp:
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case topLevelTypes.topKeyDown:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case topLevelTypes.topKeyPress:
	    case topLevelTypes.topMouseDown:
	    case topLevelTypes.topBlur:
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}
	
	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if ((typeof detail === 'undefined' ? 'undefined' : _typeof(detail)) === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}
	
	// Track the current IME composition fallback object, if any.
	var currentComposition = null;
	
	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;
	
	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }
	
	  if (!eventType) {
	    return null;
	  }
	
	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }
	
	  var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent, nativeEventTarget);
	
	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }
	
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}
	
	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionEnd:
	      return getDataFromCustomEvent(nativeEvent);
	    case topLevelTypes.topKeyPress:
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }
	
	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;
	
	    case topLevelTypes.topTextInput:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;
	
	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }
	
	      return chars;
	
	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}
	
	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  if (currentComposition) {
	    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }
	
	  switch (topLevelType) {
	    case topLevelTypes.topPaste:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case topLevelTypes.topKeyPress:
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case topLevelTypes.topCompositionEnd:
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}
	
	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	  var chars;
	
	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }
	
	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }
	
	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent, nativeEventTarget);
	
	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}
	
	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget)];
	  }
	};
	
	module.exports = BeforeInputEventPlugin;

/***/ },
/* 72 */
/*!*****************************************!*\
  !*** ./~/react/lib/EventPropagators.js ***!
  \*****************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPropagators
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(/*! ./EventConstants */ 29);
	var EventPluginHub = __webpack_require__(/*! ./EventPluginHub */ 30);
	
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 24);
	
	var accumulateInto = __webpack_require__(/*! ./accumulateInto */ 34);
	var forEachAccumulated = __webpack_require__(/*! ./forEachAccumulated */ 35);
	
	var PropagationPhases = EventConstants.PropagationPhases;
	var getListener = EventPluginHub.getListener;
	
	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(id, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(id, registrationName);
	}
	
	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(domID, upwards, event) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(domID, 'Dispatching id must not be null') : undefined;
	  }
	  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
	  var listener = listenerAtPhase(domID, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
	  }
	}
	
	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(event.dispatchMarker, accumulateDirectionalDispatches, event);
	  }
	}
	
	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhaseSkipTarget(event.dispatchMarker, accumulateDirectionalDispatches, event);
	  }
	}
	
	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(id, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(id, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
	    }
	  }
	}
	
	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event.dispatchMarker, null, event);
	  }
	}
	
	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}
	
	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}
	
	function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
	  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(fromID, toID, accumulateDispatches, leave, enter);
	}
	
	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}
	
	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};
	
	module.exports = EventPropagators;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 73 */
/*!*************************************************!*\
  !*** ./~/react/lib/FallbackCompositionState.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FallbackCompositionState
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var PooledClass = __webpack_require__(/*! ./PooledClass */ 55);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 38);
	var getTextContentAccessor = __webpack_require__(/*! ./getTextContentAccessor */ 74);
	
	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}
	
	assign(FallbackCompositionState.prototype, {
	  destructor: function destructor() {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },
	
	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function getText() {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },
	
	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function getData() {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }
	
	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;
	
	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }
	
	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }
	
	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});
	
	PooledClass.addPoolingTo(FallbackCompositionState);
	
	module.exports = FallbackCompositionState;

/***/ },
/* 74 */
/*!***********************************************!*\
  !*** ./~/react/lib/getTextContentAccessor.js ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getTextContentAccessor
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(/*! fbjs/lib/ExecutionEnvironment */ 8);
	
	var contentKey = null;
	
	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}
	
	module.exports = getTextContentAccessor;

/***/ },
/* 75 */
/*!**************************************************!*\
  !*** ./~/react/lib/SyntheticCompositionEvent.js ***!
  \**************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticCompositionEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(/*! ./SyntheticEvent */ 76);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);
	
	module.exports = SyntheticCompositionEvent;

/***/ },
/* 76 */
/*!***************************************!*\
  !*** ./~/react/lib/SyntheticEvent.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var PooledClass = __webpack_require__(/*! ./PooledClass */ 55);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 38);
	var emptyFunction = __webpack_require__(/*! fbjs/lib/emptyFunction */ 14);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 24);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function timeStamp(event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};
	
	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 */
	function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  this.dispatchConfig = dispatchConfig;
	  this.dispatchMarker = dispatchMarker;
	  this.nativeEvent = nativeEvent;
	  this.target = nativeEventTarget;
	  this.currentTarget = nativeEventTarget;
	
	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      this[propName] = nativeEvent[propName];
	    }
	  }
	
	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	}
	
	assign(SyntheticEvent.prototype, {
	
	  preventDefault: function preventDefault() {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `preventDefault` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
	    }
	    if (!event) {
	      return;
	    }
	
	    if (event.preventDefault) {
	      event.preventDefault();
	    } else {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },
	
	  stopPropagation: function stopPropagation() {
	    var event = this.nativeEvent;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `stopPropagation` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
	    }
	    if (!event) {
	      return;
	    }
	
	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else {
	      event.cancelBubble = true;
	    }
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },
	
	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function persist() {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },
	
	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,
	
	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function destructor() {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      this[propName] = null;
	    }
	    this.dispatchConfig = null;
	    this.dispatchMarker = null;
	    this.nativeEvent = null;
	  }
	
	});
	
	SyntheticEvent.Interface = EventInterface;
	
	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;
	
	  var prototype = Object.create(Super.prototype);
	  assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;
	
	  Class.Interface = assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;
	
	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};
	
	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);
	
	module.exports = SyntheticEvent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 77 */
/*!********************************************!*\
  !*** ./~/react/lib/SyntheticInputEvent.js ***!
  \********************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticInputEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(/*! ./SyntheticEvent */ 76);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);
	
	module.exports = SyntheticInputEvent;

/***/ },
/* 78 */
/*!*************************************!*\
  !*** ./~/react/~/fbjs/lib/keyOf.js ***!
  \*************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyOf
	 */
	
	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without losing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
	"use strict";
	
	var keyOf = function keyOf(oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};
	
	module.exports = keyOf;

/***/ },
/* 79 */
/*!******************************************!*\
  !*** ./~/react/lib/ChangeEventPlugin.js ***!
  \******************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ChangeEventPlugin
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(/*! ./EventConstants */ 29);
	var EventPluginHub = __webpack_require__(/*! ./EventPluginHub */ 30);
	var EventPropagators = __webpack_require__(/*! ./EventPropagators */ 72);
	var ExecutionEnvironment = __webpack_require__(/*! fbjs/lib/ExecutionEnvironment */ 8);
	var ReactUpdates = __webpack_require__(/*! ./ReactUpdates */ 53);
	var SyntheticEvent = __webpack_require__(/*! ./SyntheticEvent */ 76);
	
	var getEventTarget = __webpack_require__(/*! ./getEventTarget */ 80);
	var isEventSupported = __webpack_require__(/*! ./isEventSupported */ 39);
	var isTextInputElement = __webpack_require__(/*! ./isTextInputElement */ 81);
	var keyOf = __webpack_require__(/*! fbjs/lib/keyOf */ 78);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onChange: null }),
	      captured: keyOf({ onChangeCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]
	  }
	};
	
	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementID = null;
	var activeElementValue = null;
	var activeElementValueProp = null;
	
	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}
	
	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);
	}
	
	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementID, nativeEvent, getEventTarget(nativeEvent));
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	
	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}
	
	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}
	
	function startWatchingForChangeEventIE8(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}
	
	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementID = null;
	}
	
	function getTargetIDForChangeEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topChange) {
	    return topLevelTargetID;
	  }
	}
	function handleEventsForChangeEventIE8(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForChangeEventIE8();
	  }
	}
	
	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events
	  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);
	}
	
	/**
	 * (For old IE.) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp = {
	  get: function get() {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function set(val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};
	
	/**
	 * (For old IE.) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');
	
	  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
	  // on DOM elements
	  Object.defineProperty(activeElement, 'value', newValueProp);
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}
	
	/**
	 * (For old IE.) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }
	
	  // delete restores the original property definition
	  delete activeElement.value;
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);
	
	  activeElement = null;
	  activeElementID = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}
	
	/**
	 * (For old IE.) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;
	
	  manualDispatchChangeEvent(nativeEvent);
	}
	
	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetIDForInputEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topInput) {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return topLevelTargetID;
	  }
	}
	
	// For IE8 and IE9.
	function handleEventsForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForValueChange();
	  }
	}
	
	// For IE8 and IE9.
	function getTargetIDForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementID;
	    }
	  }
	}
	
	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}
	
	function getTargetIDForClickEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topClick) {
	    return topLevelTargetID;
	  }
	}
	
	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	
	    var getTargetIDFunc, handleEventFunc;
	    if (shouldUseChangeEvent(topLevelTarget)) {
	      if (doesChangeEventBubble) {
	        getTargetIDFunc = getTargetIDForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(topLevelTarget)) {
	      if (isInputEventSupported) {
	        getTargetIDFunc = getTargetIDForInputEvent;
	      } else {
	        getTargetIDFunc = getTargetIDForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(topLevelTarget)) {
	      getTargetIDFunc = getTargetIDForClickEvent;
	    }
	
	    if (getTargetIDFunc) {
	      var targetID = getTargetIDFunc(topLevelType, topLevelTarget, topLevelTargetID);
	      if (targetID) {
	        var event = SyntheticEvent.getPooled(eventTypes.change, targetID, nativeEvent, nativeEventTarget);
	        event.type = 'change';
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }
	
	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, topLevelTarget, topLevelTargetID);
	    }
	  }
	
	};
	
	module.exports = ChangeEventPlugin;

/***/ },
/* 80 */
/*!***************************************!*\
  !*** ./~/react/lib/getEventTarget.js ***!
  \***************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventTarget
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}
	
	module.exports = getEventTarget;

/***/ },
/* 81 */
/*!*******************************************!*\
  !*** ./~/react/lib/isTextInputElement.js ***!
  \*******************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextInputElement
	 */
	
	'use strict';
	
	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};
	
	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName && (nodeName === 'input' && supportedInputTypes[elem.type] || nodeName === 'textarea');
	}
	
	module.exports = isTextInputElement;

/***/ },
/* 82 */
/*!*********************************************!*\
  !*** ./~/react/lib/ClientReactRootIndex.js ***!
  \*********************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ClientReactRootIndex
	 * @typechecks
	 */
	
	'use strict';
	
	var nextReactRootIndex = 0;
	
	var ClientReactRootIndex = {
	  createReactRootIndex: function createReactRootIndex() {
	    return nextReactRootIndex++;
	  }
	};
	
	module.exports = ClientReactRootIndex;

/***/ },
/* 83 */
/*!************************************************!*\
  !*** ./~/react/lib/DefaultEventPluginOrder.js ***!
  \************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultEventPluginOrder
	 */
	
	'use strict';
	
	var keyOf = __webpack_require__(/*! fbjs/lib/keyOf */ 78);
	
	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DefaultEventPluginOrder = [keyOf({ ResponderEventPlugin: null }), keyOf({ SimpleEventPlugin: null }), keyOf({ TapEventPlugin: null }), keyOf({ EnterLeaveEventPlugin: null }), keyOf({ ChangeEventPlugin: null }), keyOf({ SelectEventPlugin: null }), keyOf({ BeforeInputEventPlugin: null })];
	
	module.exports = DefaultEventPluginOrder;

/***/ },
/* 84 */
/*!**********************************************!*\
  !*** ./~/react/lib/EnterLeaveEventPlugin.js ***!
  \**********************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EnterLeaveEventPlugin
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(/*! ./EventConstants */ 29);
	var EventPropagators = __webpack_require__(/*! ./EventPropagators */ 72);
	var SyntheticMouseEvent = __webpack_require__(/*! ./SyntheticMouseEvent */ 85);
	
	var ReactMount = __webpack_require__(/*! ./ReactMount */ 27);
	var keyOf = __webpack_require__(/*! fbjs/lib/keyOf */ 78);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	var getFirstReactDOM = ReactMount.getFirstReactDOM;
	
	var eventTypes = {
	  mouseEnter: {
	    registrationName: keyOf({ onMouseEnter: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  },
	  mouseLeave: {
	    registrationName: keyOf({ onMouseLeave: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  }
	};
	
	var extractedEvents = [null, null];
	
	var EnterLeaveEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }
	
	    var win;
	    if (topLevelTarget.window === topLevelTarget) {
	      // `topLevelTarget` is probably a window object.
	      win = topLevelTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = topLevelTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }
	
	    var from;
	    var to;
	    var fromID = '';
	    var toID = '';
	    if (topLevelType === topLevelTypes.topMouseOut) {
	      from = topLevelTarget;
	      fromID = topLevelTargetID;
	      to = getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement);
	      if (to) {
	        toID = ReactMount.getID(to);
	      } else {
	        to = win;
	      }
	      to = to || win;
	    } else {
	      from = win;
	      to = topLevelTarget;
	      toID = topLevelTargetID;
	    }
	
	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }
	
	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, fromID, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = from;
	    leave.relatedTarget = to;
	
	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, toID, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = to;
	    enter.relatedTarget = from;
	
	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);
	
	    extractedEvents[0] = leave;
	    extractedEvents[1] = enter;
	
	    return extractedEvents;
	  }
	
	};
	
	module.exports = EnterLeaveEventPlugin;

/***/ },
/* 85 */
/*!********************************************!*\
  !*** ./~/react/lib/SyntheticMouseEvent.js ***!
  \********************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticMouseEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(/*! ./SyntheticUIEvent */ 86);
	var ViewportMetrics = __webpack_require__(/*! ./ViewportMetrics */ 37);
	
	var getEventModifierState = __webpack_require__(/*! ./getEventModifierState */ 87);
	
	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function button(event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function relatedTarget(event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function pageX(event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function pageY(event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);
	
	module.exports = SyntheticMouseEvent;

/***/ },
/* 86 */
/*!*****************************************!*\
  !*** ./~/react/lib/SyntheticUIEvent.js ***!
  \*****************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticUIEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(/*! ./SyntheticEvent */ 76);
	
	var getEventTarget = __webpack_require__(/*! ./getEventTarget */ 80);
	
	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function view(event) {
	    if (event.view) {
	      return event.view;
	    }
	
	    var target = getEventTarget(event);
	    if (target != null && target.window === target) {
	      // target is a window object
	      return target;
	    }
	
	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function detail(event) {
	    return event.detail || 0;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);
	
	module.exports = SyntheticUIEvent;

/***/ },
/* 87 */
/*!**********************************************!*\
  !*** ./~/react/lib/getEventModifierState.js ***!
  \**********************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventModifierState
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */
	
	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};
	
	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}
	
	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}
	
	module.exports = getEventModifierState;

/***/ },
/* 88 */
/*!**********************************************!*\
  !*** ./~/react/lib/HTMLDOMPropertyConfig.js ***!
  \**********************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule HTMLDOMPropertyConfig
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(/*! ./DOMProperty */ 22);
	var ExecutionEnvironment = __webpack_require__(/*! fbjs/lib/ExecutionEnvironment */ 8);
	
	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;
	
	var hasSVG;
	if (ExecutionEnvironment.canUseDOM) {
	  var implementation = document.implementation;
	  hasSVG = implementation && implementation.hasFeature && implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');
	}
	
	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: null,
	    acceptCharset: null,
	    accessKey: null,
	    action: null,
	    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    allowTransparency: MUST_USE_ATTRIBUTE,
	    alt: null,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: null,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    cellPadding: null,
	    cellSpacing: null,
	    charSet: MUST_USE_ATTRIBUTE,
	    challenge: MUST_USE_ATTRIBUTE,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    classID: MUST_USE_ATTRIBUTE,
	    // To set className on SVG elements, it's necessary to use .setAttribute;
	    // this works on HTML elements too in all browsers except IE8. Conveniently,
	    // IE8 doesn't support SVG and so we can simply use the attribute in
	    // browsers that support SVG and the property in browsers that don't,
	    // regardless of whether the element is HTML or SVG.
	    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
	    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: null,
	    content: null,
	    contentEditable: null,
	    contextMenu: MUST_USE_ATTRIBUTE,
	    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    coords: null,
	    crossOrigin: null,
	    data: null, // For `<object />` acts as `src`.
	    dateTime: MUST_USE_ATTRIBUTE,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: null,
	    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: null,
	    encType: null,
	    form: MUST_USE_ATTRIBUTE,
	    formAction: MUST_USE_ATTRIBUTE,
	    formEncType: MUST_USE_ATTRIBUTE,
	    formMethod: MUST_USE_ATTRIBUTE,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: MUST_USE_ATTRIBUTE,
	    frameBorder: MUST_USE_ATTRIBUTE,
	    headers: null,
	    height: MUST_USE_ATTRIBUTE,
	    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    high: null,
	    href: null,
	    hrefLang: null,
	    htmlFor: null,
	    httpEquiv: null,
	    icon: null,
	    id: MUST_USE_PROPERTY,
	    inputMode: MUST_USE_ATTRIBUTE,
	    integrity: null,
	    is: MUST_USE_ATTRIBUTE,
	    keyParams: MUST_USE_ATTRIBUTE,
	    keyType: MUST_USE_ATTRIBUTE,
	    kind: null,
	    label: null,
	    lang: null,
	    list: MUST_USE_ATTRIBUTE,
	    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    low: null,
	    manifest: MUST_USE_ATTRIBUTE,
	    marginHeight: null,
	    marginWidth: null,
	    max: null,
	    maxLength: MUST_USE_ATTRIBUTE,
	    media: MUST_USE_ATTRIBUTE,
	    mediaGroup: null,
	    method: null,
	    min: null,
	    minLength: MUST_USE_ATTRIBUTE,
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: null,
	    nonce: MUST_USE_ATTRIBUTE,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: null,
	    pattern: null,
	    placeholder: null,
	    poster: null,
	    preload: null,
	    radioGroup: null,
	    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    rel: null,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    role: MUST_USE_ATTRIBUTE,
	    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: null,
	    sandbox: null,
	    scope: null,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: null,
	    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: null,
	    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: MUST_USE_ATTRIBUTE,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: null,
	    src: null,
	    srcDoc: MUST_USE_PROPERTY,
	    srcLang: null,
	    srcSet: MUST_USE_ATTRIBUTE,
	    start: HAS_NUMERIC_VALUE,
	    step: null,
	    style: null,
	    summary: null,
	    tabIndex: null,
	    target: null,
	    title: null,
	    type: null,
	    useMap: null,
	    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
	    width: MUST_USE_ATTRIBUTE,
	    wmode: MUST_USE_ATTRIBUTE,
	    wrap: null,
	
	    /**
	     * RDFa Properties
	     */
	    about: MUST_USE_ATTRIBUTE,
	    datatype: MUST_USE_ATTRIBUTE,
	    inlist: MUST_USE_ATTRIBUTE,
	    prefix: MUST_USE_ATTRIBUTE,
	    // property is also supported for OpenGraph in meta tags.
	    property: MUST_USE_ATTRIBUTE,
	    resource: MUST_USE_ATTRIBUTE,
	    'typeof': MUST_USE_ATTRIBUTE,
	    vocab: MUST_USE_ATTRIBUTE,
	
	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: MUST_USE_ATTRIBUTE,
	    autoCorrect: MUST_USE_ATTRIBUTE,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: null,
	    // color is for Safari mask-icon link
	    color: null,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: MUST_USE_ATTRIBUTE,
	    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    itemType: MUST_USE_ATTRIBUTE,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: MUST_USE_ATTRIBUTE,
	    itemRef: MUST_USE_ATTRIBUTE,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: null,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: MUST_USE_ATTRIBUTE,
	    // IE-only attribute that controls focus behavior
	    unselectable: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {
	    autoComplete: 'autocomplete',
	    autoFocus: 'autofocus',
	    autoPlay: 'autoplay',
	    autoSave: 'autosave',
	    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
	    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
	    encType: 'encoding',
	    hrefLang: 'hreflang',
	    radioGroup: 'radiogroup',
	    spellCheck: 'spellcheck',
	    srcDoc: 'srcdoc',
	    srcSet: 'srcset'
	  }
	};
	
	module.exports = HTMLDOMPropertyConfig;

/***/ },
/* 89 */
/*!***************************************************!*\
  !*** ./~/react/lib/ReactBrowserComponentMixin.js ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserComponentMixin
	 */
	
	'use strict';
	
	var ReactInstanceMap = __webpack_require__(/*! ./ReactInstanceMap */ 46);
	
	var findDOMNode = __webpack_require__(/*! ./findDOMNode */ 90);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 24);
	
	var didWarnKey = '_getDOMNodeDidWarn';
	
	var ReactBrowserComponentMixin = {
	  /**
	   * Returns the DOM node rendered by this component.
	   *
	   * @return {DOMElement} The root node of this component.
	   * @final
	   * @protected
	   */
	  getDOMNode: function getDOMNode() {
	    process.env.NODE_ENV !== 'production' ? warning(this.constructor[didWarnKey], '%s.getDOMNode(...) is deprecated. Please use ' + 'ReactDOM.findDOMNode(instance) instead.', ReactInstanceMap.get(this).getName() || this.tagName || 'Unknown') : undefined;
	    this.constructor[didWarnKey] = true;
	    return findDOMNode(this);
	  }
	};
	
	module.exports = ReactBrowserComponentMixin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 90 */
/*!************************************!*\
  !*** ./~/react/lib/findDOMNode.js ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule findDOMNode
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactCurrentOwner = __webpack_require__(/*! ./ReactCurrentOwner */ 4);
	var ReactInstanceMap = __webpack_require__(/*! ./ReactInstanceMap */ 46);
	var ReactMount = __webpack_require__(/*! ./ReactMount */ 27);
	
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 12);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 24);
	
	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if (process.env.NODE_ENV !== 'production') {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing getDOMNode or findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }
	  if (ReactInstanceMap.has(componentOrElement)) {
	    return ReactMount.getNodeFromInstance(componentOrElement);
	  }
	  !(componentOrElement.render == null || typeof componentOrElement.render !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : invariant(false) : undefined;
	   true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : invariant(false) : undefined;
	}
	
	module.exports = findDOMNode;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 91 */
/*!*****************************************************!*\
  !*** ./~/react/lib/ReactDefaultBatchingStrategy.js ***!
  \*****************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultBatchingStrategy
	 */
	
	'use strict';
	
	var ReactUpdates = __webpack_require__(/*! ./ReactUpdates */ 53);
	var Transaction = __webpack_require__(/*! ./Transaction */ 56);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 38);
	var emptyFunction = __webpack_require__(/*! fbjs/lib/emptyFunction */ 14);
	
	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function close() {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};
	
	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};
	
	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];
	
	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}
	
	assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function getTransactionWrappers() {
	    return TRANSACTION_WRAPPERS;
	  }
	});
	
	var transaction = new ReactDefaultBatchingStrategyTransaction();
	
	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,
	
	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function batchedUpdates(callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;
	
	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;
	
	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      callback(a, b, c, d, e);
	    } else {
	      transaction.perform(callback, null, a, b, c, d, e);
	    }
	  }
	};
	
	module.exports = ReactDefaultBatchingStrategy;

/***/ },
/* 92 */
/*!******************************************!*\
  !*** ./~/react/lib/ReactDOMComponent.js ***!
  \******************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponent
	 * @typechecks static-only
	 */
	
	/* global hasOwnProperty:true */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	var AutoFocusUtils = __webpack_require__(/*! ./AutoFocusUtils */ 93);
	var CSSPropertyOperations = __webpack_require__(/*! ./CSSPropertyOperations */ 95);
	var DOMProperty = __webpack_require__(/*! ./DOMProperty */ 22);
	var DOMPropertyOperations = __webpack_require__(/*! ./DOMPropertyOperations */ 21);
	var EventConstants = __webpack_require__(/*! ./EventConstants */ 29);
	var ReactBrowserEventEmitter = __webpack_require__(/*! ./ReactBrowserEventEmitter */ 28);
	var ReactComponentBrowserEnvironment = __webpack_require__(/*! ./ReactComponentBrowserEnvironment */ 25);
	var ReactDOMButton = __webpack_require__(/*! ./ReactDOMButton */ 103);
	var ReactDOMInput = __webpack_require__(/*! ./ReactDOMInput */ 104);
	var ReactDOMOption = __webpack_require__(/*! ./ReactDOMOption */ 108);
	var ReactDOMSelect = __webpack_require__(/*! ./ReactDOMSelect */ 111);
	var ReactDOMTextarea = __webpack_require__(/*! ./ReactDOMTextarea */ 112);
	var ReactMount = __webpack_require__(/*! ./ReactMount */ 27);
	var ReactMultiChild = __webpack_require__(/*! ./ReactMultiChild */ 113);
	var ReactPerf = __webpack_require__(/*! ./ReactPerf */ 17);
	var ReactUpdateQueue = __webpack_require__(/*! ./ReactUpdateQueue */ 52);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 38);
	var canDefineProperty = __webpack_require__(/*! ./canDefineProperty */ 42);
	var escapeTextContentForBrowser = __webpack_require__(/*! ./escapeTextContentForBrowser */ 20);
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 12);
	var isEventSupported = __webpack_require__(/*! ./isEventSupported */ 39);
	var keyOf = __webpack_require__(/*! fbjs/lib/keyOf */ 78);
	var setInnerHTML = __webpack_require__(/*! ./setInnerHTML */ 18);
	var setTextContent = __webpack_require__(/*! ./setTextContent */ 19);
	var shallowEqual = __webpack_require__(/*! fbjs/lib/shallowEqual */ 116);
	var validateDOMNesting = __webpack_require__(/*! ./validateDOMNesting */ 69);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 24);
	
	var deleteListener = ReactBrowserEventEmitter.deleteListener;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;
	
	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { 'string': true, 'number': true };
	
	var CHILDREN = keyOf({ children: null });
	var STYLE = keyOf({ style: null });
	var HTML = keyOf({ __html: null });
	
	var ELEMENT_NODE_TYPE = 1;
	
	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}
	
	var legacyPropsDescriptor;
	if (process.env.NODE_ENV !== 'production') {
	  legacyPropsDescriptor = {
	    props: {
	      enumerable: false,
	      get: function get() {
	        var component = this._reactInternalComponent;
	        process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .props of a DOM node; instead, ' + 'recreate the props as `render` did originally or read the DOM ' + 'properties/attributes directly from this node (e.g., ' + 'this.refs.box.className).%s', getDeclarationErrorAddendum(component)) : undefined;
	        return component._currentElement.props;
	      }
	    }
	  };
	}
	
	function legacyGetDOMNode() {
	  if (process.env.NODE_ENV !== 'production') {
	    var component = this._reactInternalComponent;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .getDOMNode() of a DOM node; ' + 'instead, use the node directly.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  return this;
	}
	
	function legacyIsMounted() {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .isMounted() of a DOM node.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  return !!component;
	}
	
	function legacySetStateEtc() {
	  if (process.env.NODE_ENV !== 'production') {
	    var component = this._reactInternalComponent;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setState(), .replaceState(), or ' + '.forceUpdate() of a DOM node. This is a no-op.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	}
	
	function legacySetProps(partialProps, callback) {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  if (!component) {
	    return;
	  }
	  ReactUpdateQueue.enqueueSetPropsInternal(component, partialProps);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
	  }
	}
	
	function legacyReplaceProps(partialProps, callback) {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .replaceProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  if (!component) {
	    return;
	  }
	  ReactUpdateQueue.enqueueReplacePropsInternal(component, partialProps);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
	  }
	}
	
	function friendlyStringify(obj) {
	  if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined becauses undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}
	
	var styleMutationWarning = {};
	
	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }
	
	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }
	
	  var hash = ownerName + '|' + componentName;
	
	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }
	
	  styleMutationWarning[hash] = true;
	
	  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : undefined;
	}
	
	/**
	 * @param {object} component
	 * @param {?object} props
	 */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (process.env.NODE_ENV !== 'production') {
	    if (voidElementTags[component._tag]) {
	      process.env.NODE_ENV !== 'production' ? warning(props.children == null && props.dangerouslySetInnerHTML == null, '%s is a void element tag and must not have `children` or ' + 'use `props.dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : undefined;
	    }
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : invariant(false) : undefined;
	    !(_typeof(props.dangerouslySetInnerHTML) === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' + 'for more information.') : invariant(false) : undefined;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : undefined;
	    process.env.NODE_ENV !== 'production' ? warning(!props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : undefined;
	  }
	  !(props.style == null || _typeof(props.style) === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, ' + 'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' + 'using JSX.%s', getDeclarationErrorAddendum(component)) : invariant(false) : undefined;
	}
	
	function enqueuePutListener(id, registrationName, listener, transaction) {
	  if (process.env.NODE_ENV !== 'production') {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : undefined;
	  }
	  var container = ReactMount.findReactContainerForID(id);
	  if (container) {
	    var doc = container.nodeType === ELEMENT_NODE_TYPE ? container.ownerDocument : container;
	    listenTo(registrationName, doc);
	  }
	  transaction.getReactMountReady().enqueue(putListener, {
	    id: id,
	    registrationName: registrationName,
	    listener: listener
	  });
	}
	
	function putListener() {
	  var listenerToPut = this;
	  ReactBrowserEventEmitter.putListener(listenerToPut.id, listenerToPut.registrationName, listenerToPut.listener);
	}
	
	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};
	
	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : invariant(false) : undefined;
	  var node = ReactMount.getNode(inst._rootNodeID);
	  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : invariant(false) : undefined;
	
	  switch (inst._tag) {
	    case 'iframe':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'video':
	    case 'audio':
	
	      inst._wrapperState.listeners = [];
	      // create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));
	        }
	      }
	
	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];
	      break;
	  }
	}
	
	function mountReadyInputWrapper() {
	  ReactDOMInput.mountReadyWrapper(this);
	}
	
	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}
	
	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special cased tags.
	
	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	};
	
	// NOTE: menuitem's close tag should be omitted, but that causes problems.
	var newlineEatingTags = {
	  'listing': true,
	  'pre': true,
	  'textarea': true
	};
	
	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.
	
	var voidElementTags = assign({
	  'menuitem': true
	}, omittedCloseTags);
	
	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name
	
	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = {}.hasOwnProperty;
	
	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : invariant(false) : undefined;
	    validatedTagCache[tag] = true;
	  }
	}
	
	function processChildContextDev(context, inst) {
	  // Pass down our tag name to child components for validation purposes
	  context = assign({}, context);
	  var info = context[validateDOMNesting.ancestorInfoContextKey];
	  context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(info, inst._tag, inst);
	  return context;
	}
	
	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}
	
	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(tag) {
	  validateDangerousTag(tag);
	  this._tag = tag.toLowerCase();
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._rootNodeID = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._nodeWithLegacyProperties = null;
	  if (process.env.NODE_ENV !== 'production') {
	    this._unprocessedContextDev = null;
	    this._processedContextDev = null;
	  }
	}
	
	ReactDOMComponent.displayName = 'ReactDOMComponent';
	
	ReactDOMComponent.Mixin = {
	
	  construct: function construct(element) {
	    this._currentElement = element;
	  },
	
	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {string} rootID The root DOM ID for this node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   * @return {string} The computed markup.
	   */
	  mountComponent: function mountComponent(rootID, transaction, context) {
	    this._rootNodeID = rootID;
	
	    var props = this._currentElement.props;
	
	    switch (this._tag) {
	      case 'iframe':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        this._wrapperState = {
	          listeners: null
	        };
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'button':
	        props = ReactDOMButton.getNativeProps(this, props, context);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, context);
	        props = ReactDOMInput.getNativeProps(this, props, context);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, context);
	        props = ReactDOMOption.getNativeProps(this, props, context);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, context);
	        props = ReactDOMSelect.getNativeProps(this, props, context);
	        context = ReactDOMSelect.processChildContext(this, props, context);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, context);
	        props = ReactDOMTextarea.getNativeProps(this, props, context);
	        break;
	    }
	
	    assertValidProps(this, props);
	    if (process.env.NODE_ENV !== 'production') {
	      if (context[validateDOMNesting.ancestorInfoContextKey]) {
	        validateDOMNesting(this._tag, this, context[validateDOMNesting.ancestorInfoContextKey]);
	      }
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      this._unprocessedContextDev = context;
	      this._processedContextDev = processChildContextDev(context, this);
	      context = this._processedContextDev;
	    }
	
	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
	      var el = ownerDocument.createElement(this._currentElement.type);
	      DOMPropertyOperations.setAttributeForID(el, this._rootNodeID);
	      // Populate node cache
	      ReactMount.getID(el);
	      this._updateDOMProperties({}, props, transaction, el);
	      this._createInitialChildren(transaction, props, context, el);
	      mountImage = el;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }
	
	    switch (this._tag) {
	      case 'input':
	        transaction.getReactMountReady().enqueue(mountReadyInputWrapper, this);
	      // falls through
	      case 'button':
	      case 'select':
	      case 'textarea':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	    }
	
	    return mountImage;
	  },
	
	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function _createOpenTagMarkupAndPutListeners(transaction, props) {
	    var ret = '<' + this._currentElement.type;
	
	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this._rootNodeID, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if (process.env.NODE_ENV !== 'production') {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          if (propKey !== CHILDREN) {
	            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	          }
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }
	
	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }
	
	    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
	    return ret + ' ' + markupForID;
	  },
	
	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function _createContentMarkup(transaction, props, context) {
	    var ret = '';
	
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[_typeof(props.children)] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },
	
	  _createInitialChildren: function _createInitialChildren(transaction, props, context, el) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        setInnerHTML(el, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[_typeof(props.children)] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        setTextContent(el, contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          el.appendChild(mountImages[i]);
	        }
	      }
	    }
	  },
	
	  /**
	   * Receives a next element and updates the component.
	   *
	   * @internal
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   */
	  receiveComponent: function receiveComponent(nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },
	
	  /**
	   * Updates a native DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function updateComponent(transaction, prevElement, nextElement, context) {
	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;
	
	    switch (this._tag) {
	      case 'button':
	        lastProps = ReactDOMButton.getNativeProps(this, lastProps);
	        nextProps = ReactDOMButton.getNativeProps(this, nextProps);
	        break;
	      case 'input':
	        ReactDOMInput.updateWrapper(this);
	        lastProps = ReactDOMInput.getNativeProps(this, lastProps);
	        nextProps = ReactDOMInput.getNativeProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getNativeProps(this, lastProps);
	        nextProps = ReactDOMOption.getNativeProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getNativeProps(this, lastProps);
	        nextProps = ReactDOMSelect.getNativeProps(this, nextProps);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        lastProps = ReactDOMTextarea.getNativeProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getNativeProps(this, nextProps);
	        break;
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      // If the context is reference-equal to the old one, pass down the same
	      // processed object so the update bailout in ReactReconciler behaves
	      // correctly (and identically in dev and prod). See #5005.
	      if (this._unprocessedContextDev !== context) {
	        this._unprocessedContextDev = context;
	        this._processedContextDev = processChildContextDev(context, this);
	      }
	      context = this._processedContextDev;
	    }
	
	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction, null);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);
	
	    if (!canDefineProperty && this._nodeWithLegacyProperties) {
	      this._nodeWithLegacyProperties.props = nextProps;
	    }
	
	    if (this._tag === 'select') {
	      // <select> value update needs to occur after <option> children
	      // reconciliation
	      transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	    }
	  },
	
	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?DOMElement} node
	   */
	  _updateDOMProperties: function _updateDOMProperties(lastProps, nextProps, transaction, node) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey)) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this._rootNodeID, propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        DOMPropertyOperations.deleteValueForProperty(node, propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps[propKey];
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if (process.env.NODE_ENV !== 'production') {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this._rootNodeID, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this._rootNodeID, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        if (propKey === CHILDREN) {
	          nextProp = null;
	        }
	        DOMPropertyOperations.setValueForAttribute(node, propKey, nextProp);
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertantly setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      if (!node) {
	        node = ReactMount.getNode(this._rootNodeID);
	      }
	      CSSPropertyOperations.setValueForStyles(node, styleUpdates);
	    }
	  },
	
	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   */
	  _updateDOMChildren: function _updateDOMChildren(lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[_typeof(lastProps.children)] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[_typeof(nextProps.children)] ? nextProps.children : null;
	
	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;
	
	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;
	
	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	    }
	
	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	    } else if (nextChildren != null) {
	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },
	
	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function unmountComponent() {
	    switch (this._tag) {
	      case 'iframe':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'input':
	        ReactDOMInput.unmountWrapper(this);
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
	         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is ' + 'impossible to unmount some top-level components (eg <html>, ' + '<head>, and <body>) reliably and efficiently. To fix this, have a ' + 'single top-level component that never unmounts render these ' + 'elements.', this._tag) : invariant(false) : undefined;
	        break;
	    }
	
	    this.unmountChildren();
	    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	    this._rootNodeID = null;
	    this._wrapperState = null;
	    if (this._nodeWithLegacyProperties) {
	      var node = this._nodeWithLegacyProperties;
	      node._reactInternalComponent = null;
	      this._nodeWithLegacyProperties = null;
	    }
	  },
	
	  getPublicInstance: function getPublicInstance() {
	    if (!this._nodeWithLegacyProperties) {
	      var node = ReactMount.getNode(this._rootNodeID);
	
	      node._reactInternalComponent = this;
	      node.getDOMNode = legacyGetDOMNode;
	      node.isMounted = legacyIsMounted;
	      node.setState = legacySetStateEtc;
	      node.replaceState = legacySetStateEtc;
	      node.forceUpdate = legacySetStateEtc;
	      node.setProps = legacySetProps;
	      node.replaceProps = legacyReplaceProps;
	
	      if (process.env.NODE_ENV !== 'production') {
	        if (canDefineProperty) {
	          Object.defineProperties(node, legacyPropsDescriptor);
	        } else {
	          // updateComponent will update this property on subsequent renders
	          node.props = this._currentElement.props;
	        }
	      } else {
	        // updateComponent will update this property on subsequent renders
	        node.props = this._currentElement.props;
	      }
	
	      this._nodeWithLegacyProperties = node;
	    }
	    return this._nodeWithLegacyProperties;
	  }
	
	};
	
	ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent'
	});
	
	assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);
	
	module.exports = ReactDOMComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 93 */
/*!***************************************!*\
  !*** ./~/react/lib/AutoFocusUtils.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule AutoFocusUtils
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactMount = __webpack_require__(/*! ./ReactMount */ 27);
	
	var findDOMNode = __webpack_require__(/*! ./findDOMNode */ 90);
	var focusNode = __webpack_require__(/*! fbjs/lib/focusNode */ 94);
	
	var Mixin = {
	  componentDidMount: function componentDidMount() {
	    if (this.props.autoFocus) {
	      focusNode(findDOMNode(this));
	    }
	  }
	};
	
	var AutoFocusUtils = {
	  Mixin: Mixin,
	
	  focusDOMComponent: function focusDOMComponent() {
	    focusNode(ReactMount.getNode(this._rootNodeID));
	  }
	};
	
	module.exports = AutoFocusUtils;

/***/ },
/* 94 */
/*!*****************************************!*\
  !*** ./~/react/~/fbjs/lib/focusNode.js ***!
  \*****************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule focusNode
	 */
	
	'use strict';
	
	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}
	
	module.exports = focusNode;

/***/ },
/* 95 */
/*!**********************************************!*\
  !*** ./~/react/lib/CSSPropertyOperations.js ***!
  \**********************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSPropertyOperations
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var CSSProperty = __webpack_require__(/*! ./CSSProperty */ 96);
	var ExecutionEnvironment = __webpack_require__(/*! fbjs/lib/ExecutionEnvironment */ 8);
	var ReactPerf = __webpack_require__(/*! ./ReactPerf */ 17);
	
	var camelizeStyleName = __webpack_require__(/*! fbjs/lib/camelizeStyleName */ 97);
	var dangerousStyleValue = __webpack_require__(/*! ./dangerousStyleValue */ 99);
	var hyphenateStyleName = __webpack_require__(/*! fbjs/lib/hyphenateStyleName */ 100);
	var memoizeStringOnly = __webpack_require__(/*! fbjs/lib/memoizeStringOnly */ 102);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 24);
	
	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});
	
	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}
	
	if (process.env.NODE_ENV !== 'production') {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
	
	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;
	
	  var warnedStyleNames = {};
	  var warnedStyleValues = {};
	
	  var warnHyphenatedStyleName = function warnHyphenatedStyleName(name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }
	
	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?', name, camelizeStyleName(name)) : undefined;
	  };
	
	  var warnBadVendoredStyleName = function warnBadVendoredStyleName(name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }
	
	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1)) : undefined;
	  };
	
	  var warnStyleValueWithSemicolon = function warnStyleValueWithSemicolon(name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }
	
	    warnedStyleValues[value] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon. ' + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, '')) : undefined;
	  };
	
	  /**
	   * @param {string} name
	   * @param {*} value
	   */
	  var warnValidStyle = function warnValidStyle(name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }
	  };
	}
	
	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {
	
	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @return {?string}
	   */
	  createMarkupForStyles: function createMarkupForStyles(styles) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styleValue);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue) + ';';
	      }
	    }
	    return serialized || null;
	  },
	
	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   */
	  setValueForStyles: function setValueForStyles(node, styles) {
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styles[styleName]);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
	      if (styleName === 'float') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }
	
	};
	
	ReactPerf.measureMethods(CSSPropertyOperations, 'CSSPropertyOperations', {
	  setValueForStyles: 'setValueForStyles'
	});
	
	module.exports = CSSPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 96 */
/*!************************************!*\
  !*** ./~/react/lib/CSSProperty.js ***!
  \************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSProperty
	 */
	
	'use strict';
	
	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,
	
	  // SVG-related properties
	  fillOpacity: true,
	  stopOpacity: true,
	  strokeDashoffset: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};
	
	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}
	
	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];
	
	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});
	
	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true
	  },
	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  },
	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true
	  }
	};
	
	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};
	
	module.exports = CSSProperty;

/***/ },
/* 97 */
/*!*************************************************!*\
  !*** ./~/react/~/fbjs/lib/camelizeStyleName.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelizeStyleName
	 * @typechecks
	 */
	
	'use strict';
	
	var camelize = __webpack_require__(/*! ./camelize */ 98);
	
	var msPattern = /^-ms-/;
	
	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}
	
	module.exports = camelizeStyleName;

/***/ },
/* 98 */
/*!****************************************!*\
  !*** ./~/react/~/fbjs/lib/camelize.js ***!
  \****************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelize
	 * @typechecks
	 */
	
	"use strict";
	
	var _hyphenPattern = /-(.)/g;
	
	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}
	
	module.exports = camelize;

/***/ },
/* 99 */
/*!********************************************!*\
  !*** ./~/react/lib/dangerousStyleValue.js ***!
  \********************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule dangerousStyleValue
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var CSSProperty = __webpack_require__(/*! ./CSSProperty */ 96);
	
	var isUnitlessNumber = CSSProperty.isUnitlessNumber;
	
	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901
	
	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }
	
	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }
	
	  if (typeof value === 'string') {
	    value = value.trim();
	  }
	  return value + 'px';
	}
	
	module.exports = dangerousStyleValue;

/***/ },
/* 100 */
/*!**************************************************!*\
  !*** ./~/react/~/fbjs/lib/hyphenateStyleName.js ***!
  \**************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenateStyleName
	 * @typechecks
	 */
	
	'use strict';
	
	var hyphenate = __webpack_require__(/*! ./hyphenate */ 101);
	
	var msPattern = /^ms-/;
	
	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}
	
	module.exports = hyphenateStyleName;

/***/ },
/* 101 */
/*!*****************************************!*\
  !*** ./~/react/~/fbjs/lib/hyphenate.js ***!
  \*****************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenate
	 * @typechecks
	 */
	
	'use strict';
	
	var _uppercasePattern = /([A-Z])/g;
	
	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}
	
	module.exports = hyphenate;

/***/ },
/* 102 */
/*!*************************************************!*\
  !*** ./~/react/~/fbjs/lib/memoizeStringOnly.js ***!
  \*************************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule memoizeStringOnly
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 *
	 * @param {function} callback
	 * @return {function}
	 */
	
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}
	
	module.exports = memoizeStringOnly;

/***/ },
/* 103 */
/*!***************************************!*\
  !*** ./~/react/lib/ReactDOMButton.js ***!
  \***************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMButton
	 */
	
	'use strict';
	
	var mouseListenerNames = {
	  onClick: true,
	  onDoubleClick: true,
	  onMouseDown: true,
	  onMouseMove: true,
	  onMouseUp: true,
	
	  onClickCapture: true,
	  onDoubleClickCapture: true,
	  onMouseDownCapture: true,
	  onMouseMoveCapture: true,
	  onMouseUpCapture: true
	};
	
	/**
	 * Implements a <button> native component that does not receive mouse events
	 * when `disabled` is set.
	 */
	var ReactDOMButton = {
	  getNativeProps: function getNativeProps(inst, props, context) {
	    if (!props.disabled) {
	      return props;
	    }
	
	    // Copy the props, except the mouse listeners
	    var nativeProps = {};
	    for (var key in props) {
	      if (props.hasOwnProperty(key) && !mouseListenerNames[key]) {
	        nativeProps[key] = props[key];
	      }
	    }
	
	    return nativeProps;
	  }
	};
	
	module.exports = ReactDOMButton;

/***/ },
/* 104 */
/*!**************************************!*\
  !*** ./~/react/lib/ReactDOMInput.js ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMInput
	 */
	
	'use strict';
	
	var ReactDOMIDOperations = __webpack_require__(/*! ./ReactDOMIDOperations */ 26);
	var LinkedValueUtils = __webpack_require__(/*! ./LinkedValueUtils */ 105);
	var ReactMount = __webpack_require__(/*! ./ReactMount */ 27);
	var ReactUpdates = __webpack_require__(/*! ./ReactUpdates */ 53);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 38);
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 12);
	
	var instancesByReactID = {};
	
	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}
	
	/**
	 * Implements an <input> native component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = {
	  getNativeProps: function getNativeProps(inst, props, context) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);
	
	    var nativeProps = assign({}, props, {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange
	    });
	
	    return nativeProps;
	  },
	
	  mountWrapper: function mountWrapper(inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);
	    }
	
	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.defaultChecked || false,
	      initialValue: defaultValue != null ? defaultValue : null,
	      onChange: _handleChange.bind(inst)
	    };
	  },
	
	  mountReadyWrapper: function mountReadyWrapper(inst) {
	    // Can't be in mountWrapper or else server rendering leaks.
	    instancesByReactID[inst._rootNodeID] = inst;
	  },
	
	  unmountWrapper: function unmountWrapper(inst) {
	    delete instancesByReactID[inst._rootNodeID];
	  },
	
	  updateWrapper: function updateWrapper(inst) {
	    var props = inst._currentElement.props;
	
	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'checked', checked || false);
	    }
	
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
	    }
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	
	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	
	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactMount.getNode(this._rootNodeID);
	    var queryRoot = rootNode;
	
	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }
	
	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
	
	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React with non-React.
	      var otherID = ReactMount.getID(otherNode);
	      !otherID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : undefined;
	      var otherInstance = instancesByReactID[otherID];
	      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(false) : undefined;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }
	
	  return returnValue;
	}
	
	module.exports = ReactDOMInput;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 105 */
/*!*****************************************!*\
  !*** ./~/react/lib/LinkedValueUtils.js ***!
  \*****************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedValueUtils
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactPropTypes = __webpack_require__(/*! ./ReactPropTypes */ 106);
	var ReactPropTypeLocations = __webpack_require__(/*! ./ReactPropTypeLocations */ 64);
	
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 12);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 24);
	
	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};
	
	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use ' + 'checkedLink, you probably don\'t want to use valueLink and vice versa.') : invariant(false) : undefined;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want ' + 'to use value or onChange, you probably don\'t want to use valueLink.') : invariant(false) : undefined;
	}
	
	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. ' + 'If you want to use checked or onChange, you probably don\'t want to ' + 'use checkedLink') : invariant(false) : undefined;
	}
	
	var propTypes = {
	  value: function value(props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function checked(props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: ReactPropTypes.func
	};
	
	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  checkPropTypes: function checkPropTypes(tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop);
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;
	
	        var addendum = getDeclarationErrorAddendum(owner);
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : undefined;
	      }
	    }
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function getValue(inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function getChecked(inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @param {SyntheticEvent} event change event to handle
	   */
	  executeOnChange: function executeOnChange(inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  }
	};
	
	module.exports = LinkedValueUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 106 */
/*!***************************************!*\
  !*** ./~/react/lib/ReactPropTypes.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypes
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 41);
	var ReactPropTypeLocationNames = __webpack_require__(/*! ./ReactPropTypeLocationNames */ 65);
	
	var emptyFunction = __webpack_require__(/*! fbjs/lib/emptyFunction */ 14);
	var getIteratorFn = __webpack_require__(/*! ./getIteratorFn */ 107);
	
	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */
	
	var ANONYMOUS = '<<anonymous>>';
	
	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),
	
	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: createElementTypeChecker(),
	  instanceOf: createInstanceTypeChecker,
	  node: createNodeChecker(),
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};
	
	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName, location, propFullName) {
	    componentName = componentName || ANONYMOUS;
	    propFullName = propFullName || propName;
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location, propFullName);
	    }
	  }
	
	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);
	
	  return chainedCheckType;
	}
	
	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);
	
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}
	
	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']');
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!ReactElement.isValidElement(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a single ReactElement.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      var actualClassName = getClassName(props[propName]);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createEnumTypeChecker(expectedValues) {
	  if (!Array.isArray(expectedValues)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOf, expected an instance of array.');
	    });
	  }
	
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (propValue === expectedValues[i]) {
	        return null;
	      }
	    }
	
	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  if (!Array.isArray(arrayOfTypeCheckers)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOfType, expected an instance of array.');
	    });
	  }
	
	  function validate(props, propName, componentName, location, propFullName) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location, propFullName) == null) {
	        return null;
	      }
	    }
	
	    var locationName = ReactPropTypeLocationNames[location];
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createNodeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location, propFullName + '.' + key);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function isNode(propValue) {
	  switch (typeof propValue === 'undefined' ? 'undefined' : _typeof(propValue)) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }
	
	      var iteratorFn = getIteratorFn(propValue);
	      if (iteratorFn) {
	        var iterator = iteratorFn.call(propValue);
	        var step;
	        if (iteratorFn !== propValue.entries) {
	          while (!(step = iterator.next()).done) {
	            if (!isNode(step.value)) {
	              return false;
	            }
	          }
	        } else {
	          // Iterator will provide entry [k,v] tuples rather than values.
	          while (!(step = iterator.next()).done) {
	            var entry = step.value;
	            if (entry) {
	              if (!isNode(entry[1])) {
	                return false;
	              }
	            }
	          }
	        }
	      } else {
	        return false;
	      }
	
	      return true;
	    default:
	      return false;
	  }
	}
	
	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue === 'undefined' ? 'undefined' : _typeof(propValue);
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  return propType;
	}
	
	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}
	
	// Returns class name of the object, if any.
	function getClassName(propValue) {
	  if (!propValue.constructor || !propValue.constructor.name) {
	    return '<<anonymous>>';
	  }
	  return propValue.constructor.name;
	}
	
	module.exports = ReactPropTypes;

/***/ },
/* 107 */
/*!**************************************!*\
  !*** ./~/react/lib/getIteratorFn.js ***!
  \**************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getIteratorFn
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/* global Symbol */
	
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
	
	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}
	
	module.exports = getIteratorFn;

/***/ },
/* 108 */
/*!***************************************!*\
  !*** ./~/react/lib/ReactDOMOption.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMOption
	 */
	
	'use strict';
	
	var ReactChildren = __webpack_require__(/*! ./ReactChildren */ 109);
	var ReactDOMSelect = __webpack_require__(/*! ./ReactDOMSelect */ 111);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 38);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 24);
	
	var valueContextKey = ReactDOMSelect.valueContextKey;
	
	/**
	 * Implements an <option> native component that warns when `selected` is set.
	 */
	var ReactDOMOption = {
	  mountWrapper: function mountWrapper(inst, props, context) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : undefined;
	    }
	
	    // Look up whether this option is 'selected' via context
	    var selectValue = context[valueContextKey];
	
	    // If context key is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === '' + props.value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === '' + props.value;
	      }
	    }
	
	    inst._wrapperState = { selected: selected };
	  },
	
	  getNativeProps: function getNativeProps(inst, props, context) {
	    var nativeProps = assign({ selected: undefined, children: undefined }, props);
	
	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      nativeProps.selected = inst._wrapperState.selected;
	    }
	
	    var content = '';
	
	    // Flatten children and warn if they aren't strings or numbers;
	    // invalid types are ignored.
	    ReactChildren.forEach(props.children, function (child) {
	      if (child == null) {
	        return;
	      }
	      if (typeof child === 'string' || typeof child === 'number') {
	        content += child;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : undefined;
	      }
	    });
	
	    nativeProps.children = content;
	    return nativeProps;
	  }
	
	};
	
	module.exports = ReactDOMOption;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 109 */
/*!**************************************!*\
  !*** ./~/react/lib/ReactChildren.js ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildren
	 */
	
	'use strict';
	
	var PooledClass = __webpack_require__(/*! ./PooledClass */ 55);
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 41);
	
	var emptyFunction = __webpack_require__(/*! fbjs/lib/emptyFunction */ 14);
	var traverseAllChildren = __webpack_require__(/*! ./traverseAllChildren */ 110);
	
	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;
	
	var userProvidedKeyEscapeRegex = /\/(?!\/)/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '//');
	}
	
	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);
	
	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;
	
	  func.call(context, child, bookKeeping.count++);
	}
	
	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}
	
	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);
	
	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result;
	  var keyPrefix = bookKeeping.keyPrefix;
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;
	
	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild !== child ? escapeUserProvidedKey(mappedChild.key || '') + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}
	
	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}
	
	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}
	
	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}
	
	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}
	
	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}
	
	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};
	
	module.exports = ReactChildren;

/***/ },
/* 110 */
/*!********************************************!*\
  !*** ./~/react/lib/traverseAllChildren.js ***!
  \********************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule traverseAllChildren
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	var ReactCurrentOwner = __webpack_require__(/*! ./ReactCurrentOwner */ 4);
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 41);
	var ReactInstanceHandles = __webpack_require__(/*! ./ReactInstanceHandles */ 44);
	
	var getIteratorFn = __webpack_require__(/*! ./getIteratorFn */ 107);
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 12);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 24);
	
	var SEPARATOR = ReactInstanceHandles.SEPARATOR;
	var SUBSEPARATOR = ':';
	
	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */
	
	var userProvidedKeyEscaperLookup = {
	  '=': '=0',
	  '.': '=1',
	  ':': '=2'
	};
	
	var userProvidedKeyEscapeRegex = /[=.:]/g;
	
	var didWarnAboutMaps = false;
	
	function userProvidedKeyEscaper(match) {
	  return userProvidedKeyEscaperLookup[match];
	}
	
	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  if (component && component.key != null) {
	    // Explicit key
	    return wrapUserProvidedKey(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}
	
	/**
	 * Escape a component key so that it is safe to use in a reactid.
	 *
	 * @param {*} text Component key to be escaped.
	 * @return {string} An escaped string.
	 */
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, userProvidedKeyEscaper);
	}
	
	/**
	 * Wrap a `key` value explicitly provided by the user to distinguish it from
	 * implicitly-generated keys generated by a component's index in its parent.
	 *
	 * @param {string} key Value of a user-provided `key` attribute
	 * @return {string}
	 */
	function wrapUserProvidedKey(key) {
	  return '$' + escapeUserProvidedKey(key);
	}
	
	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children === 'undefined' ? 'undefined' : _typeof(children);
	
	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }
	
	  if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }
	
	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
	
	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.') : undefined;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + wrapUserProvidedKey(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : invariant(false) : undefined;
	    }
	  }
	
	  return subtreeCount;
	}
	
	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }
	
	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}
	
	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 111 */
/*!***************************************!*\
  !*** ./~/react/lib/ReactDOMSelect.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelect
	 */
	
	'use strict';
	
	var LinkedValueUtils = __webpack_require__(/*! ./LinkedValueUtils */ 105);
	var ReactMount = __webpack_require__(/*! ./ReactMount */ 27);
	var ReactUpdates = __webpack_require__(/*! ./ReactUpdates */ 53);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 38);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 24);
	
	var valueContextKey = '__ReactDOMSelect_value$' + Math.random().toString(36).slice(2);
	
	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;
	
	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);
	
	    if (value != null) {
	      updateOptions(this, Boolean(props.multiple), value);
	    }
	  }
	}
	
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	var valuePropNames = ['value', 'defaultValue'];
	
	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);
	
	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    if (props.multiple) {
	      process.env.NODE_ENV !== 'production' ? warning(Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
	    } else {
	      process.env.NODE_ENV !== 'production' ? warning(!Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
	    }
	  }
	}
	
	/**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactMount.getNode(inst._rootNodeID).options;
	
	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}
	
	/**
	 * Implements a <select> native component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = {
	  valueContextKey: valueContextKey,
	
	  getNativeProps: function getNativeProps(inst, props, context) {
	    return assign({}, props, {
	      onChange: inst._wrapperState.onChange,
	      value: undefined
	    });
	  },
	
	  mountWrapper: function mountWrapper(inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkSelectPropTypes(inst, props);
	    }
	
	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple)
	    };
	  },
	
	  processChildContext: function processChildContext(inst, props, context) {
	    // Pass down initial value so initial generated markup has correct
	    // `selected` attributes
	    var childContext = assign({}, context);
	    childContext[valueContextKey] = inst._wrapperState.initialValue;
	    return childContext;
	  },
	
	  postUpdateWrapper: function postUpdateWrapper(inst) {
	    var props = inst._currentElement.props;
	
	    // After the initial mount, we control selected-ness manually so don't pass
	    // the context value down
	    inst._wrapperState.initialValue = undefined;
	
	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);
	
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	
	  this._wrapperState.pendingUpdate = true;
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}
	
	module.exports = ReactDOMSelect;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 112 */
/*!*****************************************!*\
  !*** ./~/react/lib/ReactDOMTextarea.js ***!
  \*****************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextarea
	 */
	
	'use strict';
	
	var LinkedValueUtils = __webpack_require__(/*! ./LinkedValueUtils */ 105);
	var ReactDOMIDOperations = __webpack_require__(/*! ./ReactDOMIDOperations */ 26);
	var ReactUpdates = __webpack_require__(/*! ./ReactUpdates */ 53);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 38);
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 12);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 24);
	
	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}
	
	/**
	 * Implements a <textarea> native component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = {
	  getNativeProps: function getNativeProps(inst, props, context) {
	    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : undefined;
	
	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.
	    var nativeProps = assign({}, props, {
	      defaultValue: undefined,
	      value: undefined,
	      children: inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange
	    });
	
	    return nativeProps;
	  },
	
	  mountWrapper: function mountWrapper(inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	    }
	
	    var defaultValue = props.defaultValue;
	    // TODO (yungsters): Remove support for children content in <textarea>.
	    var children = props.children;
	    if (children != null) {
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : undefined;
	      }
	      !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : undefined;
	      if (Array.isArray(children)) {
	        !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : undefined;
	        children = children[0];
	      }
	
	      defaultValue = '' + children;
	    }
	    if (defaultValue == null) {
	      defaultValue = '';
	    }
	    var value = LinkedValueUtils.getValue(props);
	
	    inst._wrapperState = {
	      // We save the initial value so that `ReactDOMComponent` doesn't update
	      // `textContent` (unnecessary since we update value).
	      // The initial value can be a boolean or object so that's why it's
	      // forced to be a string.
	      initialValue: '' + (value != null ? value : defaultValue),
	      onChange: _handleChange.bind(inst)
	    };
	  },
	
	  updateWrapper: function updateWrapper(inst) {
	    var props = inst._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
	    }
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}
	
	module.exports = ReactDOMTextarea;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 113 */
/*!****************************************!*\
  !*** ./~/react/lib/ReactMultiChild.js ***!
  \****************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChild
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactComponentEnvironment = __webpack_require__(/*! ./ReactComponentEnvironment */ 63);
	var ReactMultiChildUpdateTypes = __webpack_require__(/*! ./ReactMultiChildUpdateTypes */ 15);
	
	var ReactCurrentOwner = __webpack_require__(/*! ./ReactCurrentOwner */ 4);
	var ReactReconciler = __webpack_require__(/*! ./ReactReconciler */ 49);
	var ReactChildReconciler = __webpack_require__(/*! ./ReactChildReconciler */ 114);
	
	var flattenChildren = __webpack_require__(/*! ./flattenChildren */ 115);
	
	/**
	 * Updating children of a component may trigger recursive updates. The depth is
	 * used to batch recursive updates to render markup more efficiently.
	 *
	 * @type {number}
	 * @private
	 */
	var updateDepth = 0;
	
	/**
	 * Queue of update configuration objects.
	 *
	 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
	 *
	 * @type {array<object>}
	 * @private
	 */
	var updateQueue = [];
	
	/**
	 * Queue of markup to be rendered.
	 *
	 * @type {array<string>}
	 * @private
	 */
	var markupQueue = [];
	
	/**
	 * Enqueues markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function enqueueInsertMarkup(parentID, markup, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
	    markupIndex: markupQueue.push(markup) - 1,
	    content: null,
	    fromIndex: null,
	    toIndex: toIndex
	  });
	}
	
	/**
	 * Enqueues moving an existing element to another index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function enqueueMove(parentID, fromIndex, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
	    markupIndex: null,
	    content: null,
	    fromIndex: fromIndex,
	    toIndex: toIndex
	  });
	}
	
	/**
	 * Enqueues removing an element at an index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function enqueueRemove(parentID, fromIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
	    markupIndex: null,
	    content: null,
	    fromIndex: fromIndex,
	    toIndex: null
	  });
	}
	
	/**
	 * Enqueues setting the markup of a node.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
	function enqueueSetMarkup(parentID, markup) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.SET_MARKUP,
	    markupIndex: null,
	    content: markup,
	    fromIndex: null,
	    toIndex: null
	  });
	}
	
	/**
	 * Enqueues setting the text content.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function enqueueTextContent(parentID, textContent) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
	    markupIndex: null,
	    content: textContent,
	    fromIndex: null,
	    toIndex: null
	  });
	}
	
	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue() {
	  if (updateQueue.length) {
	    ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);
	    clearQueue();
	  }
	}
	
	/**
	 * Clears any enqueued updates.
	 *
	 * @private
	 */
	function clearQueue() {
	  updateQueue.length = 0;
	  markupQueue.length = 0;
	}
	
	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {
	
	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {
	
	    _reconcilerInstantiateChildren: function _reconcilerInstantiateChildren(nestedChildren, transaction, context) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },
	
	    _reconcilerUpdateChildren: function _reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context) {
	      var nextChildren;
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements);
	      return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
	    },
	
	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function mountChildren(nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;
	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	          var rootID = this._rootNodeID + name;
	          var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }
	      return mountImages;
	    },
	
	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function updateTextContent(nextContent) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        // TODO: The setTextContent operation should be enough
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChild(prevChildren[name]);
	          }
	        }
	        // Set new text content.
	        this.setTextContent(nextContent);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },
	
	    /**
	     * Replaces any rendered children with a markup string.
	     *
	     * @param {string} nextMarkup String of markup.
	     * @internal
	     */
	    updateMarkup: function updateMarkup(nextMarkup) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChildByName(prevChildren[name], name);
	          }
	        }
	        this.setMarkup(nextMarkup);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },
	
	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function updateChildren(nextNestedChildrenElements, transaction, context) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        this._updateChildren(nextNestedChildrenElements, transaction, context);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },
	
	    /**
	     * Improve performance by isolating this hot code path from the try/catch
	     * block in `updateChildren`.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function _updateChildren(nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);
	      this._renderedChildren = nextChildren;
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var lastIndex = 0;
	      var nextIndex = 0;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          this.moveChild(prevChild, nextIndex, lastIndex);
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            this._unmountChild(prevChild);
	          }
	          // The child must be instantiated before it's mounted.
	          this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);
	        }
	        nextIndex++;
	      }
	      // Remove children that are no longer present.
	      for (name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	          this._unmountChild(prevChildren[name]);
	        }
	      }
	    },
	
	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted.
	     *
	     * @internal
	     */
	    unmountChildren: function unmountChildren() {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren);
	      this._renderedChildren = null;
	    },
	
	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function moveChild(child, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
	      }
	    },
	
	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function createChild(child, mountImage) {
	      enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);
	    },
	
	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function removeChild(child) {
	      enqueueRemove(this._rootNodeID, child._mountIndex);
	    },
	
	    /**
	     * Sets this text content string.
	     *
	     * @param {string} textContent Text content to set.
	     * @protected
	     */
	    setTextContent: function setTextContent(textContent) {
	      enqueueTextContent(this._rootNodeID, textContent);
	    },
	
	    /**
	     * Sets this markup string.
	     *
	     * @param {string} markup Markup to set.
	     * @protected
	     */
	    setMarkup: function setMarkup(markup) {
	      enqueueSetMarkup(this._rootNodeID, markup);
	    },
	
	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildByNameAtIndex: function _mountChildByNameAtIndex(child, name, index, transaction, context) {
	      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	      var rootID = this._rootNodeID + name;
	      var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
	      child._mountIndex = index;
	      this.createChild(child, mountImage);
	    },
	
	    /**
	     * Unmounts a rendered child.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @private
	     */
	    _unmountChild: function _unmountChild(child) {
	      this.removeChild(child);
	      child._mountIndex = null;
	    }
	
	  }
	
	};
	
	module.exports = ReactMultiChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 114 */
/*!*********************************************!*\
  !*** ./~/react/lib/ReactChildReconciler.js ***!
  \*********************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildReconciler
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactReconciler = __webpack_require__(/*! ./ReactReconciler */ 49);
	
	var instantiateReactComponent = __webpack_require__(/*! ./instantiateReactComponent */ 61);
	var shouldUpdateReactComponent = __webpack_require__(/*! ./shouldUpdateReactComponent */ 66);
	var traverseAllChildren = __webpack_require__(/*! ./traverseAllChildren */ 110);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 24);
	
	function instantiateChild(childInstances, child, name) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child, null);
	  }
	}
	
	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function instantiateChildren(nestedChildNodes, transaction, context) {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};
	    traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    return childInstances;
	  },
	
	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextChildren Flat child element maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function updateChildren(prevChildren, nextChildren, transaction, context) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return null;
	    }
	    var name;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      var prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          ReactReconciler.unmountComponent(prevChild, name);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement, null);
	        nextChildren[name] = nextChildInstance;
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        ReactReconciler.unmountComponent(prevChildren[name]);
	      }
	    }
	    return nextChildren;
	  },
	
	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function unmountChildren(renderedChildren) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild);
	      }
	    }
	  }
	
	};
	
	module.exports = ReactChildReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 115 */
/*!****************************************!*\
  !*** ./~/react/lib/flattenChildren.js ***!
  \****************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule flattenChildren
	 */
	
	'use strict';
	
	var traverseAllChildren = __webpack_require__(/*! ./traverseAllChildren */ 110);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 24);
	
	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name) {
	  // We found a component instance.
	  var result = traverseContext;
	  var keyUnique = result[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
	  }
	  if (keyUnique && child != null) {
	    result[name] = child;
	  }
	}
	
	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	  traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  return result;
	}
	
	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 116 */
/*!********************************************!*\
  !*** ./~/react/~/fbjs/lib/shallowEqual.js ***!
  \********************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shallowEqual
	 * @typechecks
	 * 
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }
	
	  if ((typeof objA === 'undefined' ? 'undefined' : _typeof(objA)) !== 'object' || objA === null || (typeof objB === 'undefined' ? 'undefined' : _typeof(objB)) !== 'object' || objB === null) {
	    return false;
	  }
	
	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);
	
	  if (keysA.length !== keysB.length) {
	    return false;
	  }
	
	  // Test for A's keys different from B.
	  var bHasOwnProperty = hasOwnProperty.bind(objB);
	  for (var i = 0; i < keysA.length; i++) {
	    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
	      return false;
	    }
	  }
	
	  return true;
	}
	
	module.exports = shallowEqual;

/***/ },
/* 117 */
/*!*******************************************!*\
  !*** ./~/react/lib/ReactEventListener.js ***!
  \*******************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventListener
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var EventListener = __webpack_require__(/*! fbjs/lib/EventListener */ 118);
	var ExecutionEnvironment = __webpack_require__(/*! fbjs/lib/ExecutionEnvironment */ 8);
	var PooledClass = __webpack_require__(/*! ./PooledClass */ 55);
	var ReactInstanceHandles = __webpack_require__(/*! ./ReactInstanceHandles */ 44);
	var ReactMount = __webpack_require__(/*! ./ReactMount */ 27);
	var ReactUpdates = __webpack_require__(/*! ./ReactUpdates */ 53);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 38);
	var getEventTarget = __webpack_require__(/*! ./getEventTarget */ 80);
	var getUnboundedScrollPosition = __webpack_require__(/*! fbjs/lib/getUnboundedScrollPosition */ 119);
	
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;
	
	/**
	 * Finds the parent React component of `node`.
	 *
	 * @param {*} node
	 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
	 *                           is not nested.
	 */
	function findParent(node) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  var nodeID = ReactMount.getID(node);
	  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
	  var container = ReactMount.findReactContainerForID(rootID);
	  var parent = ReactMount.getFirstReactDOM(container);
	  return parent;
	}
	
	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function destructor() {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);
	
	function handleTopLevelImpl(bookKeeping) {
	  // TODO: Re-enable event.path handling
	  //
	  // if (bookKeeping.nativeEvent.path && bookKeeping.nativeEvent.path.length > 1) {
	  //   // New browsers have a path attribute on native events
	  //   handleTopLevelWithPath(bookKeeping);
	  // } else {
	  //   // Legacy browsers don't have a path attribute on native events
	  //   handleTopLevelWithoutPath(bookKeeping);
	  // }
	
	  void handleTopLevelWithPath; // temporarily unused
	  handleTopLevelWithoutPath(bookKeeping);
	}
	
	// Legacy browsers don't have a path attribute on native events
	function handleTopLevelWithoutPath(bookKeeping) {
	  var topLevelTarget = ReactMount.getFirstReactDOM(getEventTarget(bookKeeping.nativeEvent)) || window;
	
	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = topLevelTarget;
	  while (ancestor) {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = findParent(ancestor);
	  }
	
	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    topLevelTarget = bookKeeping.ancestors[i];
	    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, topLevelTarget, topLevelTargetID, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}
	
	// New browsers have a path attribute on native events
	function handleTopLevelWithPath(bookKeeping) {
	  var path = bookKeeping.nativeEvent.path;
	  var currentNativeTarget = path[0];
	  var eventsFired = 0;
	  for (var i = 0; i < path.length; i++) {
	    var currentPathElement = path[i];
	    if (currentPathElement.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE) {
	      currentNativeTarget = path[i + 1];
	    }
	    // TODO: slow
	    var reactParent = ReactMount.getFirstReactDOM(currentPathElement);
	    if (reactParent === currentPathElement) {
	      var currentPathElementID = ReactMount.getID(currentPathElement);
	      var newRootID = ReactInstanceHandles.getReactRootIDFromNodeID(currentPathElementID);
	      bookKeeping.ancestors.push(currentPathElement);
	
	      var topLevelTargetID = ReactMount.getID(currentPathElement) || '';
	      eventsFired++;
	      ReactEventListener._handleTopLevel(bookKeeping.topLevelType, currentPathElement, topLevelTargetID, bookKeeping.nativeEvent, currentNativeTarget);
	
	      // Jump to the root of this React render tree
	      while (currentPathElementID !== newRootID) {
	        i++;
	        currentPathElement = path[i];
	        currentPathElementID = ReactMount.getID(currentPathElement);
	      }
	    }
	  }
	  if (eventsFired === 0) {
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, window, '', bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}
	
	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}
	
	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,
	
	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,
	
	  setHandleTopLevel: function setHandleTopLevel(handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },
	
	  setEnabled: function setEnabled(enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },
	
	  isEnabled: function isEnabled() {
	    return ReactEventListener._enabled;
	  },
	
	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function trapBubbledEvent(topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },
	
	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function trapCapturedEvent(topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },
	
	  monitorScrollValue: function monitorScrollValue(refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },
	
	  dispatchEvent: function dispatchEvent(topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }
	
	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};
	
	module.exports = ReactEventListener;

/***/ },
/* 118 */
/*!*********************************************!*\
  !*** ./~/react/~/fbjs/lib/EventListener.js ***!
  \*********************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule EventListener
	 * @typechecks
	 */
	
	'use strict';
	
	var emptyFunction = __webpack_require__(/*! ./emptyFunction */ 14);
	
	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function listen(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function remove() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },
	
	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function capture(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if (process.env.NODE_ENV !== 'production') {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },
	
	  registerDefault: function registerDefault() {}
	};
	
	module.exports = EventListener;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 119 */
/*!**********************************************************!*\
  !*** ./~/react/~/fbjs/lib/getUnboundedScrollPosition.js ***!
  \**********************************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getUnboundedScrollPosition
	 * @typechecks
	 */
	
	'use strict';
	
	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}
	
	module.exports = getUnboundedScrollPosition;

/***/ },
/* 120 */
/*!***************************************!*\
  !*** ./~/react/lib/ReactInjection.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInjection
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(/*! ./DOMProperty */ 22);
	var EventPluginHub = __webpack_require__(/*! ./EventPluginHub */ 30);
	var ReactComponentEnvironment = __webpack_require__(/*! ./ReactComponentEnvironment */ 63);
	var ReactClass = __webpack_require__(/*! ./ReactClass */ 121);
	var ReactEmptyComponent = __webpack_require__(/*! ./ReactEmptyComponent */ 67);
	var ReactBrowserEventEmitter = __webpack_require__(/*! ./ReactBrowserEventEmitter */ 28);
	var ReactNativeComponent = __webpack_require__(/*! ./ReactNativeComponent */ 68);
	var ReactPerf = __webpack_require__(/*! ./ReactPerf */ 17);
	var ReactRootIndex = __webpack_require__(/*! ./ReactRootIndex */ 45);
	var ReactUpdates = __webpack_require__(/*! ./ReactUpdates */ 53);
	
	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  Class: ReactClass.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  NativeComponent: ReactNativeComponent.injection,
	  Perf: ReactPerf.injection,
	  RootIndex: ReactRootIndex.injection,
	  Updates: ReactUpdates.injection
	};
	
	module.exports = ReactInjection;

/***/ },
/* 121 */
/*!***********************************!*\
  !*** ./~/react/lib/ReactClass.js ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactClass
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	var ReactComponent = __webpack_require__(/*! ./ReactComponent */ 122);
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 41);
	var ReactPropTypeLocations = __webpack_require__(/*! ./ReactPropTypeLocations */ 64);
	var ReactPropTypeLocationNames = __webpack_require__(/*! ./ReactPropTypeLocationNames */ 65);
	var ReactNoopUpdateQueue = __webpack_require__(/*! ./ReactNoopUpdateQueue */ 123);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 38);
	var emptyObject = __webpack_require__(/*! fbjs/lib/emptyObject */ 57);
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 12);
	var keyMirror = __webpack_require__(/*! fbjs/lib/keyMirror */ 16);
	var keyOf = __webpack_require__(/*! fbjs/lib/keyOf */ 78);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 24);
	
	var MIXINS_KEY = keyOf({ mixins: null });
	
	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	var SpecPolicy = keyMirror({
	  /**
	   * These methods may be defined only once by the class specification or mixin.
	   */
	  DEFINE_ONCE: null,
	  /**
	   * These methods may be defined by both the class specification and mixins.
	   * Subsequent definitions will be chained. These methods must return void.
	   */
	  DEFINE_MANY: null,
	  /**
	   * These methods are overriding the base class.
	   */
	  OVERRIDE_BASE: null,
	  /**
	   * These methods are similar to DEFINE_MANY, except we assume they return
	   * objects. We try to merge the keys of the return values of all the mixed in
	   * functions. If there is a key conflict we throw.
	   */
	  DEFINE_MANY_MERGED: null
	});
	
	var injectedMixins = [];
	
	var warnedSetProps = false;
	function warnSetProps() {
	  if (!warnedSetProps) {
	    warnedSetProps = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'setProps(...) and replaceProps(...) are deprecated. ' + 'Instead, call render again at the top level.') : undefined;
	  }
	}
	
	/**
	 * Composite components are higher-level components that compose other composite
	 * or native components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will be available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {
	
	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: SpecPolicy.DEFINE_MANY,
	
	  // ==== Definition methods ====
	
	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,
	
	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,
	
	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,
	
	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: SpecPolicy.DEFINE_ONCE,
	
	  // ==== Delegate methods ====
	
	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,
	
	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: SpecPolicy.DEFINE_MANY,
	
	  // ==== Advanced methods ====
	
	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: SpecPolicy.OVERRIDE_BASE
	
	};
	
	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function displayName(Constructor, _displayName) {
	    Constructor.displayName = _displayName;
	  },
	  mixins: function mixins(Constructor, _mixins) {
	    if (_mixins) {
	      for (var i = 0; i < _mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, _mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function childContextTypes(Constructor, _childContextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, _childContextTypes, ReactPropTypeLocations.childContext);
	    }
	    Constructor.childContextTypes = assign({}, Constructor.childContextTypes, _childContextTypes);
	  },
	  contextTypes: function contextTypes(Constructor, _contextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, _contextTypes, ReactPropTypeLocations.context);
	    }
	    Constructor.contextTypes = assign({}, Constructor.contextTypes, _contextTypes);
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function getDefaultProps(Constructor, _getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, _getDefaultProps);
	    } else {
	      Constructor.getDefaultProps = _getDefaultProps;
	    }
	  },
	  propTypes: function propTypes(Constructor, _propTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, _propTypes, ReactPropTypeLocations.prop);
	    }
	    Constructor.propTypes = assign({}, Constructor.propTypes, _propTypes);
	  },
	  statics: function statics(Constructor, _statics) {
	    mixStaticSpecIntoComponent(Constructor, _statics);
	  },
	  autobind: function autobind() {} };
	
	// noop
	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but not in __DEV__
	      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : undefined;
	    }
	  }
	}
	
	function validateMethodOverride(proto, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;
	
	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(false) : undefined;
	  }
	
	  // Disallow defining methods more than once unless explicitly allowed.
	  if (proto.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(false) : undefined;
	  }
	}
	
	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classses.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    return;
	  }
	
	  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component class as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;
	  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;
	
	  var proto = Constructor.prototype;
	
	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }
	
	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }
	
	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above.
	      continue;
	    }
	
	    var property = spec[name];
	    validateMethodOverride(proto, name);
	
	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;
	
	      if (shouldAutoBind) {
	        if (!proto.__reactAutoBindMap) {
	          proto.__reactAutoBindMap = {};
	        }
	        proto.__reactAutoBindMap[name] = property;
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];
	
	          // These cases should already be caught by validateMethodOverride.
	          !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(false) : undefined;
	
	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if (process.env.NODE_ENV !== 'production') {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}
	
	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }
	
	    var isReserved = name in RESERVED_SPEC_KEYS;
	    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(false) : undefined;
	
	    var isInherited = name in Constructor;
	    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(false) : undefined;
	    Constructor[name] = property;
	  }
	}
	
	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  !(one && two && (typeof one === 'undefined' ? 'undefined' : _typeof(one)) === 'object' && (typeof two === 'undefined' ? 'undefined' : _typeof(two)) === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(false) : undefined;
	
	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(false) : undefined;
	      one[key] = two[key];
	    }
	  }
	  return one;
	}
	
	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}
	
	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}
	
	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if (process.env.NODE_ENV !== 'production') {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    /* eslint-disable block-scoped-var, no-undef */
	    boundMethod.bind = function (newThis) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }
	
	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : undefined;
	      } else if (!args.length) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : undefined;
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	      /* eslint-enable */
	    };
	  }
	  return boundMethod;
	}
	
	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  for (var autoBindKey in component.__reactAutoBindMap) {
	    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
	      var method = component.__reactAutoBindMap[autoBindKey];
	      component[autoBindKey] = bindAutoBindMethod(component, method);
	    }
	  }
	}
	
	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {
	
	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function replaceState(newState, callback) {
	    this.updater.enqueueReplaceState(this, newState);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  },
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function isMounted() {
	    return this.updater.isMounted(this);
	  },
	
	  /**
	   * Sets a subset of the props.
	   *
	   * @param {object} partialProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  setProps: function setProps(partialProps, callback) {
	    if (process.env.NODE_ENV !== 'production') {
	      warnSetProps();
	    }
	    this.updater.enqueueSetProps(this, partialProps);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  },
	
	  /**
	   * Replace all the props.
	   *
	   * @param {object} newProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  replaceProps: function replaceProps(newProps, callback) {
	    if (process.env.NODE_ENV !== 'production') {
	      warnSetProps();
	    }
	    this.updater.enqueueReplaceProps(this, newProps);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  }
	};
	
	var ReactClassComponent = function ReactClassComponent() {};
	assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);
	
	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {
	
	  /**
	   * Creates a composite component class given a class specification.
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function createClass(spec) {
	    var Constructor = function Constructor(props, context, updater) {
	      // This constructor is overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.
	
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : undefined;
	      }
	
	      // Wire up auto-binding
	      if (this.__reactAutoBindMap) {
	        bindAutoBindMethods(this);
	      }
	
	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;
	
	      this.state = null;
	
	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.
	
	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (process.env.NODE_ENV !== 'production') {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (typeof initialState === 'undefined' && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      !((typeof initialState === 'undefined' ? 'undefined' : _typeof(initialState)) === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(false) : undefined;
	
	      this.state = initialState;
	    };
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;
	
	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));
	
	    mixSpecIntoComponent(Constructor, spec);
	
	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }
	
	    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : invariant(false) : undefined;
	
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : undefined;
	    }
	
	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }
	
	    return Constructor;
	  },
	
	  injection: {
	    injectMixin: function injectMixin(mixin) {
	      injectedMixins.push(mixin);
	    }
	  }
	
	};
	
	module.exports = ReactClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 122 */
/*!***************************************!*\
  !*** ./~/react/lib/ReactComponent.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponent
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	var ReactNoopUpdateQueue = __webpack_require__(/*! ./ReactNoopUpdateQueue */ 123);
	
	var canDefineProperty = __webpack_require__(/*! ./canDefineProperty */ 42);
	var emptyObject = __webpack_require__(/*! fbjs/lib/emptyObject */ 57);
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 12);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 24);
	
	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}
	
	ReactComponent.prototype.isReactComponent = {};
	
	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !((typeof partialState === 'undefined' ? 'undefined' : _typeof(partialState)) === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(false) : undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : undefined;
	  }
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback);
	  }
	};
	
	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback);
	  }
	};
	
	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (process.env.NODE_ENV !== 'production') {
	  var deprecatedAPIs = {
	    getDOMNode: ['getDOMNode', 'Use ReactDOM.findDOMNode(component) instead.'],
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceProps: ['replaceProps', 'Instead, call render again at the top level.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).'],
	    setProps: ['setProps', 'Instead, call render again at the top level.']
	  };
	  var defineDeprecationWarning = function defineDeprecationWarning(methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function get() {
	          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : undefined;
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}
	
	module.exports = ReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 123 */
/*!*********************************************!*\
  !*** ./~/react/lib/ReactNoopUpdateQueue.js ***!
  \*********************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNoopUpdateQueue
	 */
	
	'use strict';
	
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 24);
	
	function warnTDZ(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor && publicInstance.constructor.displayName || '') : undefined;
	  }
	}
	
	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function isMounted(publicInstance) {
	    return false;
	  },
	
	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function enqueueCallback(publicInstance, callback) {},
	
	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function enqueueForceUpdate(publicInstance) {
	    warnTDZ(publicInstance, 'forceUpdate');
	  },
	
	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState) {
	    warnTDZ(publicInstance, 'replaceState');
	  },
	
	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function enqueueSetState(publicInstance, partialState) {
	    warnTDZ(publicInstance, 'setState');
	  },
	
	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function enqueueSetProps(publicInstance, partialProps) {
	    warnTDZ(publicInstance, 'setProps');
	  },
	
	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function enqueueReplaceProps(publicInstance, props) {
	    warnTDZ(publicInstance, 'replaceProps');
	  }
	
	};
	
	module.exports = ReactNoopUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 124 */
/*!**************************************************!*\
  !*** ./~/react/lib/ReactReconcileTransaction.js ***!
  \**************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconcileTransaction
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var CallbackQueue = __webpack_require__(/*! ./CallbackQueue */ 54);
	var PooledClass = __webpack_require__(/*! ./PooledClass */ 55);
	var ReactBrowserEventEmitter = __webpack_require__(/*! ./ReactBrowserEventEmitter */ 28);
	var ReactDOMFeatureFlags = __webpack_require__(/*! ./ReactDOMFeatureFlags */ 40);
	var ReactInputSelection = __webpack_require__(/*! ./ReactInputSelection */ 125);
	var Transaction = __webpack_require__(/*! ./Transaction */ 56);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 38);
	
	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};
	
	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function initialize() {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },
	
	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	   *   restores the previous value.
	   */
	  close: function close(previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};
	
	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function initialize() {
	    this.reactMountReady.reset();
	  },
	
	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function close() {
	    this.reactMountReady.notifyAll();
	  }
	};
	
	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];
	
	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction(forceHTML) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = !forceHTML && ReactDOMFeatureFlags.useCreateElement;
	}
	
	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap procedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function getTransactionWrappers() {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function getReactMountReady() {
	    return this.reactMountReady;
	  },
	
	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function destructor() {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};
	
	assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);
	
	PooledClass.addPoolingTo(ReactReconcileTransaction);
	
	module.exports = ReactReconcileTransaction;

/***/ },
/* 125 */
/*!********************************************!*\
  !*** ./~/react/lib/ReactInputSelection.js ***!
  \********************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInputSelection
	 */
	
	'use strict';
	
	var ReactDOMSelection = __webpack_require__(/*! ./ReactDOMSelection */ 126);
	
	var containsNode = __webpack_require__(/*! fbjs/lib/containsNode */ 58);
	var focusNode = __webpack_require__(/*! fbjs/lib/focusNode */ 94);
	var getActiveElement = __webpack_require__(/*! fbjs/lib/getActiveElement */ 128);
	
	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}
	
	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {
	
	  hasSelectionCapabilities: function hasSelectionCapabilities(elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },
	
	  getSelectionInformation: function getSelectionInformation() {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
	    };
	  },
	
	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function restoreSelection(priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },
	
	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function getSelection(input) {
	    var selection;
	
	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }
	
	    return selection || { start: 0, end: 0 };
	  },
	
	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function setSelection(input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (typeof end === 'undefined') {
	      end = start;
	    }
	
	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};
	
	module.exports = ReactInputSelection;

/***/ },
/* 126 */
/*!******************************************!*\
  !*** ./~/react/lib/ReactDOMSelection.js ***!
  \******************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelection
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(/*! fbjs/lib/ExecutionEnvironment */ 8);
	
	var getNodeForCharacterOffset = __webpack_require__(/*! ./getNodeForCharacterOffset */ 127);
	var getTextContentAccessor = __webpack_require__(/*! ./getTextContentAccessor */ 74);
	
	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}
	
	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;
	
	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);
	
	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;
	
	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}
	
	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();
	
	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }
	
	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;
	
	  var currentRange = selection.getRangeAt(0);
	
	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }
	
	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);
	
	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;
	
	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);
	
	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);
	
	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;
	
	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;
	
	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}
	
	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;
	
	  if (typeof offsets.end === 'undefined') {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }
	
	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}
	
	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }
	
	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = typeof offsets.end === 'undefined' ? start : Math.min(offsets.end, length);
	
	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }
	
	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);
	
	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();
	
	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}
	
	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);
	
	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,
	
	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};
	
	module.exports = ReactDOMSelection;

/***/ },
/* 127 */
/*!**************************************************!*\
  !*** ./~/react/lib/getNodeForCharacterOffset.js ***!
  \**************************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getNodeForCharacterOffset
	 */
	
	'use strict';
	
	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}
	
	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}
	
	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;
	
	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;
	
	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }
	
	      nodeStart = nodeEnd;
	    }
	
	    node = getLeafNode(getSiblingNode(node));
	  }
	}
	
	module.exports = getNodeForCharacterOffset;

/***/ },
/* 128 */
/*!************************************************!*\
  !*** ./~/react/~/fbjs/lib/getActiveElement.js ***!
  \************************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getActiveElement
	 * @typechecks
	 */
	
	/* eslint-disable fb-www/typeof-undefined */
	
	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not
	 * yet defined.
	 */
	'use strict';
	
	function getActiveElement() /*?DOMElement*/{
	  if (typeof document === 'undefined') {
	    return null;
	  }
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}
	
	module.exports = getActiveElement;

/***/ },
/* 129 */
/*!******************************************!*\
  !*** ./~/react/lib/SelectEventPlugin.js ***!
  \******************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SelectEventPlugin
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(/*! ./EventConstants */ 29);
	var EventPropagators = __webpack_require__(/*! ./EventPropagators */ 72);
	var ExecutionEnvironment = __webpack_require__(/*! fbjs/lib/ExecutionEnvironment */ 8);
	var ReactInputSelection = __webpack_require__(/*! ./ReactInputSelection */ 125);
	var SyntheticEvent = __webpack_require__(/*! ./SyntheticEvent */ 76);
	
	var getActiveElement = __webpack_require__(/*! fbjs/lib/getActiveElement */ 128);
	var isTextInputElement = __webpack_require__(/*! ./isTextInputElement */ 81);
	var keyOf = __webpack_require__(/*! fbjs/lib/keyOf */ 78);
	var shallowEqual = __webpack_require__(/*! fbjs/lib/shallowEqual */ 116);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;
	
	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSelect: null }),
	      captured: keyOf({ onSelectCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]
	  }
	};
	
	var activeElement = null;
	var activeElementID = null;
	var lastSelection = null;
	var mouseDown = false;
	
	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events.
	var hasListener = false;
	var ON_SELECT_KEY = keyOf({ onSelect: null });
	
	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}
	
	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }
	
	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;
	
	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementID, nativeEvent, nativeEventTarget);
	
	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;
	
	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);
	
	    return syntheticEvent;
	  }
	
	  return null;
	}
	
	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }
	
	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case topLevelTypes.topFocus:
	        if (isTextInputElement(topLevelTarget) || topLevelTarget.contentEditable === 'true') {
	          activeElement = topLevelTarget;
	          activeElementID = topLevelTargetID;
	          lastSelection = null;
	        }
	        break;
	      case topLevelTypes.topBlur:
	        activeElement = null;
	        activeElementID = null;
	        lastSelection = null;
	        break;
	
	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case topLevelTypes.topMouseDown:
	        mouseDown = true;
	        break;
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topMouseUp:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	
	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case topLevelTypes.topSelectionChange:
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }
	
	    return null;
	  },
	
	  didPutListener: function didPutListener(id, registrationName, listener) {
	    if (registrationName === ON_SELECT_KEY) {
	      hasListener = true;
	    }
	  }
	};
	
	module.exports = SelectEventPlugin;

/***/ },
/* 130 */
/*!*********************************************!*\
  !*** ./~/react/lib/ServerReactRootIndex.js ***!
  \*********************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ServerReactRootIndex
	 * @typechecks
	 */
	
	'use strict';
	
	/**
	 * Size of the reactRoot ID space. We generate random numbers for React root
	 * IDs and if there's a collision the events and DOM update system will
	 * get confused. In the future we need a way to generate GUIDs but for
	 * now this will work on a smaller scale.
	 */
	
	var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);
	
	var ServerReactRootIndex = {
	  createReactRootIndex: function createReactRootIndex() {
	    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
	  }
	};
	
	module.exports = ServerReactRootIndex;

/***/ },
/* 131 */
/*!******************************************!*\
  !*** ./~/react/lib/SimpleEventPlugin.js ***!
  \******************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SimpleEventPlugin
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(/*! ./EventConstants */ 29);
	var EventListener = __webpack_require__(/*! fbjs/lib/EventListener */ 118);
	var EventPropagators = __webpack_require__(/*! ./EventPropagators */ 72);
	var ReactMount = __webpack_require__(/*! ./ReactMount */ 27);
	var SyntheticClipboardEvent = __webpack_require__(/*! ./SyntheticClipboardEvent */ 132);
	var SyntheticEvent = __webpack_require__(/*! ./SyntheticEvent */ 76);
	var SyntheticFocusEvent = __webpack_require__(/*! ./SyntheticFocusEvent */ 133);
	var SyntheticKeyboardEvent = __webpack_require__(/*! ./SyntheticKeyboardEvent */ 134);
	var SyntheticMouseEvent = __webpack_require__(/*! ./SyntheticMouseEvent */ 85);
	var SyntheticDragEvent = __webpack_require__(/*! ./SyntheticDragEvent */ 137);
	var SyntheticTouchEvent = __webpack_require__(/*! ./SyntheticTouchEvent */ 138);
	var SyntheticUIEvent = __webpack_require__(/*! ./SyntheticUIEvent */ 86);
	var SyntheticWheelEvent = __webpack_require__(/*! ./SyntheticWheelEvent */ 139);
	
	var emptyFunction = __webpack_require__(/*! fbjs/lib/emptyFunction */ 14);
	var getEventCharCode = __webpack_require__(/*! ./getEventCharCode */ 135);
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 12);
	var keyOf = __webpack_require__(/*! fbjs/lib/keyOf */ 78);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	var eventTypes = {
	  abort: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onAbort: true }),
	      captured: keyOf({ onAbortCapture: true })
	    }
	  },
	  blur: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBlur: true }),
	      captured: keyOf({ onBlurCapture: true })
	    }
	  },
	  canPlay: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlay: true }),
	      captured: keyOf({ onCanPlayCapture: true })
	    }
	  },
	  canPlayThrough: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlayThrough: true }),
	      captured: keyOf({ onCanPlayThroughCapture: true })
	    }
	  },
	  click: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onClick: true }),
	      captured: keyOf({ onClickCapture: true })
	    }
	  },
	  contextMenu: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onContextMenu: true }),
	      captured: keyOf({ onContextMenuCapture: true })
	    }
	  },
	  copy: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCopy: true }),
	      captured: keyOf({ onCopyCapture: true })
	    }
	  },
	  cut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCut: true }),
	      captured: keyOf({ onCutCapture: true })
	    }
	  },
	  doubleClick: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDoubleClick: true }),
	      captured: keyOf({ onDoubleClickCapture: true })
	    }
	  },
	  drag: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrag: true }),
	      captured: keyOf({ onDragCapture: true })
	    }
	  },
	  dragEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnd: true }),
	      captured: keyOf({ onDragEndCapture: true })
	    }
	  },
	  dragEnter: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnter: true }),
	      captured: keyOf({ onDragEnterCapture: true })
	    }
	  },
	  dragExit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragExit: true }),
	      captured: keyOf({ onDragExitCapture: true })
	    }
	  },
	  dragLeave: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragLeave: true }),
	      captured: keyOf({ onDragLeaveCapture: true })
	    }
	  },
	  dragOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragOver: true }),
	      captured: keyOf({ onDragOverCapture: true })
	    }
	  },
	  dragStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragStart: true }),
	      captured: keyOf({ onDragStartCapture: true })
	    }
	  },
	  drop: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrop: true }),
	      captured: keyOf({ onDropCapture: true })
	    }
	  },
	  durationChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDurationChange: true }),
	      captured: keyOf({ onDurationChangeCapture: true })
	    }
	  },
	  emptied: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEmptied: true }),
	      captured: keyOf({ onEmptiedCapture: true })
	    }
	  },
	  encrypted: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEncrypted: true }),
	      captured: keyOf({ onEncryptedCapture: true })
	    }
	  },
	  ended: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEnded: true }),
	      captured: keyOf({ onEndedCapture: true })
	    }
	  },
	  error: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onError: true }),
	      captured: keyOf({ onErrorCapture: true })
	    }
	  },
	  focus: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onFocus: true }),
	      captured: keyOf({ onFocusCapture: true })
	    }
	  },
	  input: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onInput: true }),
	      captured: keyOf({ onInputCapture: true })
	    }
	  },
	  keyDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyDown: true }),
	      captured: keyOf({ onKeyDownCapture: true })
	    }
	  },
	  keyPress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyPress: true }),
	      captured: keyOf({ onKeyPressCapture: true })
	    }
	  },
	  keyUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyUp: true }),
	      captured: keyOf({ onKeyUpCapture: true })
	    }
	  },
	  load: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoad: true }),
	      captured: keyOf({ onLoadCapture: true })
	    }
	  },
	  loadedData: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedData: true }),
	      captured: keyOf({ onLoadedDataCapture: true })
	    }
	  },
	  loadedMetadata: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedMetadata: true }),
	      captured: keyOf({ onLoadedMetadataCapture: true })
	    }
	  },
	  loadStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadStart: true }),
	      captured: keyOf({ onLoadStartCapture: true })
	    }
	  },
	  // Note: We do not allow listening to mouseOver events. Instead, use the
	  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
	  mouseDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseDown: true }),
	      captured: keyOf({ onMouseDownCapture: true })
	    }
	  },
	  mouseMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseMove: true }),
	      captured: keyOf({ onMouseMoveCapture: true })
	    }
	  },
	  mouseOut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOut: true }),
	      captured: keyOf({ onMouseOutCapture: true })
	    }
	  },
	  mouseOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOver: true }),
	      captured: keyOf({ onMouseOverCapture: true })
	    }
	  },
	  mouseUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseUp: true }),
	      captured: keyOf({ onMouseUpCapture: true })
	    }
	  },
	  paste: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPaste: true }),
	      captured: keyOf({ onPasteCapture: true })
	    }
	  },
	  pause: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPause: true }),
	      captured: keyOf({ onPauseCapture: true })
	    }
	  },
	  play: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlay: true }),
	      captured: keyOf({ onPlayCapture: true })
	    }
	  },
	  playing: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlaying: true }),
	      captured: keyOf({ onPlayingCapture: true })
	    }
	  },
	  progress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onProgress: true }),
	      captured: keyOf({ onProgressCapture: true })
	    }
	  },
	  rateChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onRateChange: true }),
	      captured: keyOf({ onRateChangeCapture: true })
	    }
	  },
	  reset: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onReset: true }),
	      captured: keyOf({ onResetCapture: true })
	    }
	  },
	  scroll: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onScroll: true }),
	      captured: keyOf({ onScrollCapture: true })
	    }
	  },
	  seeked: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeked: true }),
	      captured: keyOf({ onSeekedCapture: true })
	    }
	  },
	  seeking: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeking: true }),
	      captured: keyOf({ onSeekingCapture: true })
	    }
	  },
	  stalled: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onStalled: true }),
	      captured: keyOf({ onStalledCapture: true })
	    }
	  },
	  submit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSubmit: true }),
	      captured: keyOf({ onSubmitCapture: true })
	    }
	  },
	  suspend: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSuspend: true }),
	      captured: keyOf({ onSuspendCapture: true })
	    }
	  },
	  timeUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTimeUpdate: true }),
	      captured: keyOf({ onTimeUpdateCapture: true })
	    }
	  },
	  touchCancel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchCancel: true }),
	      captured: keyOf({ onTouchCancelCapture: true })
	    }
	  },
	  touchEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchEnd: true }),
	      captured: keyOf({ onTouchEndCapture: true })
	    }
	  },
	  touchMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchMove: true }),
	      captured: keyOf({ onTouchMoveCapture: true })
	    }
	  },
	  touchStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchStart: true }),
	      captured: keyOf({ onTouchStartCapture: true })
	    }
	  },
	  volumeChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onVolumeChange: true }),
	      captured: keyOf({ onVolumeChangeCapture: true })
	    }
	  },
	  waiting: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWaiting: true }),
	      captured: keyOf({ onWaitingCapture: true })
	    }
	  },
	  wheel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWheel: true }),
	      captured: keyOf({ onWheelCapture: true })
	    }
	  }
	};
	
	var topLevelEventsToDispatchConfig = {
	  topAbort: eventTypes.abort,
	  topBlur: eventTypes.blur,
	  topCanPlay: eventTypes.canPlay,
	  topCanPlayThrough: eventTypes.canPlayThrough,
	  topClick: eventTypes.click,
	  topContextMenu: eventTypes.contextMenu,
	  topCopy: eventTypes.copy,
	  topCut: eventTypes.cut,
	  topDoubleClick: eventTypes.doubleClick,
	  topDrag: eventTypes.drag,
	  topDragEnd: eventTypes.dragEnd,
	  topDragEnter: eventTypes.dragEnter,
	  topDragExit: eventTypes.dragExit,
	  topDragLeave: eventTypes.dragLeave,
	  topDragOver: eventTypes.dragOver,
	  topDragStart: eventTypes.dragStart,
	  topDrop: eventTypes.drop,
	  topDurationChange: eventTypes.durationChange,
	  topEmptied: eventTypes.emptied,
	  topEncrypted: eventTypes.encrypted,
	  topEnded: eventTypes.ended,
	  topError: eventTypes.error,
	  topFocus: eventTypes.focus,
	  topInput: eventTypes.input,
	  topKeyDown: eventTypes.keyDown,
	  topKeyPress: eventTypes.keyPress,
	  topKeyUp: eventTypes.keyUp,
	  topLoad: eventTypes.load,
	  topLoadedData: eventTypes.loadedData,
	  topLoadedMetadata: eventTypes.loadedMetadata,
	  topLoadStart: eventTypes.loadStart,
	  topMouseDown: eventTypes.mouseDown,
	  topMouseMove: eventTypes.mouseMove,
	  topMouseOut: eventTypes.mouseOut,
	  topMouseOver: eventTypes.mouseOver,
	  topMouseUp: eventTypes.mouseUp,
	  topPaste: eventTypes.paste,
	  topPause: eventTypes.pause,
	  topPlay: eventTypes.play,
	  topPlaying: eventTypes.playing,
	  topProgress: eventTypes.progress,
	  topRateChange: eventTypes.rateChange,
	  topReset: eventTypes.reset,
	  topScroll: eventTypes.scroll,
	  topSeeked: eventTypes.seeked,
	  topSeeking: eventTypes.seeking,
	  topStalled: eventTypes.stalled,
	  topSubmit: eventTypes.submit,
	  topSuspend: eventTypes.suspend,
	  topTimeUpdate: eventTypes.timeUpdate,
	  topTouchCancel: eventTypes.touchCancel,
	  topTouchEnd: eventTypes.touchEnd,
	  topTouchMove: eventTypes.touchMove,
	  topTouchStart: eventTypes.touchStart,
	  topVolumeChange: eventTypes.volumeChange,
	  topWaiting: eventTypes.waiting,
	  topWheel: eventTypes.wheel
	};
	
	for (var type in topLevelEventsToDispatchConfig) {
	  topLevelEventsToDispatchConfig[type].dependencies = [type];
	}
	
	var ON_CLICK_KEY = keyOf({ onClick: null });
	var onClickListeners = {};
	
	var SimpleEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case topLevelTypes.topAbort:
	      case topLevelTypes.topCanPlay:
	      case topLevelTypes.topCanPlayThrough:
	      case topLevelTypes.topDurationChange:
	      case topLevelTypes.topEmptied:
	      case topLevelTypes.topEncrypted:
	      case topLevelTypes.topEnded:
	      case topLevelTypes.topError:
	      case topLevelTypes.topInput:
	      case topLevelTypes.topLoad:
	      case topLevelTypes.topLoadedData:
	      case topLevelTypes.topLoadedMetadata:
	      case topLevelTypes.topLoadStart:
	      case topLevelTypes.topPause:
	      case topLevelTypes.topPlay:
	      case topLevelTypes.topPlaying:
	      case topLevelTypes.topProgress:
	      case topLevelTypes.topRateChange:
	      case topLevelTypes.topReset:
	      case topLevelTypes.topSeeked:
	      case topLevelTypes.topSeeking:
	      case topLevelTypes.topStalled:
	      case topLevelTypes.topSubmit:
	      case topLevelTypes.topSuspend:
	      case topLevelTypes.topTimeUpdate:
	      case topLevelTypes.topVolumeChange:
	      case topLevelTypes.topWaiting:
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case topLevelTypes.topKeyPress:
	        // FireFox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case topLevelTypes.topBlur:
	      case topLevelTypes.topFocus:
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case topLevelTypes.topClick:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topDoubleClick:
	      case topLevelTypes.topMouseDown:
	      case topLevelTypes.topMouseMove:
	      case topLevelTypes.topMouseOut:
	      case topLevelTypes.topMouseOver:
	      case topLevelTypes.topMouseUp:
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case topLevelTypes.topDrag:
	      case topLevelTypes.topDragEnd:
	      case topLevelTypes.topDragEnter:
	      case topLevelTypes.topDragExit:
	      case topLevelTypes.topDragLeave:
	      case topLevelTypes.topDragOver:
	      case topLevelTypes.topDragStart:
	      case topLevelTypes.topDrop:
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case topLevelTypes.topTouchCancel:
	      case topLevelTypes.topTouchEnd:
	      case topLevelTypes.topTouchMove:
	      case topLevelTypes.topTouchStart:
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case topLevelTypes.topScroll:
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case topLevelTypes.topWheel:
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case topLevelTypes.topCopy:
	      case topLevelTypes.topCut:
	      case topLevelTypes.topPaste:
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : invariant(false) : undefined;
	    var event = EventConstructor.getPooled(dispatchConfig, topLevelTargetID, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },
	
	  didPutListener: function didPutListener(id, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    if (registrationName === ON_CLICK_KEY) {
	      var node = ReactMount.getNode(id);
	      if (!onClickListeners[id]) {
	        onClickListeners[id] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },
	
	  willDeleteListener: function willDeleteListener(id, registrationName) {
	    if (registrationName === ON_CLICK_KEY) {
	      onClickListeners[id].remove();
	      delete onClickListeners[id];
	    }
	  }
	
	};
	
	module.exports = SimpleEventPlugin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 132 */
/*!************************************************!*\
  !*** ./~/react/lib/SyntheticClipboardEvent.js ***!
  \************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticClipboardEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(/*! ./SyntheticEvent */ 76);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function clipboardData(event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);
	
	module.exports = SyntheticClipboardEvent;

/***/ },
/* 133 */
/*!********************************************!*\
  !*** ./~/react/lib/SyntheticFocusEvent.js ***!
  \********************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticFocusEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(/*! ./SyntheticUIEvent */ 86);
	
	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);
	
	module.exports = SyntheticFocusEvent;

/***/ },
/* 134 */
/*!***********************************************!*\
  !*** ./~/react/lib/SyntheticKeyboardEvent.js ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticKeyboardEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(/*! ./SyntheticUIEvent */ 86);
	
	var getEventCharCode = __webpack_require__(/*! ./getEventCharCode */ 135);
	var getEventKey = __webpack_require__(/*! ./getEventKey */ 136);
	var getEventModifierState = __webpack_require__(/*! ./getEventModifierState */ 87);
	
	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function charCode(event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.
	
	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function keyCode(event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.
	
	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function which(event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);
	
	module.exports = SyntheticKeyboardEvent;

/***/ },
/* 135 */
/*!*****************************************!*\
  !*** ./~/react/lib/getEventCharCode.js ***!
  \*****************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventCharCode
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */
	
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;
	
	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;
	
	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }
	
	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }
	
	  return 0;
	}
	
	module.exports = getEventCharCode;

/***/ },
/* 136 */
/*!************************************!*\
  !*** ./~/react/lib/getEventKey.js ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventKey
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var getEventCharCode = __webpack_require__(/*! ./getEventCharCode */ 135);
	
	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};
	
	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};
	
	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.
	
	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }
	
	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);
	
	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}
	
	module.exports = getEventKey;

/***/ },
/* 137 */
/*!*******************************************!*\
  !*** ./~/react/lib/SyntheticDragEvent.js ***!
  \*******************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticDragEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticMouseEvent = __webpack_require__(/*! ./SyntheticMouseEvent */ 85);
	
	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);
	
	module.exports = SyntheticDragEvent;

/***/ },
/* 138 */
/*!********************************************!*\
  !*** ./~/react/lib/SyntheticTouchEvent.js ***!
  \********************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTouchEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(/*! ./SyntheticUIEvent */ 86);
	
	var getEventModifierState = __webpack_require__(/*! ./getEventModifierState */ 87);
	
	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);
	
	module.exports = SyntheticTouchEvent;

/***/ },
/* 139 */
/*!********************************************!*\
  !*** ./~/react/lib/SyntheticWheelEvent.js ***!
  \********************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticWheelEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticMouseEvent = __webpack_require__(/*! ./SyntheticMouseEvent */ 85);
	
	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function deltaX(event) {
	    return 'deltaX' in event ? event.deltaX :
	    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function deltaY(event) {
	    return 'deltaY' in event ? event.deltaY :
	    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY :
	    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,
	
	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);
	
	module.exports = SyntheticWheelEvent;

/***/ },
/* 140 */
/*!*********************************************!*\
  !*** ./~/react/lib/SVGDOMPropertyConfig.js ***!
  \*********************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SVGDOMPropertyConfig
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(/*! ./DOMProperty */ 22);
	
	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	
	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};
	
	var SVGDOMPropertyConfig = {
	  Properties: {
	    clipPath: MUST_USE_ATTRIBUTE,
	    cx: MUST_USE_ATTRIBUTE,
	    cy: MUST_USE_ATTRIBUTE,
	    d: MUST_USE_ATTRIBUTE,
	    dx: MUST_USE_ATTRIBUTE,
	    dy: MUST_USE_ATTRIBUTE,
	    fill: MUST_USE_ATTRIBUTE,
	    fillOpacity: MUST_USE_ATTRIBUTE,
	    fontFamily: MUST_USE_ATTRIBUTE,
	    fontSize: MUST_USE_ATTRIBUTE,
	    fx: MUST_USE_ATTRIBUTE,
	    fy: MUST_USE_ATTRIBUTE,
	    gradientTransform: MUST_USE_ATTRIBUTE,
	    gradientUnits: MUST_USE_ATTRIBUTE,
	    markerEnd: MUST_USE_ATTRIBUTE,
	    markerMid: MUST_USE_ATTRIBUTE,
	    markerStart: MUST_USE_ATTRIBUTE,
	    offset: MUST_USE_ATTRIBUTE,
	    opacity: MUST_USE_ATTRIBUTE,
	    patternContentUnits: MUST_USE_ATTRIBUTE,
	    patternUnits: MUST_USE_ATTRIBUTE,
	    points: MUST_USE_ATTRIBUTE,
	    preserveAspectRatio: MUST_USE_ATTRIBUTE,
	    r: MUST_USE_ATTRIBUTE,
	    rx: MUST_USE_ATTRIBUTE,
	    ry: MUST_USE_ATTRIBUTE,
	    spreadMethod: MUST_USE_ATTRIBUTE,
	    stopColor: MUST_USE_ATTRIBUTE,
	    stopOpacity: MUST_USE_ATTRIBUTE,
	    stroke: MUST_USE_ATTRIBUTE,
	    strokeDasharray: MUST_USE_ATTRIBUTE,
	    strokeLinecap: MUST_USE_ATTRIBUTE,
	    strokeOpacity: MUST_USE_ATTRIBUTE,
	    strokeWidth: MUST_USE_ATTRIBUTE,
	    textAnchor: MUST_USE_ATTRIBUTE,
	    transform: MUST_USE_ATTRIBUTE,
	    version: MUST_USE_ATTRIBUTE,
	    viewBox: MUST_USE_ATTRIBUTE,
	    x1: MUST_USE_ATTRIBUTE,
	    x2: MUST_USE_ATTRIBUTE,
	    x: MUST_USE_ATTRIBUTE,
	    xlinkActuate: MUST_USE_ATTRIBUTE,
	    xlinkArcrole: MUST_USE_ATTRIBUTE,
	    xlinkHref: MUST_USE_ATTRIBUTE,
	    xlinkRole: MUST_USE_ATTRIBUTE,
	    xlinkShow: MUST_USE_ATTRIBUTE,
	    xlinkTitle: MUST_USE_ATTRIBUTE,
	    xlinkType: MUST_USE_ATTRIBUTE,
	    xmlBase: MUST_USE_ATTRIBUTE,
	    xmlLang: MUST_USE_ATTRIBUTE,
	    xmlSpace: MUST_USE_ATTRIBUTE,
	    y1: MUST_USE_ATTRIBUTE,
	    y2: MUST_USE_ATTRIBUTE,
	    y: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {
	    clipPath: 'clip-path',
	    fillOpacity: 'fill-opacity',
	    fontFamily: 'font-family',
	    fontSize: 'font-size',
	    gradientTransform: 'gradientTransform',
	    gradientUnits: 'gradientUnits',
	    markerEnd: 'marker-end',
	    markerMid: 'marker-mid',
	    markerStart: 'marker-start',
	    patternContentUnits: 'patternContentUnits',
	    patternUnits: 'patternUnits',
	    preserveAspectRatio: 'preserveAspectRatio',
	    spreadMethod: 'spreadMethod',
	    stopColor: 'stop-color',
	    stopOpacity: 'stop-opacity',
	    strokeDasharray: 'stroke-dasharray',
	    strokeLinecap: 'stroke-linecap',
	    strokeOpacity: 'stroke-opacity',
	    strokeWidth: 'stroke-width',
	    textAnchor: 'text-anchor',
	    viewBox: 'viewBox',
	    xlinkActuate: 'xlink:actuate',
	    xlinkArcrole: 'xlink:arcrole',
	    xlinkHref: 'xlink:href',
	    xlinkRole: 'xlink:role',
	    xlinkShow: 'xlink:show',
	    xlinkTitle: 'xlink:title',
	    xlinkType: 'xlink:type',
	    xmlBase: 'xml:base',
	    xmlLang: 'xml:lang',
	    xmlSpace: 'xml:space'
	  }
	};
	
	module.exports = SVGDOMPropertyConfig;

/***/ },
/* 141 */
/*!*****************************************!*\
  !*** ./~/react/lib/ReactDefaultPerf.js ***!
  \*****************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerf
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	var DOMProperty = __webpack_require__(/*! ./DOMProperty */ 22);
	var ReactDefaultPerfAnalysis = __webpack_require__(/*! ./ReactDefaultPerfAnalysis */ 142);
	var ReactMount = __webpack_require__(/*! ./ReactMount */ 27);
	var ReactPerf = __webpack_require__(/*! ./ReactPerf */ 17);
	
	var performanceNow = __webpack_require__(/*! fbjs/lib/performanceNow */ 143);
	
	function roundFloat(val) {
	  return Math.floor(val * 100) / 100;
	}
	
	function addValue(obj, key, val) {
	  obj[key] = (obj[key] || 0) + val;
	}
	
	var ReactDefaultPerf = {
	  _allMeasurements: [], // last item in the list is the current one
	  _mountStack: [0],
	  _injected: false,
	
	  start: function start() {
	    if (!ReactDefaultPerf._injected) {
	      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
	    }
	
	    ReactDefaultPerf._allMeasurements.length = 0;
	    ReactPerf.enableMeasure = true;
	  },
	
	  stop: function stop() {
	    ReactPerf.enableMeasure = false;
	  },
	
	  getLastMeasurements: function getLastMeasurements() {
	    return ReactDefaultPerf._allMeasurements;
	  },
	
	  printExclusive: function printExclusive(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Component class name': item.componentName,
	        'Total inclusive time (ms)': roundFloat(item.inclusive),
	        'Exclusive mount time (ms)': roundFloat(item.exclusive),
	        'Exclusive render time (ms)': roundFloat(item.render),
	        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
	        'Render time per instance (ms)': roundFloat(item.render / item.count),
	        'Instances': item.count
	      };
	    }));
	    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
	    // number.
	  },
	
	  printInclusive: function printInclusive(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Inclusive time (ms)': roundFloat(item.time),
	        'Instances': item.count
	      };
	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },
	
	  getMeasurementsSummaryMap: function getMeasurementsSummaryMap(measurements) {
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);
	    return summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Wasted time (ms)': item.time,
	        'Instances': item.count
	      };
	    });
	  },
	
	  printWasted: function printWasted(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },
	
	  printDOM: function printDOM(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
	    console.table(summary.map(function (item) {
	      var result = {};
	      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
	      result.type = item.type;
	      result.args = JSON.stringify(item.args);
	      return result;
	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },
	
	  _recordWrite: function _recordWrite(id, fnName, totalTime, args) {
	    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
	    var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;
	    writes[id] = writes[id] || [];
	    writes[id].push({
	      type: fnName,
	      time: totalTime,
	      args: args
	    });
	  },
	
	  measure: function measure(moduleName, fnName, func) {
	    return function () {
	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }
	
	      var totalTime;
	      var rv;
	      var start;
	
	      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {
	        // A "measurement" is a set of metrics recorded for each flush. We want
	        // to group the metrics for a given flush together so we can look at the
	        // components that rendered and the DOM operations that actually
	        // happened to determine the amount of "wasted work" performed.
	        ReactDefaultPerf._allMeasurements.push({
	          exclusive: {},
	          inclusive: {},
	          render: {},
	          counts: {},
	          writes: {},
	          displayNames: {},
	          totalTime: 0,
	          created: {}
	        });
	        start = performanceNow();
	        rv = func.apply(this, args);
	        ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;
	        return rv;
	      } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactBrowserEventEmitter' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations') {
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;
	
	        if (fnName === '_mountImageIntoNode') {
	          var mountID = ReactMount.getID(args[1]);
	          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
	        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
	          // special format
	          args[0].forEach(function (update) {
	            var writeArgs = {};
	            if (update.fromIndex !== null) {
	              writeArgs.fromIndex = update.fromIndex;
	            }
	            if (update.toIndex !== null) {
	              writeArgs.toIndex = update.toIndex;
	            }
	            if (update.textContent !== null) {
	              writeArgs.textContent = update.textContent;
	            }
	            if (update.markupIndex !== null) {
	              writeArgs.markup = args[1][update.markupIndex];
	            }
	            ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);
	          });
	        } else {
	          // basic format
	          var id = args[0];
	          if ((typeof id === 'undefined' ? 'undefined' : _typeof(id)) === 'object') {
	            id = ReactMount.getID(args[0]);
	          }
	          ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));
	        }
	        return rv;
	      } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || // TODO: receiveComponent()?
	      fnName === '_renderValidatedComponent')) {
	
	        if (this._currentElement.type === ReactMount.TopLevelWrapper) {
	          return func.apply(this, args);
	        }
	
	        var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;
	        var isRender = fnName === '_renderValidatedComponent';
	        var isMount = fnName === 'mountComponent';
	
	        var mountStack = ReactDefaultPerf._mountStack;
	        var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];
	
	        if (isRender) {
	          addValue(entry.counts, rootNodeID, 1);
	        } else if (isMount) {
	          entry.created[rootNodeID] = true;
	          mountStack.push(0);
	        }
	
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;
	
	        if (isRender) {
	          addValue(entry.render, rootNodeID, totalTime);
	        } else if (isMount) {
	          var subMountTime = mountStack.pop();
	          mountStack[mountStack.length - 1] += totalTime;
	          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        } else {
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        }
	
	        entry.displayNames[rootNodeID] = {
	          current: this.getName(),
	          owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'
	        };
	
	        return rv;
	      } else {
	        return func.apply(this, args);
	      }
	    };
	  }
	};
	
	module.exports = ReactDefaultPerf;

/***/ },
/* 142 */
/*!*************************************************!*\
  !*** ./~/react/lib/ReactDefaultPerfAnalysis.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerfAnalysis
	 */
	
	'use strict';
	
	var assign = __webpack_require__(/*! ./Object.assign */ 38);
	
	// Don't try to save users less than 1.2ms (a number I made up)
	var DONT_CARE_THRESHOLD = 1.2;
	var DOM_OPERATION_TYPES = {
	  '_mountImageIntoNode': 'set innerHTML',
	  INSERT_MARKUP: 'set innerHTML',
	  MOVE_EXISTING: 'move',
	  REMOVE_NODE: 'remove',
	  SET_MARKUP: 'set innerHTML',
	  TEXT_CONTENT: 'set textContent',
	  'setValueForProperty': 'update attribute',
	  'setValueForAttribute': 'update attribute',
	  'deleteValueForProperty': 'remove attribute',
	  'setValueForStyles': 'update styles',
	  'replaceNodeWithMarkup': 'replace',
	  'updateTextContent': 'set textContent'
	};
	
	function getTotalTime(measurements) {
	  // TODO: return number of DOM ops? could be misleading.
	  // TODO: measure dropped frames after reconcile?
	  // TODO: log total time of each reconcile and the top-level component
	  // class that triggered it.
	  var totalTime = 0;
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    totalTime += measurement.totalTime;
	  }
	  return totalTime;
	}
	
	function getDOMSummary(measurements) {
	  var items = [];
	  measurements.forEach(function (measurement) {
	    Object.keys(measurement.writes).forEach(function (id) {
	      measurement.writes[id].forEach(function (write) {
	        items.push({
	          id: id,
	          type: DOM_OPERATION_TYPES[write.type] || write.type,
	          args: write.args
	        });
	      });
	    });
	  });
	  return items;
	}
	
	function getExclusiveSummary(measurements) {
	  var candidates = {};
	  var displayName;
	
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
	
	    for (var id in allIDs) {
	      displayName = measurement.displayNames[id].current;
	
	      candidates[displayName] = candidates[displayName] || {
	        componentName: displayName,
	        inclusive: 0,
	        exclusive: 0,
	        render: 0,
	        count: 0
	      };
	      if (measurement.render[id]) {
	        candidates[displayName].render += measurement.render[id];
	      }
	      if (measurement.exclusive[id]) {
	        candidates[displayName].exclusive += measurement.exclusive[id];
	      }
	      if (measurement.inclusive[id]) {
	        candidates[displayName].inclusive += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[displayName].count += measurement.counts[id];
	      }
	    }
	  }
	
	  // Now make a sorted array with the results.
	  var arr = [];
	  for (displayName in candidates) {
	    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[displayName]);
	    }
	  }
	
	  arr.sort(function (a, b) {
	    return b.exclusive - a.exclusive;
	  });
	
	  return arr;
	}
	
	function getInclusiveSummary(measurements, onlyClean) {
	  var candidates = {};
	  var inclusiveKey;
	
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
	    var cleanComponents;
	
	    if (onlyClean) {
	      cleanComponents = getUnchangedComponents(measurement);
	    }
	
	    for (var id in allIDs) {
	      if (onlyClean && !cleanComponents[id]) {
	        continue;
	      }
	
	      var displayName = measurement.displayNames[id];
	
	      // Inclusive time is not useful for many components without knowing where
	      // they are instantiated. So we aggregate inclusive time with both the
	      // owner and current displayName as the key.
	      inclusiveKey = displayName.owner + ' > ' + displayName.current;
	
	      candidates[inclusiveKey] = candidates[inclusiveKey] || {
	        componentName: inclusiveKey,
	        time: 0,
	        count: 0
	      };
	
	      if (measurement.inclusive[id]) {
	        candidates[inclusiveKey].time += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[inclusiveKey].count += measurement.counts[id];
	      }
	    }
	  }
	
	  // Now make a sorted array with the results.
	  var arr = [];
	  for (inclusiveKey in candidates) {
	    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[inclusiveKey]);
	    }
	  }
	
	  arr.sort(function (a, b) {
	    return b.time - a.time;
	  });
	
	  return arr;
	}
	
	function getUnchangedComponents(measurement) {
	  // For a given reconcile, look at which components did not actually
	  // render anything to the DOM and return a mapping of their ID to
	  // the amount of time it took to render the entire subtree.
	  var cleanComponents = {};
	  var dirtyLeafIDs = Object.keys(measurement.writes);
	  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
	
	  for (var id in allIDs) {
	    var isDirty = false;
	    // For each component that rendered, see if a component that triggered
	    // a DOM op is in its subtree.
	    for (var i = 0; i < dirtyLeafIDs.length; i++) {
	      if (dirtyLeafIDs[i].indexOf(id) === 0) {
	        isDirty = true;
	        break;
	      }
	    }
	    // check if component newly created
	    if (measurement.created[id]) {
	      isDirty = true;
	    }
	    if (!isDirty && measurement.counts[id] > 0) {
	      cleanComponents[id] = true;
	    }
	  }
	  return cleanComponents;
	}
	
	var ReactDefaultPerfAnalysis = {
	  getExclusiveSummary: getExclusiveSummary,
	  getInclusiveSummary: getInclusiveSummary,
	  getDOMSummary: getDOMSummary,
	  getTotalTime: getTotalTime
	};
	
	module.exports = ReactDefaultPerfAnalysis;

/***/ },
/* 143 */
/*!**********************************************!*\
  !*** ./~/react/~/fbjs/lib/performanceNow.js ***!
  \**********************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performanceNow
	 * @typechecks
	 */
	
	'use strict';
	
	var performance = __webpack_require__(/*! ./performance */ 144);
	
	var performanceNow;
	
	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (performance.now) {
	  performanceNow = function performanceNow() {
	    return performance.now();
	  };
	} else {
	  performanceNow = function performanceNow() {
	    return Date.now();
	  };
	}
	
	module.exports = performanceNow;

/***/ },
/* 144 */
/*!*******************************************!*\
  !*** ./~/react/~/fbjs/lib/performance.js ***!
  \*******************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performance
	 * @typechecks
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(/*! ./ExecutionEnvironment */ 8);
	
	var performance;
	
	if (ExecutionEnvironment.canUseDOM) {
	  performance = window.performance || window.msPerformance || window.webkitPerformance;
	}
	
	module.exports = performance || {};

/***/ },
/* 145 */
/*!*************************************!*\
  !*** ./~/react/lib/ReactVersion.js ***!
  \*************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactVersion
	 */
	
	'use strict';
	
	module.exports = '0.14.6';

/***/ },
/* 146 */
/*!***************************************************!*\
  !*** ./~/react/lib/renderSubtreeIntoContainer.js ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule renderSubtreeIntoContainer
	*/
	
	'use strict';
	
	var ReactMount = __webpack_require__(/*! ./ReactMount */ 27);
	
	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ },
/* 147 */
/*!**************************!*\
  !*** ./~/react/react.js ***!
  \**************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(/*! ./lib/React */ 148);

/***/ },
/* 148 */
/*!******************************!*\
  !*** ./~/react/lib/React.js ***!
  \******************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule React
	 */
	
	'use strict';
	
	var ReactDOM = __webpack_require__(/*! ./ReactDOM */ 2);
	var ReactDOMServer = __webpack_require__(/*! ./ReactDOMServer */ 149);
	var ReactIsomorphic = __webpack_require__(/*! ./ReactIsomorphic */ 153);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 38);
	var deprecated = __webpack_require__(/*! ./deprecated */ 158);
	
	// `version` will be added here by ReactIsomorphic.
	var React = {};
	
	assign(React, ReactIsomorphic);
	
	assign(React, {
	  // ReactDOM
	  findDOMNode: deprecated('findDOMNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.findDOMNode),
	  render: deprecated('render', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.render),
	  unmountComponentAtNode: deprecated('unmountComponentAtNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.unmountComponentAtNode),
	
	  // ReactDOMServer
	  renderToString: deprecated('renderToString', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToString),
	  renderToStaticMarkup: deprecated('renderToStaticMarkup', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToStaticMarkup)
	});
	
	React.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOM;
	React.__SECRET_DOM_SERVER_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOMServer;
	
	module.exports = React;

/***/ },
/* 149 */
/*!***************************************!*\
  !*** ./~/react/lib/ReactDOMServer.js ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMServer
	 */
	
	'use strict';
	
	var ReactDefaultInjection = __webpack_require__(/*! ./ReactDefaultInjection */ 70);
	var ReactServerRendering = __webpack_require__(/*! ./ReactServerRendering */ 150);
	var ReactVersion = __webpack_require__(/*! ./ReactVersion */ 145);
	
	ReactDefaultInjection.inject();
	
	var ReactDOMServer = {
	  renderToString: ReactServerRendering.renderToString,
	  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
	  version: ReactVersion
	};
	
	module.exports = ReactDOMServer;

/***/ },
/* 150 */
/*!*********************************************!*\
  !*** ./~/react/lib/ReactServerRendering.js ***!
  \*********************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactServerRendering
	 */
	'use strict';
	
	var ReactDefaultBatchingStrategy = __webpack_require__(/*! ./ReactDefaultBatchingStrategy */ 91);
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 41);
	var ReactInstanceHandles = __webpack_require__(/*! ./ReactInstanceHandles */ 44);
	var ReactMarkupChecksum = __webpack_require__(/*! ./ReactMarkupChecksum */ 47);
	var ReactServerBatchingStrategy = __webpack_require__(/*! ./ReactServerBatchingStrategy */ 151);
	var ReactServerRenderingTransaction = __webpack_require__(/*! ./ReactServerRenderingTransaction */ 152);
	var ReactUpdates = __webpack_require__(/*! ./ReactUpdates */ 53);
	
	var emptyObject = __webpack_require__(/*! fbjs/lib/emptyObject */ 57);
	var instantiateReactComponent = __webpack_require__(/*! ./instantiateReactComponent */ 61);
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 12);
	
	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup
	 */
	function renderToString(element) {
	  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : invariant(false) : undefined;
	
	  var transaction;
	  try {
	    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);
	
	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(false);
	
	    return transaction.perform(function () {
	      var componentInstance = instantiateReactComponent(element, null);
	      var markup = componentInstance.mountComponent(id, transaction, emptyObject);
	      return ReactMarkupChecksum.addChecksumToMarkup(markup);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	    // Revert to the DOM batching strategy since these two renderers
	    // currently share these stateful modules.
	    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	  }
	}
	
	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup, without the extra React ID and checksum
	 * (for generating static pages)
	 */
	function renderToStaticMarkup(element) {
	  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : invariant(false) : undefined;
	
	  var transaction;
	  try {
	    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);
	
	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(true);
	
	    return transaction.perform(function () {
	      var componentInstance = instantiateReactComponent(element, null);
	      return componentInstance.mountComponent(id, transaction, emptyObject);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	    // Revert to the DOM batching strategy since these two renderers
	    // currently share these stateful modules.
	    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	  }
	}
	
	module.exports = {
	  renderToString: renderToString,
	  renderToStaticMarkup: renderToStaticMarkup
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 151 */
/*!****************************************************!*\
  !*** ./~/react/lib/ReactServerBatchingStrategy.js ***!
  \****************************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerBatchingStrategy
	 * @typechecks
	 */
	
	'use strict';
	
	var ReactServerBatchingStrategy = {
	  isBatchingUpdates: false,
	  batchedUpdates: function batchedUpdates(callback) {
	    // Don't do anything here. During the server rendering we don't want to
	    // schedule any updates. We will simply ignore them.
	  }
	};
	
	module.exports = ReactServerBatchingStrategy;

/***/ },
/* 152 */
/*!********************************************************!*\
  !*** ./~/react/lib/ReactServerRenderingTransaction.js ***!
  \********************************************************/
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerRenderingTransaction
	 * @typechecks
	 */
	
	'use strict';
	
	var PooledClass = __webpack_require__(/*! ./PooledClass */ 55);
	var CallbackQueue = __webpack_require__(/*! ./CallbackQueue */ 54);
	var Transaction = __webpack_require__(/*! ./Transaction */ 56);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 38);
	var emptyFunction = __webpack_require__(/*! fbjs/lib/emptyFunction */ 14);
	
	/**
	 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
	 * during the performing of the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function initialize() {
	    this.reactMountReady.reset();
	  },
	
	  close: emptyFunction
	};
	
	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];
	
	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = false;
	}
	
	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap procedures.
	   */
	  getTransactionWrappers: function getTransactionWrappers() {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function getReactMountReady() {
	    return this.reactMountReady;
	  },
	
	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function destructor() {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};
	
	assign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);
	
	PooledClass.addPoolingTo(ReactServerRenderingTransaction);
	
	module.exports = ReactServerRenderingTransaction;

/***/ },
/* 153 */
/*!****************************************!*\
  !*** ./~/react/lib/ReactIsomorphic.js ***!
  \****************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactIsomorphic
	 */
	
	'use strict';
	
	var ReactChildren = __webpack_require__(/*! ./ReactChildren */ 109);
	var ReactComponent = __webpack_require__(/*! ./ReactComponent */ 122);
	var ReactClass = __webpack_require__(/*! ./ReactClass */ 121);
	var ReactDOMFactories = __webpack_require__(/*! ./ReactDOMFactories */ 154);
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 41);
	var ReactElementValidator = __webpack_require__(/*! ./ReactElementValidator */ 155);
	var ReactPropTypes = __webpack_require__(/*! ./ReactPropTypes */ 106);
	var ReactVersion = __webpack_require__(/*! ./ReactVersion */ 145);
	
	var assign = __webpack_require__(/*! ./Object.assign */ 38);
	var onlyChild = __webpack_require__(/*! ./onlyChild */ 157);
	
	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;
	
	if (process.env.NODE_ENV !== 'production') {
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}
	
	var React = {
	
	  // Modern
	
	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },
	
	  Component: ReactComponent,
	
	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,
	
	  // Classic
	
	  PropTypes: ReactPropTypes,
	  createClass: ReactClass.createClass,
	  createFactory: createFactory,
	  createMixin: function createMixin(mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },
	
	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,
	
	  version: ReactVersion,
	
	  // Hook for JSX spread, don't use this for anything else.
	  __spread: assign
	};
	
	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 154 */
/*!******************************************!*\
  !*** ./~/react/lib/ReactDOMFactories.js ***!
  \******************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFactories
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 41);
	var ReactElementValidator = __webpack_require__(/*! ./ReactElementValidator */ 155);
	
	var mapObject = __webpack_require__(/*! fbjs/lib/mapObject */ 156);
	
	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @param {string} tag Tag name (e.g. `div`).
	 * @private
	 */
	function createDOMFactory(tag) {
	  if (process.env.NODE_ENV !== 'production') {
	    return ReactElementValidator.createFactory(tag);
	  }
	  return ReactElement.createFactory(tag);
	}
	
	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOMFactories = mapObject({
	  a: 'a',
	  abbr: 'abbr',
	  address: 'address',
	  area: 'area',
	  article: 'article',
	  aside: 'aside',
	  audio: 'audio',
	  b: 'b',
	  base: 'base',
	  bdi: 'bdi',
	  bdo: 'bdo',
	  big: 'big',
	  blockquote: 'blockquote',
	  body: 'body',
	  br: 'br',
	  button: 'button',
	  canvas: 'canvas',
	  caption: 'caption',
	  cite: 'cite',
	  code: 'code',
	  col: 'col',
	  colgroup: 'colgroup',
	  data: 'data',
	  datalist: 'datalist',
	  dd: 'dd',
	  del: 'del',
	  details: 'details',
	  dfn: 'dfn',
	  dialog: 'dialog',
	  div: 'div',
	  dl: 'dl',
	  dt: 'dt',
	  em: 'em',
	  embed: 'embed',
	  fieldset: 'fieldset',
	  figcaption: 'figcaption',
	  figure: 'figure',
	  footer: 'footer',
	  form: 'form',
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  head: 'head',
	  header: 'header',
	  hgroup: 'hgroup',
	  hr: 'hr',
	  html: 'html',
	  i: 'i',
	  iframe: 'iframe',
	  img: 'img',
	  input: 'input',
	  ins: 'ins',
	  kbd: 'kbd',
	  keygen: 'keygen',
	  label: 'label',
	  legend: 'legend',
	  li: 'li',
	  link: 'link',
	  main: 'main',
	  map: 'map',
	  mark: 'mark',
	  menu: 'menu',
	  menuitem: 'menuitem',
	  meta: 'meta',
	  meter: 'meter',
	  nav: 'nav',
	  noscript: 'noscript',
	  object: 'object',
	  ol: 'ol',
	  optgroup: 'optgroup',
	  option: 'option',
	  output: 'output',
	  p: 'p',
	  param: 'param',
	  picture: 'picture',
	  pre: 'pre',
	  progress: 'progress',
	  q: 'q',
	  rp: 'rp',
	  rt: 'rt',
	  ruby: 'ruby',
	  s: 's',
	  samp: 'samp',
	  script: 'script',
	  section: 'section',
	  select: 'select',
	  small: 'small',
	  source: 'source',
	  span: 'span',
	  strong: 'strong',
	  style: 'style',
	  sub: 'sub',
	  summary: 'summary',
	  sup: 'sup',
	  table: 'table',
	  tbody: 'tbody',
	  td: 'td',
	  textarea: 'textarea',
	  tfoot: 'tfoot',
	  th: 'th',
	  thead: 'thead',
	  time: 'time',
	  title: 'title',
	  tr: 'tr',
	  track: 'track',
	  u: 'u',
	  ul: 'ul',
	  'var': 'var',
	  video: 'video',
	  wbr: 'wbr',
	
	  // SVG
	  circle: 'circle',
	  clipPath: 'clipPath',
	  defs: 'defs',
	  ellipse: 'ellipse',
	  g: 'g',
	  image: 'image',
	  line: 'line',
	  linearGradient: 'linearGradient',
	  mask: 'mask',
	  path: 'path',
	  pattern: 'pattern',
	  polygon: 'polygon',
	  polyline: 'polyline',
	  radialGradient: 'radialGradient',
	  rect: 'rect',
	  stop: 'stop',
	  svg: 'svg',
	  text: 'text',
	  tspan: 'tspan'
	
	}, createDOMFactory);
	
	module.exports = ReactDOMFactories;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 155 */
/*!**********************************************!*\
  !*** ./~/react/lib/ReactElementValidator.js ***!
  \**********************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElementValidator
	 */
	
	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 41);
	var ReactPropTypeLocations = __webpack_require__(/*! ./ReactPropTypeLocations */ 64);
	var ReactPropTypeLocationNames = __webpack_require__(/*! ./ReactPropTypeLocationNames */ 65);
	var ReactCurrentOwner = __webpack_require__(/*! ./ReactCurrentOwner */ 4);
	
	var canDefineProperty = __webpack_require__(/*! ./canDefineProperty */ 42);
	var getIteratorFn = __webpack_require__(/*! ./getIteratorFn */ 107);
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 12);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 24);
	
	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};
	
	var loggedTypeFailures = {};
	
	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;
	
	  var addenda = getAddendaForKeyUse('uniqueKey', element, parentType);
	  if (addenda === null) {
	    // we already showed the warning
	    return;
	  }
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s%s', addenda.parentOrOwner || '', addenda.childOwner || '', addenda.url || '') : undefined;
	}
	
	/**
	 * Shared warning and monitoring code for the key warnings.
	 *
	 * @internal
	 * @param {string} messageType A key used for de-duping warnings.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 * @returns {?object} A set of addenda to use in the warning message, or null
	 * if the warning has already been shown before (and shouldn't be shown again).
	 */
	function getAddendaForKeyUse(messageType, element, parentType) {
	  var addendum = getDeclarationErrorAddendum();
	  if (!addendum) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      addendum = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }
	
	  var memoizer = ownerHasKeyUseWarning[messageType] || (ownerHasKeyUseWarning[messageType] = {});
	  if (memoizer[addendum]) {
	    return null;
	  }
	  memoizer[addendum] = true;
	
	  var addenda = {
	    parentOrOwner: addendum,
	    url: ' See https://fb.me/react-warning-keys for more information.',
	    childOwner: null
	  };
	
	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    addenda.childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }
	
	  return addenda;
	}
	
	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if ((typeof node === 'undefined' ? 'undefined' : _typeof(node)) !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}
	
	/**
	 * Assert that the props are valid
	 *
	 * @param {string} componentName Name of the component for error messages.
	 * @param {object} propTypes Map of prop name to a ReactPropType
	 * @param {object} props
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @private
	 */
	function checkPropTypes(componentName, propTypes, props, location) {
	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
	        error = propTypes[propName](props, propName, componentName, location);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], propName, typeof error === 'undefined' ? 'undefined' : _typeof(error)) : undefined;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;
	
	        var addendum = getDeclarationErrorAddendum();
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed propType: %s%s', error.message, addendum) : undefined;
	      }
	    }
	  }
	}
	
	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkPropTypes(name, componentClass.propTypes, element.props, ReactPropTypeLocations.prop);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : undefined;
	  }
	}
	
	var ReactElementValidator = {
	
	  createElement: function createElement(type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    process.env.NODE_ENV !== 'production' ? warning(validType, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : undefined;
	
	    var element = ReactElement.createElement.apply(this, arguments);
	
	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }
	
	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }
	
	    validatePropTypes(element);
	
	    return element;
	  },
	
	  createFactory: function createFactory(type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;
	
	    if (process.env.NODE_ENV !== 'production') {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function get() {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : undefined;
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }
	
	    return validatedFactory;
	  },
	
	  cloneElement: function cloneElement(element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }
	
	};
	
	module.exports = ReactElementValidator;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 156 */
/*!*****************************************!*\
  !*** ./~/react/~/fbjs/lib/mapObject.js ***!
  \*****************************************/
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule mapObject
	 */
	
	'use strict';
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	/**
	 * Executes the provided `callback` once for each enumerable own property in the
	 * object and constructs a new object from the results. The `callback` is
	 * invoked with three arguments:
	 *
	 *  - the property value
	 *  - the property name
	 *  - the object being traversed
	 *
	 * Properties that are added after the call to `mapObject` will not be visited
	 * by `callback`. If the values of existing properties are changed, the value
	 * passed to `callback` will be the value at the time `mapObject` visits them.
	 * Properties that are deleted before being visited are not visited.
	 *
	 * @grep function objectMap()
	 * @grep function objMap()
	 *
	 * @param {?object} object
	 * @param {function} callback
	 * @param {*} context
	 * @return {?object}
	 */
	function mapObject(object, callback, context) {
	  if (!object) {
	    return null;
	  }
	  var result = {};
	  for (var name in object) {
	    if (hasOwnProperty.call(object, name)) {
	      result[name] = callback.call(context, object[name], name, object);
	    }
	  }
	  return result;
	}
	
	module.exports = mapObject;

/***/ },
/* 157 */
/*!**********************************!*\
  !*** ./~/react/lib/onlyChild.js ***!
  \**********************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule onlyChild
	 */
	'use strict';
	
	var ReactElement = __webpack_require__(/*! ./ReactElement */ 41);
	
	var invariant = __webpack_require__(/*! fbjs/lib/invariant */ 12);
	
	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection. The current implementation of this
	 * function assumes that a single child gets passed without a wrapper, but the
	 * purpose of this helper function is to abstract away the particular structure
	 * of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactComponent} The first and only `ReactComponent` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'onlyChild must be passed a children with exactly one child.') : invariant(false) : undefined;
	  return children;
	}
	
	module.exports = onlyChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 158 */
/*!***********************************!*\
  !*** ./~/react/lib/deprecated.js ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule deprecated
	 */
	
	'use strict';
	
	var assign = __webpack_require__(/*! ./Object.assign */ 38);
	var warning = __webpack_require__(/*! fbjs/lib/warning */ 24);
	
	/**
	 * This will log a single deprecation notice per function and forward the call
	 * on to the new API.
	 *
	 * @param {string} fnName The name of the function
	 * @param {string} newModule The module that fn will exist in
	 * @param {string} newPackage The module that fn will exist in
	 * @param {*} ctx The context this forwarded call should run in
	 * @param {function} fn The function to forward on to
	 * @return {function} The function that will warn once and then call fn
	 */
	function deprecated(fnName, newModule, newPackage, ctx, fn) {
	  var warned = false;
	  if (process.env.NODE_ENV !== 'production') {
	    var newFn = function newFn() {
	      process.env.NODE_ENV !== 'production' ? warning(warned,
	      // Require examples in this string must be split to prevent React's
	      // build tools from mistaking them for real requires.
	      // Otherwise the build tools will attempt to build a '%s' module.
	      'React.%s is deprecated. Please use %s.%s from require' + '(\'%s\') ' + 'instead.', fnName, newModule, fnName, newPackage) : undefined;
	      warned = true;
	      return fn.apply(ctx, arguments);
	    };
	    // We need to make sure all properties of the original fn are copied over.
	    // In particular, this is needed to support PropTypes
	    return assign(newFn, fn);
	  }
	
	  return fn;
	}
	
	module.exports = deprecated;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/~/node-libs-browser/~/process/browser.js */ 3)))

/***/ },
/* 159 */
/*!***********************!*\
  !*** ./src/MyApp.jsx ***!
  \***********************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _reactDom = __webpack_require__(/*! react-dom */ 1);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _react = __webpack_require__(/*! react */ 147);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _agGridReactComponent = __webpack_require__(/*! ag-grid-react-component */ 160);
	
	var _RefData = __webpack_require__(/*! ./RefData */ 162);
	
	var _RefData2 = _interopRequireDefault(_RefData);
	
	var _RowDataFactory = __webpack_require__(/*! ./RowDataFactory */ 172);
	
	var _RowDataFactory2 = _interopRequireDefault(_RowDataFactory);
	
	var _ColDefFactory = __webpack_require__(/*! ./ColDefFactory.jsx */ 174);
	
	var _ColDefFactory2 = _interopRequireDefault(_ColDefFactory);
	
	__webpack_require__(/*! ./MyApp.css */ 164);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var MyApp = function (_React$Component) {
	    _inherits(MyApp, _React$Component);
	
	    function MyApp() {
	        _classCallCheck(this, MyApp);
	
	        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(MyApp).call(this));
	
	        _this.state = {
	            quickFilterText: null,
	            showGrid: true,
	            showToolPanel: false,
	            columnDefs: new _ColDefFactory2.default().createColDefs(),
	            rowData: new _RowDataFactory2.default().createRowData(),
	            icons: {
	                columnRemoveFromGroup: '<i class="fa fa-remove"/>',
	                filter: '<i class="fa fa-filter"/>',
	                sortAscending: '<i class="fa fa-long-arrow-down"/>',
	                sortDescending: '<i class="fa fa-long-arrow-up"/>',
	                groupExpanded: '<i class="fa fa-minus-square-o"/>',
	                groupContracted: '<i class="fa fa-plus-square-o"/>',
	                columnGroupOpened: '<i class="fa fa-minus-square-o"/>',
	                columnGroupClosed: '<i class="fa fa-plus-square-o"/>'
	            }
	        };
	
	        // the grid options are optional, because you can provide every property
	        // to the grid via standard React properties. however, the react interface
	        // doesn't block you from using the standard JavaScript interface if you
	        // wish. Maybe you have the gridOptions stored as JSON on your server? If
	        // you do, the providing the gridOptions as a standalone object is just
	        // what you want!
	        _this.gridOptions = {
	            // this is how you listen for events using gridOptions
	            onModelUpdated: function onModelUpdated() {
	                console.log('event onModelUpdated received');
	            },
	            // this is a simple property
	            rowBuffer: 10 // no need to set this, the default is fine for almost all scenarios
	        };
	        return _this;
	    }
	
	    _createClass(MyApp, [{
	        key: 'onShowGrid',
	        value: function onShowGrid(show) {
	            this.setState({
	                showGrid: show
	            });
	        }
	    }, {
	        key: 'onToggleToolPanel',
	        value: function onToggleToolPanel(event) {
	            this.setState({ showToolPanel: event.target.checked });
	        }
	    }, {
	        key: 'onReady',
	        value: function onReady(params) {
	            this.api = params.api;
	            this.columnApi = params.columnApi;
	        }
	    }, {
	        key: 'selectAll',
	        value: function selectAll() {
	            this.api.selectAll();
	        }
	    }, {
	        key: 'deselectAll',
	        value: function deselectAll() {
	            this.api.deselectAll();
	        }
	    }, {
	        key: 'setCountryVisible',
	        value: function setCountryVisible(visible) {
	            this.columnApi.setColumnVisible('country', visible);
	        }
	    }, {
	        key: 'onQuickFilterText',
	        value: function onQuickFilterText(event) {
	            this.setState({ quickFilterText: event.target.value });
	        }
	    }, {
	        key: 'onCellClicked',
	        value: function onCellClicked(event) {
	            console.log('onCellClicked: ' + event.data.name + ', col ' + event.colIndex);
	        }
	    }, {
	        key: 'onRowSelected',
	        value: function onRowSelected(event) {
	            console.log('onRowSelected: ' + event.node.data.name);
	        }
	    }, {
	        key: 'onRefreshData',
	        value: function onRefreshData() {
	            var newRowData = new _RowDataFactory2.default().createRowData();
	            this.setState({
	                rowData: newRowData
	            });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return(
	                // ag-Grid comes with a React Component waiting to be used
	                _react2.default.createElement(_agGridReactComponent.AgGridReact
	
	                // listen for events with React callbacks
	
	                // gridOptions is optional - it's possible to provide
	                // all values as React props
	                , { onRowSelected: this.onRowSelected.bind(this),
	                    onCellClicked: this.onCellClicked.bind(this)
	
	                    // binding to properties within React State or Props
	                    , showToolPanel: this.state.showToolPanel,
	                    quickFilterText: this.state.quickFilterText,
	                    icons: this.state.icons
	
	                    // column definitions and row data are immutable, the grid
	                    // will update when these lists change
	                    , columnDefs: this.state.columnDefs,
	                    rowData: this.state.rowData
	
	                    // or provide props the old way with no binding
	                    , rowSelection: 'multiple',
	                    enableSorting: 'true',
	                    enableFilter: 'true',
	                    rowHeight: '22'
	                })
	            );
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var gridTemplate;
	            var bottomHeaderTemplate;
	            var topHeaderTemplate;
	
	            topHeaderTemplate = _react2.default.createElement(
	                'div',
	                null,
	                _react2.default.createElement(
	                    'div',
	                    { style: { float: 'right' } },
	                    _react2.default.createElement('input', { type: 'text', onChange: this.onQuickFilterText.bind(this), placeholder: 'Type text to filter...' }),
	                    _react2.default.createElement(
	                        'button',
	                        { id: 'btDestroyGrid', disabled: !this.state.showGrid, onClick: this.onShowGrid.bind(this, false) },
	                        'Destroy Grid'
	                    ),
	                    _react2.default.createElement(
	                        'button',
	                        { id: 'btCreateGrid', disabled: this.state.showGrid, onClick: this.onShowGrid.bind(this, true) },
	                        'Create Grid'
	                    )
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { style: { padding: '4px' } },
	                    _react2.default.createElement(
	                        'b',
	                        null,
	                        'Employees Skills and Contact Details'
	                    ),
	                    ' ',
	                    _react2.default.createElement('span', { id: 'rowCount' })
	                )
	            );
	
	            // showing the bottom header and grid is optional, so we put in a switch
	            if (this.state.showGrid) {
	                bottomHeaderTemplate = _react2.default.createElement(
	                    'div',
	                    null,
	                    _react2.default.createElement(
	                        'div',
	                        { style: { padding: 4 }, className: 'toolbar' },
	                        _react2.default.createElement(
	                            'span',
	                            null,
	                            'Grid API:',
	                            _react2.default.createElement(
	                                'button',
	                                { onClick: this.selectAll.bind(this) },
	                                'Select All'
	                            ),
	                            _react2.default.createElement(
	                                'button',
	                                { onClick: this.deselectAll.bind(this) },
	                                'Clear Selection'
	                            )
	                        ),
	                        _react2.default.createElement(
	                            'span',
	                            { style: { marginLeft: 20 } },
	                            'Column API:',
	                            _react2.default.createElement(
	                                'button',
	                                { onClick: this.setCountryVisible.bind(this, false) },
	                                'Hide Country Column'
	                            ),
	                            _react2.default.createElement(
	                                'button',
	                                { onClick: this.setCountryVisible.bind(this, true) },
	                                'Show Country Column'
	                            )
	                        )
	                    ),
	                    _react2.default.createElement('div', { style: { clear: 'both' } }),
	                    _react2.default.createElement(
	                        'div',
	                        { style: { padding: 4 }, className: 'toolbar' },
	                        _react2.default.createElement(
	                            'label',
	                            null,
	                            _react2.default.createElement('input', { type: 'checkbox', onChange: this.onToggleToolPanel.bind(this) }),
	                            'Show Tool Panel'
	                        ),
	                        _react2.default.createElement(
	                            'button',
	                            { onClick: this.onRefreshData.bind(this) },
	                            'Refresh Data'
	                        )
	                    ),
	                    _react2.default.createElement('div', { style: { clear: 'both' } })
	                );
	                gridTemplate = _react2.default.createElement(
	                    'div',
	                    { style: { height: 400 }, className: 'ag-fresh' },
	                    _react2.default.createElement(_agGridReactComponent.AgGridReact, { gridOptions: this.gridOptions
	
	                        // listening for events
	                        , onReady: this.onReady.bind(this),
	                        onRowSelected: this.onRowSelected.bind(this),
	                        onCellClicked: this.onCellClicked.bind(this)
	
	                        // binding to simple properties
	                        , showToolPanel: this.state.showToolPanel,
	                        quickFilterText: this.state.quickFilterText
	
	                        // binding to an object property
	                        , icons: this.state.icons
	
	                        // binding to array properties
	                        , columnDefs: this.state.columnDefs,
	                        rowData: this.state.rowData
	
	                        // no binding, just providing harde coded strings for the properties
	                        , rowSelection: 'multiple',
	                        enableColResize: 'true',
	                        enableSorting: 'true',
	                        enableFilter: 'true',
	                        groupHeaders: 'true',
	                        rowHeight: '22',
	                        debug: 'true'
	                    })
	                );
	            }
	
	            return _react2.default.createElement(
	                'div',
	                { style: { width: '800px' } },
	                _react2.default.createElement(
	                    'div',
	                    { style: { padding: '4px' } },
	                    topHeaderTemplate,
	                    bottomHeaderTemplate,
	                    gridTemplate
	                )
	            );
	        }
	    }]);
	
	    return MyApp;
	}(_react2.default.Component);
	
	exports.default = MyApp;

/***/ },
/* 160 */
/*!*******************************************************************!*\
  !*** ./~/ag-grid-react-component/dist/ag-grid-react-component.js ***!
  \*******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * ag-grid-react-component - ag-Grid React Component
	 * @version v0.0.1
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	var React = __webpack_require__(/*! react */ 147);
	var ReactDOM = __webpack_require__(/*! react-dom */ 1);
	var AgGrid = __webpack_require__(/*! ag-grid */ 161);
	var ag;
	(function (ag) {
	    var react;
	    (function (react) {
	        react.AgGridReact = React.createClass({
	            displayName: 'AgGridReact',
	
	            render: function render() {
	                return React.DOM.div({
	                    style: { height: '100%' }
	                });
	            },
	            componentDidMount: function componentDidMount() {
	                var domNode = ReactDOM.findDOMNode(this);
	                this.gridOptions = AgGrid.ComponentUtil.copyAttributesToGridOptions(this.props.gridOptions, this.props);
	                new AgGrid.Grid(domNode, this.gridOptions);
	                this.api = this.gridOptions.api;
	                this.columnApi = this.gridOptions.columnApi;
	            },
	            getCallbackForEvent: function getCallbackForEvent(eventName) {
	                if (!eventName || eventName.length < 2) {
	                    return eventName;
	                } else {
	                    return 'on' + eventName[0].toUpperCase() + eventName.substr(1);
	                }
	            },
	            // duplicated, taken from gridOptionsWrapper
	            globalEventListener: function globalEventListener(eventName, event) {
	                var callbackMethodName = this.getCallbackForEvent(eventName);
	                var callbackFromProps = this.props[callbackMethodName];
	                if (callbackFromProps) {
	                    callbackFromProps(event);
	                }
	            },
	            shouldComponentUpdate: function shouldComponentUpdate() {
	                // we want full control of the dom, as ag-Grid doesn't use React internally,
	                // so for performance reasons we tell React we don't need render called after
	                // property changes.
	                return false;
	            },
	            componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	                var _this = this;
	                // keeping consistent with web components, put changing
	                // values in currentValue and previousValue pairs and
	                // not include items that have not changed.
	                var changes = {};
	                AgGrid.ComponentUtil.ALL_PROPERTIES.forEach(function (propKey) {
	                    if (_this.props[propKey] !== nextProps[propKey]) {
	                        changes[propKey] = {
	                            previousValue: _this.props[propKey],
	                            currentValue: nextProps[propKey]
	                        };
	                    }
	                });
	                AgGrid.ComponentUtil.getEventCallbacks().forEach(function (funcName) {
	                    if (_this.props[funcName] !== nextProps[funcName]) {
	                        changes[funcName] = {
	                            previousValue: _this.props[funcName],
	                            currentValue: nextProps[funcName]
	                        };
	                    }
	                });
	                AgGrid.ComponentUtil.processOnChange(changes, this.gridOptions, this.api, this.columnApi);
	            },
	            componentWillUnmount: function componentWillUnmount() {
	                this.api.destroy();
	            }
	        });
	        react.AgGridReact.propTypes = {
	            gridOptions: React.PropTypes.object
	        };
	        addProperties(AgGrid.ComponentUtil.getEventCallbacks(), React.PropTypes.func);
	        addProperties(AgGrid.ComponentUtil.BOOLEAN_PROPERTIES, React.PropTypes.bool);
	        addProperties(AgGrid.ComponentUtil.STRING_PROPERTIES, React.PropTypes.string);
	        addProperties(AgGrid.ComponentUtil.OBJECT_PROPERTIES, React.PropTypes.object);
	        addProperties(AgGrid.ComponentUtil.ARRAY_PROPERTIES, React.PropTypes.array);
	        addProperties(AgGrid.ComponentUtil.NUMBER_PROPERTIES, React.PropTypes.number);
	        addProperties(AgGrid.ComponentUtil.FUNCTION_PROPERTIES, React.PropTypes.func);
	        function addProperties(listOfProps, propType) {
	            listOfProps.forEach(function (propKey) {
	                react.AgGridReact[propKey] = propType;
	            });
	        }
	    })(react = ag.react || (ag.react = {}));
	})(ag || (ag = {}));
	/// <reference path="../../typings/tsd" />
	/// <reference path="./AgGridReact" />
	// creating the random local variable was needed to get the unit tests working.
	// if not, the tests would not load as we were referencing an undefined window object
	var __RANDOM_GLOBAL_VARIABLE_AG_GRID_REACT_COMPONENT_SGFAEWJFKJSDHGFKSDAJ;
	if (typeof window !== 'undefined') {
	    __RANDOM_GLOBAL_VARIABLE_AG_GRID_REACT_COMPONENT_SGFAEWJFKJSDHGFKSDAJ = window;
	}
	(function () {
	    if (true) {
	        exports = ag.react;
	        if (typeof module !== 'undefined' && module.exports) {
	            module.exports = ag.react;
	        }
	    }
	}).call(__RANDOM_GLOBAL_VARIABLE_AG_GRID_REACT_COMPONENT_SGFAEWJFKJSDHGFKSDAJ);
	var React = __webpack_require__(/*! react */ 147);
	var ReactDOM = __webpack_require__(/*! react-dom */ 1);
	var ag;
	(function (ag) {
	    var react;
	    (function (react) {
	        function reactCellRendererFactory(reactComponent) {
	            return function (params) {
	                params.eParentOfValue.addElementAttachedListener(function (eCell) {
	                    ReactDOM.render(React.createElement(reactComponent, { params: params }), eCell);
	                    // if you are reading this, and want to do it using jsx, the equivalent is below.
	                    // however because we don't have the actual class here (just a reference to the class)
	                    // it can't be built into jsx. besides, the ag-grid-react-component project is so
	                    // small, i didn't set up jsx for it.
	                    //ReactDOM.render(<SkillsCellRenderer params={params}/>, eCell);
	                    // we want to know when the row is taken out of the grid, so that we do React cleanup
	                    params.api.addVirtualRowListener('virtualRowRemoved', params.rowIndex, function () {
	                        ReactDOM.unmountComponentAtNode(eCell);
	                    });
	                });
	                // return null to the grid, as we don't want it responsible for rendering
	                return null;
	            };
	        }
	        react.reactCellRendererFactory = reactCellRendererFactory;
	    })(react = ag.react || (ag.react = {}));
	})(ag || (ag = {}));
	var React = __webpack_require__(/*! react */ 147);
	var ReactDOM = __webpack_require__(/*! react-dom */ 1);
	var ag;
	(function (ag) {
	    var react;
	    (function (react) {
	        // wraps the provided React filter component
	        function reactFilterFactory(reactComponent) {
	            var FilterWrapper = function () {
	                function FilterWrapper() {}
	                FilterWrapper.prototype.init = function (params) {
	                    this.eGui = document.createElement('div');
	                    this.backingInstance = ReactDOM.render(React.createElement(reactComponent, { params: params }), this.eGui);
	                    if (typeof this.backingInstance.init === 'function') {
	                        this.backingInstance.init(params);
	                    }
	                };
	                FilterWrapper.prototype.getGui = function () {
	                    return this.eGui;
	                };
	                FilterWrapper.prototype.isFilterActive = function () {
	                    if (typeof this.backingInstance.isFilterActive === 'function') {
	                        return this.backingInstance.isFilterActive();
	                    } else {
	                        return false;
	                    }
	                };
	                FilterWrapper.prototype.doesFilterPass = function (params) {
	                    if (typeof this.backingInstance.doesFilterPass === 'function') {
	                        return this.backingInstance.doesFilterPass(params);
	                    } else {
	                        return true;
	                    }
	                };
	                FilterWrapper.prototype.getApi = function () {
	                    if (typeof this.backingInstance.getApi === 'function') {
	                        return this.backingInstance.getApi();
	                    } else {
	                        return undefined;
	                    }
	                };
	                // optional methods
	                FilterWrapper.prototype.afterGuiAttached = function (params) {
	                    if (typeof this.backingInstance.afterGuiAttached === 'function') {
	                        return this.backingInstance.afterGuiAttached(params);
	                    }
	                };
	                FilterWrapper.prototype.onNewRowsLoaded = function () {
	                    if (typeof this.backingInstance.onNewRowsLoaded === 'function') {
	                        return this.backingInstance.onNewRowsLoaded();
	                    }
	                };
	                FilterWrapper.prototype.onAnyFilterChanged = function () {
	                    if (typeof this.backingInstance.onAnyFilterChanged === 'function') {
	                        return this.backingInstance.onAnyFilterChanged();
	                    }
	                };
	                FilterWrapper.prototype.destroy = function () {
	                    if (typeof this.backingInstance.destroy === 'function') {
	                        this.backingInstance.destroy();
	                    }
	                    ReactDOM.unmountComponentAtNode(this.eGui);
	                };
	                return FilterWrapper;
	            }();
	            return FilterWrapper;
	        }
	        react.reactFilterFactory = reactFilterFactory;
	    })(react = ag.react || (ag.react = {}));
	})(ag || (ag = {}));

/***/ },
/* 161 */
/*!***********************************!*\
  !*** ./~/ag-grid/dist/ag-grid.js ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol?"symbol":typeof obj;}; /**
	 * ag-grid - Advanced Framework Agnostic Javascript Datagrid.
	 * @version v3.1.2
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */ /// <references path='events.ts'/>
	var ag;(function(ag){var grid;(function(grid){var ColumnChangeEvent=function(){function ColumnChangeEvent(type){this.type=type;}ColumnChangeEvent.prototype.toString=function(){var result='ColumnChangeEvent {type: '+this.type;if(this.column){result+=', column: '+this.column.getColId();}if(this.columnGroup){result+= true?this.columnGroup.getColGroupDef().headerName:'(not defined]';}if(this.fromIndex){result+=', fromIndex: '+this.fromIndex;}if(this.toIndex){result+=', toIndex: '+this.toIndex;}if(this.visible){result+=', visible: '+this.visible;}if(this.pinned){result+=', visible: '+this.visible;}if(typeof this.finished=='boolean'){result+=', finished: '+this.finished;}result+='}';return result;};ColumnChangeEvent.prototype.withPinned=function(pinned){this.pinned=pinned;return this;};ColumnChangeEvent.prototype.withVisible=function(visible){this.visible=visible;return this;};ColumnChangeEvent.prototype.isVisible=function(){return this.visible;};ColumnChangeEvent.prototype.getPinned=function(){return this.pinned;};ColumnChangeEvent.prototype.withColumn=function(column){this.column=column;return this;};ColumnChangeEvent.prototype.withColumns=function(columns){this.columns=columns;return this;};ColumnChangeEvent.prototype.withFinished=function(finished){this.finished=finished;return this;};ColumnChangeEvent.prototype.withColumnGroup=function(columnGroup){this.columnGroup=columnGroup;return this;};ColumnChangeEvent.prototype.withFromIndex=function(fromIndex){this.fromIndex=fromIndex;return this;};ColumnChangeEvent.prototype.withToIndex=function(toIndex){this.toIndex=toIndex;return this;};ColumnChangeEvent.prototype.getFromIndex=function(){return this.fromIndex;};ColumnChangeEvent.prototype.getToIndex=function(){return this.toIndex;};ColumnChangeEvent.prototype.getType=function(){return this.type;};ColumnChangeEvent.prototype.getColumn=function(){return this.column;};ColumnChangeEvent.prototype.getColumns=function(){return this.columns;};ColumnChangeEvent.prototype.getColumnGroup=function(){return this.columnGroup;};ColumnChangeEvent.prototype.isRowGroupChanged=function(){return this.type===grid.Events.EVENT_COLUMN_ROW_GROUP_CHANGE||this.type===grid.Events.EVENT_COLUMN_EVERYTHING_CHANGED;};ColumnChangeEvent.prototype.isValueChanged=function(){return this.type===grid.Events.EVENT_COLUMN_VALUE_CHANGE||this.type===grid.Events.EVENT_COLUMN_EVERYTHING_CHANGED;};ColumnChangeEvent.prototype.isIndividualColumnResized=function(){return this.type===grid.Events.EVENT_COLUMN_RESIZED&&this.column!==undefined&&this.column!==null;};ColumnChangeEvent.prototype.isFinished=function(){return this.finished;};return ColumnChangeEvent;}();grid.ColumnChangeEvent=ColumnChangeEvent;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={}));var ag;(function(ag){var grid;(function(grid){var Constants=function(){function Constants(){}Constants.STEP_EVERYTHING=0;Constants.STEP_FILTER=1;Constants.STEP_SORT=2;Constants.STEP_MAP=3;Constants.ROW_BUFFER_SIZE=20;Constants.MIN_COL_WIDTH=10;Constants.KEY_TAB=9;Constants.KEY_ENTER=13;Constants.KEY_BACKSPACE=8;Constants.KEY_DELETE=46;Constants.KEY_ESCAPE=27;Constants.KEY_SPACE=32;Constants.KEY_DOWN=40;Constants.KEY_UP=38;Constants.KEY_LEFT=37;Constants.KEY_RIGHT=39;return Constants;}();grid.Constants=Constants;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={}));var ag;(function(ag){var grid;(function(grid_1){var LINE_SEPARATOR='\r\n';var CsvCreator=function(){function CsvCreator(rowController,columnController,grid,valueService){this.rowController=rowController;this.columnController=columnController;this.grid=grid;this.valueService=valueService;}CsvCreator.prototype.exportDataAsCsv=function(params){var csvString=this.getDataAsCsv(params);var fileNamePresent=params&&params.fileName&&params.fileName.length!==0;var fileName=fileNamePresent?params.fileName:'export.csv'; // for Excel, we need \ufeff at the start
	// http://stackoverflow.com/questions/17879198/adding-utf-8-bom-to-string-blob
	var blobObject=new Blob(['﻿',csvString],{type:"text/csv;charset=utf-8;"}); // Internet Explorer
	if(window.navigator.msSaveOrOpenBlob){window.navigator.msSaveOrOpenBlob(blobObject,fileName);}else { // Chrome
	var downloadLink=document.createElement("a");downloadLink.href=window.URL.createObjectURL(blobObject);downloadLink.download=fileName;document.body.appendChild(downloadLink);downloadLink.click();document.body.removeChild(downloadLink);}};CsvCreator.prototype.getDataAsCsv=function(params){var _this=this;if(!this.grid.isUsingInMemoryModel()){console.log('ag-Grid: getDataAsCsv not available when doing virtual pagination');return '';}var result='';var skipGroups=params&&params.skipGroups;var skipHeader=params&&params.skipHeader;var skipFooters=params&&params.skipFooters;var includeCustomHeader=params&&params.customHeader;var includeCustomFooter=params&&params.customFooter;var allColumns=params&&params.allColumns;var columnSeparator=params&&params.columnSeparator||',';var columnsToExport;if(allColumns){columnsToExport=this.columnController.getAllColumns();}else {columnsToExport=this.columnController.getAllDisplayedColumns();}if(!columnsToExport||columnsToExport.length===0){return '';}if(includeCustomHeader){result+=params.customHeader;} // first pass, put in the header names of the cols
	if(!skipHeader){columnsToExport.forEach(function(column,index){var nameForCol=_this.columnController.getDisplayNameForCol(column);if(nameForCol===null||nameForCol===undefined){nameForCol='';}if(index!=0){result+=columnSeparator;}result+='"'+_this.escape(nameForCol)+'"';});result+=LINE_SEPARATOR;}this.rowController.forEachNodeAfterFilterAndSort(function(node){if(skipGroups&&node.group){return;}if(skipFooters&&node.footer){return;}columnsToExport.forEach(function(column,index){var valueForCell;if(node.group&&index===0){valueForCell=_this.createValueForGroupNode(node);}else {valueForCell=_this.valueService.getValue(column.getColDef(),node.data,node);}if(valueForCell===null||valueForCell===undefined){valueForCell='';}if(index!=0){result+=columnSeparator;}result+='"'+_this.escape(valueForCell)+'"';});result+=LINE_SEPARATOR;});if(includeCustomFooter){result+=params.customFooter;}return result;};CsvCreator.prototype.createValueForGroupNode=function(node){var keys=[node.key];while(node.parent){node=node.parent;keys.push(node.key);}return keys.reverse().join(' -> ');}; // replace each " with "" (ie two sets of double quotes is how to do double quotes in csv)
	CsvCreator.prototype.escape=function(value){if(value===null||value===undefined){return '';}var stringValue;if(typeof value==='string'){stringValue=value;}else if(typeof value.toString==='function'){stringValue=value.toString();}else {console.warn('known value type during csv conversio');stringValue='';}return stringValue.replace(/"/g,"\"\"");};return CsvCreator;}();grid_1.CsvCreator=CsvCreator;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={}));var ag;(function(ag){var grid;(function(grid){var Events=function(){function Events(){} /** A new set of columns has been entered, everything has potentially changed. */Events.EVENT_COLUMN_EVERYTHING_CHANGED='columnEverythingChanged'; /** A row group column was added, removed or order changed. */Events.EVENT_COLUMN_ROW_GROUP_CHANGE='columnRowGroupChanged'; /** A value column was added, removed or agg function was changed. */Events.EVENT_COLUMN_VALUE_CHANGE='columnValueChanged'; /** A column was moved */Events.EVENT_COLUMN_MOVED='columnMoved'; /** One or more columns was shown / hidden */Events.EVENT_COLUMN_VISIBLE='columnVisible'; /** One or more columns was pinned / unpinned*/Events.EVENT_COLUMN_PINNED='columnPinned'; /** A column group was opened / closed */Events.EVENT_COLUMN_GROUP_OPENED='columnGroupOpened'; /** A column group was opened / closed */Events.EVENT_ROW_GROUP_OPENED='rowGroupOpened'; /** One or more columns was resized. If just one, the column in the event is set. */Events.EVENT_COLUMN_RESIZED='columnResized';Events.EVENT_MODEL_UPDATED='modelUpdated';Events.EVENT_CELL_CLICKED='cellClicked';Events.EVENT_CELL_DOUBLE_CLICKED='cellDoubleClicked';Events.EVENT_CELL_CONTEXT_MENU='cellContextMenu';Events.EVENT_CELL_VALUE_CHANGED='cellValueChanged';Events.EVENT_CELL_FOCUSED='cellFocused';Events.EVENT_ROW_SELECTED='rowSelected';Events.EVENT_ROW_DESELECTED='rowDeselected';Events.EVENT_SELECTION_CHANGED='selectionChanged';Events.EVENT_BEFORE_FILTER_CHANGED='beforeFilterChanged';Events.EVENT_AFTER_FILTER_CHANGED='afterFilterChanged';Events.EVENT_FILTER_MODIFIED='filterModified';Events.EVENT_BEFORE_SORT_CHANGED='beforeSortChanged';Events.EVENT_AFTER_SORT_CHANGED='afterSortChanged';Events.EVENT_VIRTUAL_ROW_REMOVED='virtualRowRemoved';Events.EVENT_ROW_CLICKED='rowClicked';Events.EVENT_ROW_DOUBLE_CLICKED='rowDoubleClicked';Events.EVENT_READY='ready';Events.EVENT_GRID_SIZE_CHANGED='gridSizeChanged';return Events;}();grid.Events=Events;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={}));var ag;(function(ag){var grid;(function(grid){var FUNCTION_STRIP_COMMENTS=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;var FUNCTION_ARGUMENT_NAMES=/([^\s,]+)/g;var Utils=function(){function Utils(){}Utils.iterateObject=function(object,callback){var keys=Object.keys(object);for(var i=0;i<keys.length;i++){var key=keys[i];var value=object[key];callback(key,value);}};Utils.cloneObject=function(object){var copy={};var keys=Object.keys(object);for(var i=0;i<keys.length;i++){var key=keys[i];var value=object[key];copy[key]=value;}return copy;};Utils.map=function(array,callback){var result=[];for(var i=0;i<array.length;i++){var item=array[i];var mappedItem=callback(item);result.push(mappedItem);}return result;};Utils.forEach=function(array,callback){if(!array){return;}for(var i=0;i<array.length;i++){var value=array[i];callback(value,i);}};Utils.filter=function(array,callback){var result=[];array.forEach(function(item){if(callback(item)){result.push(item);}});return result;};Utils.assign=function(object,source){Utils.iterateObject(source,function(key,value){object[key]=value;});};Utils.getFunctionParameters=function(func){var fnStr=func.toString().replace(FUNCTION_STRIP_COMMENTS,'');var result=fnStr.slice(fnStr.indexOf('(')+1,fnStr.indexOf(')')).match(FUNCTION_ARGUMENT_NAMES);if(result===null){return [];}else {return result;}};Utils.find=function(collection,predicate,value){if(collection===null||collection===undefined){return null;}for(var i=0;i<collection.length;i++){if(collection[i][predicate]===value){return collection[i];}}return null;};Utils.toStrings=function(array){return this.map(array,function(item){if(item===undefined||item===null||!item.toString){return null;}else {return item.toString();}});};Utils.iterateArray=function(array,callback){for(var index=0;index<array.length;index++){var value=array[index];callback(value,index);}}; //Returns true if it is a DOM node
	//taken from: http://stackoverflow.com/questions/384286/javascript-isdom-how-do-you-check-if-a-javascript-object-is-a-dom-object
	Utils.isNode=function(o){return (typeof Node==='undefined'?'undefined':_typeof(Node))==="object"?o instanceof Node:o&&(typeof o==='undefined'?'undefined':_typeof(o))==="object"&&typeof o.nodeType==="number"&&typeof o.nodeName==="string";}; //Returns true if it is a DOM element
	//taken from: http://stackoverflow.com/questions/384286/javascript-isdom-how-do-you-check-if-a-javascript-object-is-a-dom-object
	Utils.isElement=function(o){return (typeof HTMLElement==='undefined'?'undefined':_typeof(HTMLElement))==="object"?o instanceof HTMLElement:o&&(typeof o==='undefined'?'undefined':_typeof(o))==="object"&&o!==null&&o.nodeType===1&&typeof o.nodeName==="string";};Utils.isNodeOrElement=function(o){return this.isNode(o)||this.isElement(o);}; //adds all type of change listeners to an element, intended to be a text field
	Utils.addChangeListener=function(element,listener){element.addEventListener("changed",listener);element.addEventListener("paste",listener);element.addEventListener("input",listener); // IE doesn't fire changed for special keys (eg delete, backspace), so need to
	// listen for this further ones
	element.addEventListener("keydown",listener);element.addEventListener("keyup",listener);}; //if value is undefined, null or blank, returns null, otherwise returns the value
	Utils.makeNull=function(value){if(value===null||value===undefined||value===""){return null;}else {return value;}};Utils.removeAllChildren=function(node){if(node){while(node.hasChildNodes()){node.removeChild(node.lastChild);}}};Utils.removeElement=function(parent,cssSelector){this.removeFromParent(parent.querySelector(cssSelector));};Utils.removeFromParent=function(node){if(node&&node.parentNode){node.parentNode.removeChild(node);}};Utils.isVisible=function(element){return element.offsetParent!==null;}; /**
	             * loads the template and returns it as an element. makes up for no simple way in
	             * the dom api to load html directly, eg we cannot do this: document.createElement(template)
	             */Utils.loadTemplate=function(template){var tempDiv=document.createElement("div");tempDiv.innerHTML=template;return tempDiv.firstChild;};Utils.querySelectorAll_addCssClass=function(eParent,selector,cssClass){var eRows=eParent.querySelectorAll(selector);for(var k=0;k<eRows.length;k++){this.addCssClass(eRows[k],cssClass);}};Utils.querySelectorAll_removeCssClass=function(eParent,selector,cssClass){var eRows=eParent.querySelectorAll(selector);for(var k=0;k<eRows.length;k++){this.removeCssClass(eRows[k],cssClass);}};Utils.querySelectorAll_replaceCssClass=function(eParent,selector,cssClassToRemove,cssClassToAdd){var eRows=eParent.querySelectorAll(selector);for(var k=0;k<eRows.length;k++){this.removeCssClass(eRows[k],cssClassToRemove);this.addCssClass(eRows[k],cssClassToAdd);}};Utils.addOrRemoveCssClass=function(element,className,addOrRemove){if(addOrRemove){this.addCssClass(element,className);}else {this.removeCssClass(element,className);}};Utils.addCssClass=function(element,className){if(element.className&&element.className.length>0){var cssClasses=element.className.split(' ');if(cssClasses.indexOf(className)<0){cssClasses.push(className);element.className=cssClasses.join(' ');}}else {element.className=className;}};Utils.offsetHeight=function(element){return element&&element.clientHeight?element.clientHeight:0;};Utils.offsetWidth=function(element){return element&&element.clientWidth?element.clientWidth:0;};Utils.removeCssClass=function(element,className){if(element.className&&element.className.length>0){var cssClasses=element.className.split(' ');var index=cssClasses.indexOf(className);if(index>=0){cssClasses.splice(index,1);element.className=cssClasses.join(' ');}}};Utils.removeFromArray=function(array,object){if(array.indexOf(object)>=0){array.splice(array.indexOf(object),1);}};Utils.defaultComparator=function(valueA,valueB){var valueAMissing=valueA===null||valueA===undefined;var valueBMissing=valueB===null||valueB===undefined;if(valueAMissing&&valueBMissing){return 0;}if(valueAMissing){return -1;}if(valueBMissing){return 1;}if(valueA<valueB){return -1;}else if(valueA>valueB){return 1;}else {return 0;}};Utils.formatWidth=function(width){if(typeof width==="number"){return width+"px";}else {return width;}}; /**
	             * Tries to use the provided renderer.
	             */Utils.useRenderer=function(eParent,eRenderer,params){var resultFromRenderer=eRenderer(params); //TypeScript type inference magic
	if(typeof resultFromRenderer==='string'){var eTextSpan=document.createElement('span');eTextSpan.innerHTML=resultFromRenderer;eParent.appendChild(eTextSpan);}else if(this.isNodeOrElement(resultFromRenderer)){ //a dom node or element was returned, so add child
	eParent.appendChild(resultFromRenderer);}}; /**
	             * If icon provided, use this (either a string, or a function callback).
	             * if not, then use the second parameter, which is the svgFactory function
	             */Utils.createIcon=function(iconName,gridOptionsWrapper,column,svgFactoryFunc){var eResult=document.createElement('span');eResult.appendChild(this.createIconNoSpan(iconName,gridOptionsWrapper,column,svgFactoryFunc));return eResult;};Utils.createIconNoSpan=function(iconName,gridOptionsWrapper,colDefWrapper,svgFactoryFunc){var userProvidedIcon; // check col for icon first
	if(colDefWrapper&&colDefWrapper.getColDef().icons){userProvidedIcon=colDefWrapper.getColDef().icons[iconName];} // it not in col, try grid options
	if(!userProvidedIcon&&gridOptionsWrapper.getIcons()){userProvidedIcon=gridOptionsWrapper.getIcons()[iconName];} // now if user provided, use it
	if(userProvidedIcon){var rendererResult;if(typeof userProvidedIcon==='function'){rendererResult=userProvidedIcon();}else if(typeof userProvidedIcon==='string'){rendererResult=userProvidedIcon;}else {throw 'icon from grid options needs to be a string or a function';}if(typeof rendererResult==='string'){return this.loadTemplate(rendererResult);}else if(this.isNodeOrElement(rendererResult)){return rendererResult;}else {throw 'iconRenderer should return back a string or a dom object';}}else { // otherwise we use the built in icon
	return svgFactoryFunc();}};Utils.addStylesToElement=function(eElement,styles){Object.keys(styles).forEach(function(key){eElement.style[key]=styles[key];});};Utils.getScrollbarWidth=function(){var outer=document.createElement("div");outer.style.visibility="hidden";outer.style.width="100px";outer.style.msOverflowStyle="scrollbar"; // needed for WinJS apps
	document.body.appendChild(outer);var widthNoScroll=outer.offsetWidth; // force scrollbars
	outer.style.overflow="scroll"; // add innerdiv
	var inner=document.createElement("div");inner.style.width="100%";outer.appendChild(inner);var widthWithScroll=inner.offsetWidth; // remove divs
	outer.parentNode.removeChild(outer);return widthNoScroll-widthWithScroll;};Utils.isKeyPressed=function(event,keyToCheck){var pressedKey=event.which||event.keyCode;return pressedKey===keyToCheck;};Utils.setVisible=function(element,visible){if(visible){element.style.display='inline';}else {element.style.display='none';}};Utils.isBrowserIE=function(){if(this.isIE===undefined){this.isIE=false||!!document.documentMode; // At least IE6
	}return this.isIE;};Utils.isBrowserSafari=function(){if(this.isSafari===undefined){this.isSafari=Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor')>0;}return this.isSafari;};return Utils;}();grid.Utils=Utils;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path="utils.ts" />
	var ag;(function(ag){var grid;(function(grid){var _=grid.Utils;var EventService=function(){function EventService(){this.allListeners={};this.globalListeners=[];}EventService.prototype.init=function(loggerFactory){this.logger=loggerFactory.create('EventService');};EventService.prototype.getListenerList=function(eventType){var listenerList=this.allListeners[eventType];if(!listenerList){listenerList=[];this.allListeners[eventType]=listenerList;}return listenerList;};EventService.prototype.addEventListener=function(eventType,listener){var listenerList=this.getListenerList(eventType);if(listenerList.indexOf(listener)<0){listenerList.push(listener);}};EventService.prototype.addGlobalListener=function(listener){this.globalListeners.push(listener);};EventService.prototype.removeEventListener=function(eventType,listener){var listenerList=this.getListenerList(eventType);_.removeFromArray(listenerList,listener);};EventService.prototype.removeGlobalListener=function(listener){_.removeFromArray(this.globalListeners,listener);}; // why do we pass the type here? the type is in ColumnChangeEvent, so unless the
	// type is not in other types of events???
	EventService.prototype.dispatchEvent=function(eventType,event){if(!event){event={};} //this.logger.log('dispatching: ' + event);
	var listenerList=this.getListenerList(eventType);listenerList.forEach(function(listener){listener(event);});this.globalListeners.forEach(function(listener){listener(eventType,event);});};return EventService;}();grid.EventService=EventService;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={}));var ag;(function(ag){var grid;(function(grid){var ExpressionService=function(){function ExpressionService(){this.expressionToFunctionCache={};}ExpressionService.prototype.init=function(loggerFactory){this.logger=loggerFactory.create('ExpressionService');};ExpressionService.prototype.evaluate=function(expression,params){try{var javaScriptFunction=this.createExpressionFunction(expression);var result=javaScriptFunction(params.value,params.context,params.node,params.data,params.colDef,params.rowIndex,params.api,params.getValue);return result;}catch(e){ // the expression failed, which can happen, as it's the client that
	// provides the expression. so print a nice message
	this.logger.log('Processing of the expression failed');this.logger.log('Expression = '+expression);this.logger.log('Exception = '+e);return null;}};ExpressionService.prototype.createExpressionFunction=function(expression){ // check cache first
	if(this.expressionToFunctionCache[expression]){return this.expressionToFunctionCache[expression];} // if not found in cache, return the function
	var functionBody=this.createFunctionBody(expression);var theFunction=new Function('x, ctx, node, data, colDef, rowIndex, api, getValue',functionBody); // store in cache
	this.expressionToFunctionCache[expression]=theFunction;return theFunction;};ExpressionService.prototype.createFunctionBody=function(expression){ // if the expression has the 'return' word in it, then use as is,
	// if not, then wrap it with return and ';' to make a function
	if(expression.indexOf('return')>=0){return expression;}else {return 'return '+expression+';';}};return ExpressionService;}();grid.ExpressionService=ExpressionService;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path="../entities/rowNode.ts" />
	var ag;(function(ag){var grid;(function(grid){var FloatingRowModel=function(){function FloatingRowModel(){}FloatingRowModel.prototype.init=function(gridOptionsWrapper){this.gridOptionsWrapper=gridOptionsWrapper;this.setFloatingTopRowData(gridOptionsWrapper.getFloatingTopRowData());this.setFloatingBottomRowData(gridOptionsWrapper.getFloatingBottomRowData());};FloatingRowModel.prototype.setFloatingTopRowData=function(rowData){this.floatingTopRows=this.createNodesFromData(rowData,false);};FloatingRowModel.prototype.setFloatingBottomRowData=function(rowData){this.floatingBottomRows=this.createNodesFromData(rowData,false);};FloatingRowModel.prototype.createNodesFromData=function(allData,isTop){var _this=this;var rowNodes=[];if(allData){var nextRowTop=0;allData.forEach(function(dataItem){var rowNode={data:dataItem,floating:true,floatingTop:isTop,floatingBottom:!isTop,rowTop:nextRowTop,rowHeight:null};rowNode.rowHeight=_this.gridOptionsWrapper.getRowHeightForNode(rowNode);nextRowTop+=rowNode.rowHeight;rowNodes.push(rowNode);});}return rowNodes;};FloatingRowModel.prototype.getFloatingTopRowData=function(){return this.floatingTopRows;};FloatingRowModel.prototype.getFloatingBottomRowData=function(){return this.floatingBottomRows;};FloatingRowModel.prototype.getFloatingTopTotalHeight=function(){return this.getTotalHeight(this.floatingTopRows);};FloatingRowModel.prototype.getFloatingBottomTotalHeight=function(){return this.getTotalHeight(this.floatingBottomRows);};FloatingRowModel.prototype.getTotalHeight=function(rowNodes){if(!rowNodes||rowNodes.length===0){return 0;}else {var lastNode=rowNodes[rowNodes.length-1];return lastNode.rowTop+lastNode.rowHeight;}};return FloatingRowModel;}();grid.FloatingRowModel=FloatingRowModel;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={}));var ag;(function(ag){var grid;(function(grid){var ComponentUtil=function(){function ComponentUtil(){}ComponentUtil.getEventCallbacks=function(){if(!ComponentUtil.EVENT_CALLBACKS){ComponentUtil.EVENT_CALLBACKS=[];ComponentUtil.EVENTS.forEach(function(eventName){ComponentUtil.EVENT_CALLBACKS.push(ComponentUtil.getCallbackForEvent(eventName));});}return ComponentUtil.EVENT_CALLBACKS;};ComponentUtil.copyAttributesToGridOptions=function(gridOptions,component){ // create empty grid options if none were passed
	if((typeof gridOptions==='undefined'?'undefined':_typeof(gridOptions))!=='object'){gridOptions={};} // to allow array style lookup in TypeScript, take type away from 'this' and 'gridOptions'
	var pGridOptions=gridOptions; // add in all the simple properties
	ComponentUtil.ARRAY_PROPERTIES.concat(ComponentUtil.STRING_PROPERTIES).concat(ComponentUtil.OBJECT_PROPERTIES).concat(ComponentUtil.FUNCTION_PROPERTIES).forEach(function(key){if(typeof component[key]!=='undefined'){pGridOptions[key]=component[key];}});ComponentUtil.BOOLEAN_PROPERTIES.forEach(function(key){if(typeof component[key]!=='undefined'){pGridOptions[key]=ComponentUtil.toBoolean(component[key]);}});ComponentUtil.NUMBER_PROPERTIES.forEach(function(key){if(typeof component[key]!=='undefined'){pGridOptions[key]=ComponentUtil.toNumber(component[key]);}});ComponentUtil.getEventCallbacks().forEach(function(funcName){if(typeof component[funcName]!=='undefined'){pGridOptions[funcName]=component[funcName];}});return gridOptions;};ComponentUtil.getCallbackForEvent=function(eventName){if(!eventName||eventName.length<2){return eventName;}else {return 'on'+eventName[0].toUpperCase()+eventName.substr(1);}}; // change this method, the caller should know if it's initialised or not, plus 'initialised'
	// is not relevant for all component types.
	// maybe pass in the api and columnApi instead???
	ComponentUtil.processOnChange=function(changes,gridOptions,api){ //if (!component._initialised || !changes) { return; }
	if(!changes){return;} // to allow array style lookup in TypeScript, take type away from 'this' and 'gridOptions'
	var pGridOptions=gridOptions; // check if any change for the simple types, and if so, then just copy in the new value
	ComponentUtil.ARRAY_PROPERTIES.concat(ComponentUtil.OBJECT_PROPERTIES).concat(ComponentUtil.STRING_PROPERTIES).forEach(function(key){if(changes[key]){pGridOptions[key]=changes[key].currentValue;}});ComponentUtil.BOOLEAN_PROPERTIES.forEach(function(key){if(changes[key]){pGridOptions[key]=ComponentUtil.toBoolean(changes[key].currentValue);}});ComponentUtil.NUMBER_PROPERTIES.forEach(function(key){if(changes[key]){pGridOptions[key]=ComponentUtil.toNumber(changes[key].currentValue);}});ComponentUtil.getEventCallbacks().forEach(function(funcName){if(changes[funcName]){pGridOptions[funcName]=changes[funcName].currentValue;}});if(changes.showToolPanel){api.showToolPanel(changes.showToolPanel.currentValue);}if(changes.quickFilterText){api.setQuickFilter(changes.quickFilterText.currentValue);}if(changes.rowData){api.setRowData(changes.rowData.currentValue);}if(changes.floatingTopRowData){api.setFloatingTopRowData(changes.floatingTopRowData.currentValue);}if(changes.floatingBottomRowData){api.setFloatingBottomRowData(changes.floatingBottomRowData.currentValue);}if(changes.columnDefs){api.setColumnDefs(changes.columnDefs.currentValue);}if(changes.datasource){api.setDatasource(changes.datasource.currentValue);}if(changes.headerHeight){api.setHeaderHeight(changes.headerHeight.currentValue);}};ComponentUtil.toBoolean=function(value){if(typeof value==='boolean'){return value;}else if(typeof value==='string'){ // for boolean, compare to empty String to allow attributes appearing with
	// not value to be treated as 'true'
	return value.toUpperCase()==='TRUE'||value=='';}else {return false;}};ComponentUtil.toNumber=function(value){if(typeof value==='number'){return value;}else if(typeof value==='string'){return Number(value);}else {return undefined;}};ComponentUtil.EVENTS=[ // core grid events
	'modelUpdated','cellClicked','cellDoubleClicked','cellContextMenu','cellValueChanged','cellFocused','rowSelected','rowDeselected','selectionChanged','beforeFilterChanged','afterFilterChanged','filterModified','beforeSortChanged','afterSortChanged','virtualRowRemoved','rowClicked','rowDoubleClicked','ready','gridSizeChanged','rowGroupOpened', // column events
	'columnEverythingChanged','columnRowGroupChanged','columnValueChanged','columnMoved','columnVisible','columnGroupOpened','columnResized','columnPinnedCountChanged'];ComponentUtil.STRING_PROPERTIES=['sortingOrder','rowClass','rowSelection','overlayLoadingTemplate','overlayNoRowsTemplate','headerCellTemplate','quickFilterText'];ComponentUtil.OBJECT_PROPERTIES=['rowStyle','context','groupColumnDef','localeText','icons','datasource'];ComponentUtil.ARRAY_PROPERTIES=['slaveGrids','rowData','floatingTopRowData','floatingBottomRowData','columnDefs'];ComponentUtil.NUMBER_PROPERTIES=['rowHeight','rowBuffer','colWidth','headerHeight','groupDefaultExpanded'];ComponentUtil.BOOLEAN_PROPERTIES=['virtualPaging','toolPanelSuppressGroups','toolPanelSuppressValues','rowsAlreadyGrouped','suppressRowClickSelection','suppressCellSelection','suppressHorizontalScroll','debug','enableColResize','enableCellExpressions','enableSorting','enableServerSideSorting','enableFilter','enableServerSideFilter','angularCompileRows','angularCompileFilters','angularCompileHeaders','groupSuppressAutoColumn','groupSelectsChildren','groupHideGroupColumns','groupIncludeFooter','groupUseEntireRow','groupSuppressRow','groupSuppressBlankHeader','forPrint','suppressMenuHide','rowDeselection','unSortIcon','suppressMultiSort','suppressScrollLag','singleClickEdit','suppressLoadingOverlay','suppressNoRowsOverlay','suppressAutoSize','suppressParentsInRowNodes','showToolPanel'];ComponentUtil.FUNCTION_PROPERTIES=['headerCellRenderer','localeTextFunc','groupRowInnerRenderer','groupRowRenderer','groupAggFunction','isScrollLag','isExternalFilterPresent','doesExternalFilterPass','getRowClass','getRowStyle','getHeaderCellTemplate'];ComponentUtil.ALL_PROPERTIES=ComponentUtil.ARRAY_PROPERTIES.concat(ComponentUtil.OBJECT_PROPERTIES).concat(ComponentUtil.STRING_PROPERTIES).concat(ComponentUtil.NUMBER_PROPERTIES).concat(ComponentUtil.FUNCTION_PROPERTIES).concat(ComponentUtil.BOOLEAN_PROPERTIES);return ComponentUtil;}();grid.ComponentUtil=ComponentUtil;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path="constants.ts" />
	/// <reference path="components/componentUtil.ts" />
	var ag;(function(ag){var grid;(function(grid){var DEFAULT_ROW_HEIGHT=25;var constants=grid.Constants;function isTrue(value){return value===true||value==='true';}var GridOptionsWrapper=function(){function GridOptionsWrapper(){}GridOptionsWrapper.prototype.init=function(gridOptions,eventService){this.gridOptions=gridOptions;this.headerHeight=gridOptions.headerHeight;eventService.addGlobalListener(this.globalEventHandler.bind(this));this.checkForDeprecated();};GridOptionsWrapper.prototype.isRowSelection=function(){return this.gridOptions.rowSelection==="single"||this.gridOptions.rowSelection==="multiple";};GridOptionsWrapper.prototype.isRowDeselection=function(){return isTrue(this.gridOptions.rowDeselection);};GridOptionsWrapper.prototype.isRowSelectionMulti=function(){return this.gridOptions.rowSelection==='multiple';};GridOptionsWrapper.prototype.getContext=function(){return this.gridOptions.context;};GridOptionsWrapper.prototype.isVirtualPaging=function(){return isTrue(this.gridOptions.virtualPaging);};GridOptionsWrapper.prototype.isShowToolPanel=function(){return isTrue(this.gridOptions.showToolPanel);};GridOptionsWrapper.prototype.isToolPanelSuppressGroups=function(){return isTrue(this.gridOptions.toolPanelSuppressGroups);};GridOptionsWrapper.prototype.isToolPanelSuppressValues=function(){return isTrue(this.gridOptions.toolPanelSuppressValues);};GridOptionsWrapper.prototype.isRowsAlreadyGrouped=function(){return isTrue(this.gridOptions.rowsAlreadyGrouped);};GridOptionsWrapper.prototype.isGroupSelectsChildren=function(){return isTrue(this.gridOptions.groupSelectsChildren);};GridOptionsWrapper.prototype.isGroupHideGroupColumns=function(){return isTrue(this.gridOptions.groupHideGroupColumns);};GridOptionsWrapper.prototype.isGroupIncludeFooter=function(){return isTrue(this.gridOptions.groupIncludeFooter);};GridOptionsWrapper.prototype.isGroupSuppressBlankHeader=function(){return isTrue(this.gridOptions.groupSuppressBlankHeader);};GridOptionsWrapper.prototype.isSuppressRowClickSelection=function(){return isTrue(this.gridOptions.suppressRowClickSelection);};GridOptionsWrapper.prototype.isSuppressCellSelection=function(){return isTrue(this.gridOptions.suppressCellSelection);};GridOptionsWrapper.prototype.isSuppressMultiSort=function(){return isTrue(this.gridOptions.suppressMultiSort);};GridOptionsWrapper.prototype.isGroupSuppressAutoColumn=function(){return isTrue(this.gridOptions.groupSuppressAutoColumn);};GridOptionsWrapper.prototype.isForPrint=function(){return isTrue(this.gridOptions.forPrint);};GridOptionsWrapper.prototype.isSuppressHorizontalScroll=function(){return isTrue(this.gridOptions.suppressHorizontalScroll);};GridOptionsWrapper.prototype.isSuppressLoadingOverlay=function(){return isTrue(this.gridOptions.suppressLoadingOverlay);};GridOptionsWrapper.prototype.isSuppressNoRowsOverlay=function(){return isTrue(this.gridOptions.suppressNoRowsOverlay);};GridOptionsWrapper.prototype.getFloatingTopRowData=function(){return this.gridOptions.floatingTopRowData;};GridOptionsWrapper.prototype.getFloatingBottomRowData=function(){return this.gridOptions.floatingBottomRowData;};GridOptionsWrapper.prototype.isUnSortIcon=function(){return isTrue(this.gridOptions.unSortIcon);};GridOptionsWrapper.prototype.isSuppressMenuHide=function(){return isTrue(this.gridOptions.suppressMenuHide);};GridOptionsWrapper.prototype.getRowStyle=function(){return this.gridOptions.rowStyle;};GridOptionsWrapper.prototype.getRowClass=function(){return this.gridOptions.rowClass;};GridOptionsWrapper.prototype.getRowStyleFunc=function(){return this.gridOptions.getRowStyle;};GridOptionsWrapper.prototype.getRowClassFunc=function(){return this.gridOptions.getRowClass;};GridOptionsWrapper.prototype.getBusinessKeyForNodeFunc=function(){return this.gridOptions.getBusinessKeyForNode;};GridOptionsWrapper.prototype.getHeaderCellRenderer=function(){return this.gridOptions.headerCellRenderer;};GridOptionsWrapper.prototype.getApi=function(){return this.gridOptions.api;};GridOptionsWrapper.prototype.isEnableColResize=function(){return isTrue(this.gridOptions.enableColResize);};GridOptionsWrapper.prototype.isSingleClickEdit=function(){return isTrue(this.gridOptions.singleClickEdit);};GridOptionsWrapper.prototype.getGroupDefaultExpanded=function(){return this.gridOptions.groupDefaultExpanded;};GridOptionsWrapper.prototype.getGroupAggFunction=function(){return this.gridOptions.groupAggFunction;};GridOptionsWrapper.prototype.getRowData=function(){return this.gridOptions.rowData;};GridOptionsWrapper.prototype.isGroupUseEntireRow=function(){return isTrue(this.gridOptions.groupUseEntireRow);};GridOptionsWrapper.prototype.getGroupColumnDef=function(){return this.gridOptions.groupColumnDef;};GridOptionsWrapper.prototype.isGroupSuppressRow=function(){return isTrue(this.gridOptions.groupSuppressRow);};GridOptionsWrapper.prototype.isAngularCompileRows=function(){return isTrue(this.gridOptions.angularCompileRows);};GridOptionsWrapper.prototype.isAngularCompileFilters=function(){return isTrue(this.gridOptions.angularCompileFilters);};GridOptionsWrapper.prototype.isAngularCompileHeaders=function(){return isTrue(this.gridOptions.angularCompileHeaders);};GridOptionsWrapper.prototype.isDebug=function(){return isTrue(this.gridOptions.debug);};GridOptionsWrapper.prototype.getColumnDefs=function(){return this.gridOptions.columnDefs;};GridOptionsWrapper.prototype.getDatasource=function(){return this.gridOptions.datasource;};GridOptionsWrapper.prototype.isEnableSorting=function(){return isTrue(this.gridOptions.enableSorting)||isTrue(this.gridOptions.enableServerSideSorting);};GridOptionsWrapper.prototype.isEnableCellExpressions=function(){return isTrue(this.gridOptions.enableCellExpressions);};GridOptionsWrapper.prototype.isEnableServerSideSorting=function(){return isTrue(this.gridOptions.enableServerSideSorting);};GridOptionsWrapper.prototype.isEnableFilter=function(){return isTrue(this.gridOptions.enableFilter)||isTrue(this.gridOptions.enableServerSideFilter);};GridOptionsWrapper.prototype.isEnableServerSideFilter=function(){return this.gridOptions.enableServerSideFilter;};GridOptionsWrapper.prototype.isSuppressScrollLag=function(){return isTrue(this.gridOptions.suppressScrollLag);};GridOptionsWrapper.prototype.getIcons=function(){return this.gridOptions.icons;};GridOptionsWrapper.prototype.getIsScrollLag=function(){return this.gridOptions.isScrollLag;};GridOptionsWrapper.prototype.getSortingOrder=function(){return this.gridOptions.sortingOrder;};GridOptionsWrapper.prototype.getSlaveGrids=function(){return this.gridOptions.slaveGrids;};GridOptionsWrapper.prototype.getGroupRowRenderer=function(){return this.gridOptions.groupRowRenderer;};GridOptionsWrapper.prototype.getOverlayLoadingTemplate=function(){return this.gridOptions.overlayLoadingTemplate;};GridOptionsWrapper.prototype.getOverlayNoRowsTemplate=function(){return this.gridOptions.overlayNoRowsTemplate;};GridOptionsWrapper.prototype.getCheckboxSelection=function(){return this.gridOptions.checkboxSelection;};GridOptionsWrapper.prototype.isSuppressAutoSize=function(){return isTrue(this.gridOptions.suppressAutoSize);};GridOptionsWrapper.prototype.isSuppressParentsInRowNodes=function(){return isTrue(this.gridOptions.suppressParentsInRowNodes);};GridOptionsWrapper.prototype.getHeaderCellTemplate=function(){return this.gridOptions.headerCellTemplate;};GridOptionsWrapper.prototype.getHeaderCellTemplateFunc=function(){return this.gridOptions.getHeaderCellTemplate;}; // properties
	GridOptionsWrapper.prototype.getHeaderHeight=function(){if(typeof this.headerHeight==='number'){return this.headerHeight;}else {return 25;}};GridOptionsWrapper.prototype.setHeaderHeight=function(headerHeight){this.headerHeight=headerHeight;};GridOptionsWrapper.prototype.isExternalFilterPresent=function(){if(typeof this.gridOptions.isExternalFilterPresent==='function'){return this.gridOptions.isExternalFilterPresent();}else {return false;}};GridOptionsWrapper.prototype.doesExternalFilterPass=function(node){if(typeof this.gridOptions.doesExternalFilterPass==='function'){return this.gridOptions.doesExternalFilterPass(node);}else {return false;}};GridOptionsWrapper.prototype.getGroupRowInnerRenderer=function(){return this.gridOptions.groupRowInnerRenderer;};GridOptionsWrapper.prototype.getColWidth=function(){if(typeof this.gridOptions.colWidth!=='number'||this.gridOptions.colWidth<constants.MIN_COL_WIDTH){return 200;}else {return this.gridOptions.colWidth;}};GridOptionsWrapper.prototype.getRowBuffer=function(){if(typeof this.gridOptions.rowBuffer==='number'){if(this.gridOptions.rowBuffer<0){console.warn('ag-Grid: rowBuffer should not be negative');}return this.gridOptions.rowBuffer;}else {return constants.ROW_BUFFER_SIZE;}};GridOptionsWrapper.prototype.checkForDeprecated=function(){ // casting to generic object, so typescript compiles even though
	// we are looking for attributes that don't exist
	var options=this.gridOptions;if(options.suppressUnSort){console.warn('ag-grid: as of v1.12.4 suppressUnSort is not used. Please use sortOrder instead.');}if(options.suppressDescSort){console.warn('ag-grid: as of v1.12.4 suppressDescSort is not used. Please use sortOrder instead.');}if(options.groupAggFields){console.warn('ag-grid: as of v3 groupAggFields is not used. Please add appropriate agg fields to your columns.');}if(options.groupHidePivotColumns){console.warn('ag-grid: as of v3 groupHidePivotColumns is not used as pivot columns are now called rowGroup columns. Please refer to the documentation');}if(options.groupKeys){console.warn('ag-grid: as of v3 groupKeys is not used. You need to set rowGroupIndex on the columns to group. Please refer to the documentation');}if(typeof options.groupDefaultExpanded==='boolean'){console.warn('ag-grid: groupDefaultExpanded can no longer be boolean. for groupDefaultExpanded=true, use groupDefaultExpanded=9999 instead, to expand all the groups');}};GridOptionsWrapper.prototype.getLocaleTextFunc=function(){if(this.gridOptions.localeTextFunc){return this.gridOptions.localeTextFunc;}var that=this;return function(key,defaultValue){var localeText=that.gridOptions.localeText;if(localeText&&localeText[key]){return localeText[key];}else {return defaultValue;}};}; // responsible for calling the onXXX functions on gridOptions
	GridOptionsWrapper.prototype.globalEventHandler=function(eventName,event){var callbackMethodName=grid.ComponentUtil.getCallbackForEvent(eventName);if(typeof this.gridOptions[callbackMethodName]==='function'){this.gridOptions[callbackMethodName](event);}}; // we don't allow dynamic row height for virtual paging
	GridOptionsWrapper.prototype.getRowHeightForVirtualPagiation=function(){if(typeof this.gridOptions.rowHeight==='number'){return this.gridOptions.rowHeight;}else {return DEFAULT_ROW_HEIGHT;}};GridOptionsWrapper.prototype.getRowHeightForNode=function(rowNode){if(typeof this.gridOptions.rowHeight==='number'){return this.gridOptions.rowHeight;}else if(typeof this.gridOptions.getRowHeight==='function'){var params={node:rowNode,data:rowNode.data,api:this.gridOptions.api,context:this.gridOptions.context};return this.gridOptions.getRowHeight(params);}else {return DEFAULT_ROW_HEIGHT;}};return GridOptionsWrapper;}();grid.GridOptionsWrapper=GridOptionsWrapper;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path="../utils.ts" />
	/// <reference path="textAndNumberFilterParameters.ts" />
	var ag;(function(ag){var grid;(function(grid){var utils=grid.Utils;var template='<div>'+'<div>'+'<select class="ag-filter-select" id="filterType">'+'<option value="1">[CONTAINS]</option>'+'<option value="2">[EQUALS]</option>'+'<option value="3">[STARTS WITH]</option>'+'<option value="4">[ENDS WITH]</option>'+'</select>'+'</div>'+'<div>'+'<input class="ag-filter-filter" id="filterText" type="text" placeholder="[FILTER...]"/>'+'</div>'+'<div class="ag-filter-apply-panel" id="applyPanel">'+'<button type="button" id="applyButton">[APPLY FILTER]</button>'+'</div>'+'</div>';var CONTAINS=1;var EQUALS=2;var STARTS_WITH=3;var ENDS_WITH=4;var TextFilter=function(){function TextFilter(){}TextFilter.prototype.init=function(params){this.filterParams=params.filterParams;this.applyActive=this.filterParams&&this.filterParams.apply==true;this.filterChangedCallback=params.filterChangedCallback;this.filterModifiedCallback=params.filterModifiedCallback;this.localeTextFunc=params.localeTextFunc;this.valueGetter=params.valueGetter;this.createGui();this.filterText=null;this.filterType=CONTAINS;this.createApi();};TextFilter.prototype.onNewRowsLoaded=function(){var keepSelection=this.filterParams&&this.filterParams.newRowsAction==='keep';if(!keepSelection){this.api.setType(CONTAINS);this.api.setFilter(null);}};TextFilter.prototype.afterGuiAttached=function(){this.eFilterTextField.focus();};TextFilter.prototype.doesFilterPass=function(node){if(!this.filterText){return true;}var value=this.valueGetter(node);if(!value){return false;}var valueLowerCase=value.toString().toLowerCase();switch(this.filterType){case CONTAINS:return valueLowerCase.indexOf(this.filterText)>=0;case EQUALS:return valueLowerCase===this.filterText;case STARTS_WITH:return valueLowerCase.indexOf(this.filterText)===0;case ENDS_WITH:var index=valueLowerCase.indexOf(this.filterText);return index>=0&&index===valueLowerCase.length-this.filterText.length;default: // should never happen
	console.warn('invalid filter type '+this.filterType);return false;}};TextFilter.prototype.getGui=function(){return this.eGui;};TextFilter.prototype.isFilterActive=function(){return this.filterText!==null;};TextFilter.prototype.createTemplate=function(){return template.replace('[FILTER...]',this.localeTextFunc('filterOoo','Filter...')).replace('[EQUALS]',this.localeTextFunc('equals','Equals')).replace('[CONTAINS]',this.localeTextFunc('contains','Contains')).replace('[STARTS WITH]',this.localeTextFunc('startsWith','Starts with')).replace('[ENDS WITH]',this.localeTextFunc('endsWith','Ends with')).replace('[APPLY FILTER]',this.localeTextFunc('applyFilter','Apply Filter'));};TextFilter.prototype.createGui=function(){this.eGui=utils.loadTemplate(this.createTemplate());this.eFilterTextField=this.eGui.querySelector("#filterText");this.eTypeSelect=this.eGui.querySelector("#filterType");utils.addChangeListener(this.eFilterTextField,this.onFilterChanged.bind(this));this.eTypeSelect.addEventListener("change",this.onTypeChanged.bind(this));this.setupApply();};TextFilter.prototype.setupApply=function(){var _this=this;if(this.applyActive){this.eApplyButton=this.eGui.querySelector('#applyButton');this.eApplyButton.addEventListener('click',function(){_this.filterChangedCallback();});}else {utils.removeElement(this.eGui,'#applyPanel');}};TextFilter.prototype.onTypeChanged=function(){this.filterType=parseInt(this.eTypeSelect.value);this.filterChanged();};TextFilter.prototype.onFilterChanged=function(){var filterText=utils.makeNull(this.eFilterTextField.value);if(filterText&&filterText.trim()===''){filterText=null;}var newFilterText;if(filterText!==null&&filterText!==undefined){newFilterText=filterText.toLowerCase();}else {newFilterText=null;}if(this.filterText!==newFilterText){this.filterText=newFilterText;this.filterChanged();}};TextFilter.prototype.filterChanged=function(){this.filterModifiedCallback();if(!this.applyActive){this.filterChangedCallback();}};TextFilter.prototype.createApi=function(){var that=this;this.api={EQUALS:EQUALS,CONTAINS:CONTAINS,STARTS_WITH:STARTS_WITH,ENDS_WITH:ENDS_WITH,setType:function setType(type){that.filterType=type;that.eTypeSelect.value=type;},setFilter:function setFilter(filter){filter=utils.makeNull(filter);if(filter){that.filterText=filter.toLowerCase();that.eFilterTextField.value=filter;}else {that.filterText=null;that.eFilterTextField.value=null;}},getType:function getType(){return that.filterType;},getFilter:function getFilter(){return that.filterText;},getModel:function getModel(){if(that.isFilterActive()){return {type:that.filterType,filter:that.filterText};}else {return null;}},setModel:function setModel(dataModel){if(dataModel){this.setType(dataModel.type);this.setFilter(dataModel.filter);}else {this.setFilter(null);}}};};TextFilter.prototype.getApi=function(){return this.api;};return TextFilter;}();grid.TextFilter=TextFilter;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path="../utils.ts" />
	/// <reference path="textAndNumberFilterParameters.ts" />
	var ag;(function(ag){var grid;(function(grid){var utils=grid.Utils;var template='<div>'+'<div>'+'<select class="ag-filter-select" id="filterType">'+'<option value="1">[EQUALS]</option>'+'<option value="2">[LESS THAN]</option>'+'<option value="3">[GREATER THAN]</option>'+'</select>'+'</div>'+'<div>'+'<input class="ag-filter-filter" id="filterText" type="text" placeholder="[FILTER...]"/>'+'</div>'+'<div class="ag-filter-apply-panel" id="applyPanel">'+'<button type="button" id="applyButton">[APPLY FILTER]</button>'+'</div>'+'</div>';var EQUALS=1;var LESS_THAN=2;var GREATER_THAN=3;var NumberFilter=function(){function NumberFilter(){}NumberFilter.prototype.init=function(params){this.filterParams=params.filterParams;this.applyActive=this.filterParams&&this.filterParams.apply==true;this.filterChangedCallback=params.filterChangedCallback;this.filterModifiedCallback=params.filterModifiedCallback;this.localeTextFunc=params.localeTextFunc;this.valueGetter=params.valueGetter;this.createGui();this.filterNumber=null;this.filterType=EQUALS;this.createApi();};NumberFilter.prototype.onNewRowsLoaded=function(){var keepSelection=this.filterParams&&this.filterParams.newRowsAction==='keep';if(!keepSelection){this.api.setType(EQUALS);this.api.setFilter(null);}};NumberFilter.prototype.afterGuiAttached=function(){this.eFilterTextField.focus();};NumberFilter.prototype.doesFilterPass=function(node){if(this.filterNumber===null){return true;}var value=this.valueGetter(node);if(!value&&value!==0){return false;}var valueAsNumber;if(typeof value==='number'){valueAsNumber=value;}else {valueAsNumber=parseFloat(value);}switch(this.filterType){case EQUALS:return valueAsNumber===this.filterNumber;case LESS_THAN:return valueAsNumber<this.filterNumber;case GREATER_THAN:return valueAsNumber>this.filterNumber;default: // should never happen
	console.warn('invalid filter type '+this.filterType);return false;}};NumberFilter.prototype.getGui=function(){return this.eGui;};NumberFilter.prototype.isFilterActive=function(){return this.filterNumber!==null;};NumberFilter.prototype.createTemplate=function(){return template.replace('[FILTER...]',this.localeTextFunc('filterOoo','Filter...')).replace('[EQUALS]',this.localeTextFunc('equals','Equals')).replace('[LESS THAN]',this.localeTextFunc('lessThan','Less than')).replace('[GREATER THAN]',this.localeTextFunc('greaterThan','Greater than')).replace('[APPLY FILTER]',this.localeTextFunc('applyFilter','Apply Filter'));};NumberFilter.prototype.createGui=function(){this.eGui=utils.loadTemplate(this.createTemplate());this.eFilterTextField=this.eGui.querySelector("#filterText");this.eTypeSelect=this.eGui.querySelector("#filterType");utils.addChangeListener(this.eFilterTextField,this.onFilterChanged.bind(this));this.eTypeSelect.addEventListener("change",this.onTypeChanged.bind(this));this.setupApply();};NumberFilter.prototype.setupApply=function(){var _this=this;if(this.applyActive){this.eApplyButton=this.eGui.querySelector('#applyButton');this.eApplyButton.addEventListener('click',function(){_this.filterChangedCallback();});}else {utils.removeElement(this.eGui,'#applyPanel');}};NumberFilter.prototype.onTypeChanged=function(){this.filterType=parseInt(this.eTypeSelect.value);this.filterChanged();};NumberFilter.prototype.filterChanged=function(){this.filterModifiedCallback();if(!this.applyActive){this.filterChangedCallback();}};NumberFilter.prototype.onFilterChanged=function(){var filterText=utils.makeNull(this.eFilterTextField.value);if(filterText&&filterText.trim()===''){filterText=null;}var newFilter;if(filterText!==null&&filterText!==undefined){newFilter=parseFloat(filterText);}else {newFilter=null;}if(this.filterNumber!==newFilter){this.filterNumber=newFilter;this.filterChanged();}};NumberFilter.prototype.createApi=function(){var that=this;this.api={EQUALS:EQUALS,LESS_THAN:LESS_THAN,GREATER_THAN:GREATER_THAN,setType:function setType(type){that.filterType=type;that.eTypeSelect.value=type;},setFilter:function setFilter(filter){filter=utils.makeNull(filter);if(filter!==null&&!(typeof filter==='number')){filter=parseFloat(filter);}that.filterNumber=filter;that.eFilterTextField.value=filter;},getType:function getType(){return that.filterType;},getFilter:function getFilter(){return that.filterNumber;},getModel:function getModel(){if(that.isFilterActive()){return {type:that.filterType,filter:that.filterNumber};}else {return null;}},setModel:function setModel(dataModel){if(dataModel){this.setType(dataModel.type);this.setFilter(dataModel.filter);}else {this.setFilter(null);}}};};NumberFilter.prototype.getApi=function(){return this.api;};return NumberFilter;}();grid.NumberFilter=NumberFilter;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path="../utils.ts" />
	/// <reference path="../entities/colDef.ts" />
	var ag;(function(ag){var grid;(function(grid){var _=grid.Utils;var SetFilterModel=function(){function SetFilterModel(colDef,rowModel,valueGetter,doesRowPassOtherFilters){this.colDef=colDef;this.rowModel=rowModel;this.valueGetter=valueGetter;this.doesRowPassOtherFilters=doesRowPassOtherFilters;this.filterParams=this.colDef.filterParams;this.usingProvidedSet=this.filterParams&&this.filterParams.values;this.showingAvailableOnly=this.filterParams&&!this.filterParams.suppressRemoveEntries;this.createAllUniqueValues();this.createAvailableUniqueValues(); // by default, no filter, so we display everything
	this.displayedValues=this.availableUniqueValues;this.miniFilter=null; // we use a map rather than an array for the selected values as the lookup
	// for a map is much faster than the lookup for an array, especially when
	// the length of the array is thousands of records long
	this.selectedValuesMap={};this.selectEverything();} // if keepSelection not set will always select all filters
	// if keepSelection set will keep current state of selected filters
	//    unless selectAll chosen in which case will select all
	SetFilterModel.prototype.refreshAfterNewRowsLoaded=function(keepSelection,isSelectAll){this.createAllUniqueValues();this.createAvailableUniqueValues();var oldModel=Object.keys(this.selectedValuesMap);this.selectedValuesMap={};this.processMiniFilter();if(keepSelection){this.setModel(oldModel,isSelectAll);}else {this.selectEverything();}};SetFilterModel.prototype.refreshAfterAnyFilterChanged=function(){if(this.showingAvailableOnly){this.createAvailableUniqueValues();this.processMiniFilter();}};SetFilterModel.prototype.createAllUniqueValues=function(){if(this.usingProvidedSet){this.allUniqueValues=_.toStrings(this.filterParams.values);}else {this.allUniqueValues=_.toStrings(this.getUniqueValues(false));}this.sortValues(this.allUniqueValues);};SetFilterModel.prototype.createAvailableUniqueValues=function(){var dontCheckAvailableValues=!this.showingAvailableOnly||this.usingProvidedSet;if(dontCheckAvailableValues){this.availableUniqueValues=this.allUniqueValues;return;}this.availableUniqueValues=_.toStrings(this.getUniqueValues(true));this.sortValues(this.availableUniqueValues);};SetFilterModel.prototype.sortValues=function(values){if(this.filterParams&&this.filterParams.comparator){values.sort(this.filterParams.comparator);}else if(this.colDef.comparator){values.sort(this.colDef.comparator);}else {values.sort(_.defaultComparator);}};SetFilterModel.prototype.getUniqueValues=function(filterOutNotAvailable){var _this=this;var uniqueCheck={};var result=[];this.rowModel.forEachNode(function(node){if(!node.group){var value=_this.valueGetter(node);if(value===""||value===undefined){value=null;}if(filterOutNotAvailable){if(!_this.doesRowPassOtherFilters(node)){return;}}if(value!=null&&Array.isArray(value)){for(var j=0;j<value.length;j++){addUniqueValueIfMissing(value[j]);}}else {addUniqueValueIfMissing(value);}}});function addUniqueValueIfMissing(value){if(!uniqueCheck.hasOwnProperty(value)){result.push(value);uniqueCheck[value]=1;}}return result;}; //sets mini filter. returns true if it changed from last value, otherwise false
	SetFilterModel.prototype.setMiniFilter=function(newMiniFilter){newMiniFilter=_.makeNull(newMiniFilter);if(this.miniFilter===newMiniFilter){ //do nothing if filter has not changed
	return false;}this.miniFilter=newMiniFilter;this.processMiniFilter();return true;};SetFilterModel.prototype.getMiniFilter=function(){return this.miniFilter;};SetFilterModel.prototype.processMiniFilter=function(){ // if no filter, just use the unique values
	if(this.miniFilter===null){this.displayedValues=this.availableUniqueValues;return;} // if filter present, we filter down the list
	this.displayedValues=[];var miniFilterUpperCase=this.miniFilter.toUpperCase();for(var i=0,l=this.availableUniqueValues.length;i<l;i++){var filteredValue=this.availableUniqueValues[i];if(filteredValue!==null&&filteredValue.toString().toUpperCase().indexOf(miniFilterUpperCase)>=0){this.displayedValues.push(filteredValue);}}};SetFilterModel.prototype.getDisplayedValueCount=function(){return this.displayedValues.length;};SetFilterModel.prototype.getDisplayedValue=function(index){return this.displayedValues[index];};SetFilterModel.prototype.selectEverything=function(){var count=this.allUniqueValues.length;for(var i=0;i<count;i++){var value=this.allUniqueValues[i];this.selectedValuesMap[value]=null;}this.selectedValuesCount=count;};SetFilterModel.prototype.isFilterActive=function(){return this.allUniqueValues.length!==this.selectedValuesCount;};SetFilterModel.prototype.selectNothing=function(){this.selectedValuesMap={};this.selectedValuesCount=0;};SetFilterModel.prototype.getUniqueValueCount=function(){return this.allUniqueValues.length;};SetFilterModel.prototype.getUniqueValue=function(index){return this.allUniqueValues[index];};SetFilterModel.prototype.unselectValue=function(value){if(this.selectedValuesMap[value]!==undefined){delete this.selectedValuesMap[value];this.selectedValuesCount--;}};SetFilterModel.prototype.selectValue=function(value){if(this.selectedValuesMap[value]===undefined){this.selectedValuesMap[value]=null;this.selectedValuesCount++;}};SetFilterModel.prototype.isValueSelected=function(value){return this.selectedValuesMap[value]!==undefined;};SetFilterModel.prototype.isEverythingSelected=function(){return this.allUniqueValues.length===this.selectedValuesCount;};SetFilterModel.prototype.isNothingSelected=function(){return this.allUniqueValues.length===0;};SetFilterModel.prototype.getModel=function(){if(!this.isFilterActive()){return null;}var selectedValues=[];_.iterateObject(this.selectedValuesMap,function(key){selectedValues.push(key);});return selectedValues;};SetFilterModel.prototype.setModel=function(model,isSelectAll){if(model&&!isSelectAll){this.selectNothing();for(var i=0;i<model.length;i++){var newValue=model[i];if(this.allUniqueValues.indexOf(newValue)>=0){this.selectValue(model[i]);}else {console.warn('Value '+newValue+' is not a valid value for filter');}}}else {this.selectEverything();}};return SetFilterModel;}();grid.SetFilterModel=SetFilterModel;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /** The filter parameters for set filter */ /// <reference path="../utils.ts" />
	/// <reference path="setFilterModel.ts" />
	/// <reference path="setFilterParameters.ts" />
	var ag;(function(ag){var grid;(function(grid){var _=grid.Utils;var template='<div>'+'<div class="ag-filter-header-container">'+'<input class="ag-filter-filter" type="text" placeholder="[SEARCH...]"/>'+'</div>'+'<div class="ag-filter-header-container">'+'<label>'+'<input id="selectAll" type="checkbox" class="ag-filter-checkbox"/>'+'([SELECT ALL])'+'</label>'+'</div>'+'<div class="ag-filter-list-viewport">'+'<div class="ag-filter-list-container">'+'<div id="itemForRepeat" class="ag-filter-item">'+'<label>'+'<input type="checkbox" class="ag-filter-checkbox" filter-checkbox="true"/>'+'<span class="ag-filter-value"></span>'+'</label>'+'</div>'+'</div>'+'</div>'+'<div class="ag-filter-apply-panel" id="applyPanel">'+'<button type="button" id="applyButton">[APPLY FILTER]</button>'+'</div>'+'</div>';var DEFAULT_ROW_HEIGHT=20;var SetFilter=function(){function SetFilter(){}SetFilter.prototype.init=function(params){this.filterParams=params.filterParams;this.rowHeight=this.filterParams&&this.filterParams.cellHeight?this.filterParams.cellHeight:DEFAULT_ROW_HEIGHT;this.applyActive=this.filterParams&&this.filterParams.apply==true;this.model=new grid.SetFilterModel(params.colDef,params.rowModel,params.valueGetter,params.doesRowPassOtherFilter);this.filterChangedCallback=params.filterChangedCallback;this.filterModifiedCallback=params.filterModifiedCallback;this.valueGetter=params.valueGetter;this.rowsInBodyContainer={};this.colDef=params.colDef;this.localeTextFunc=params.localeTextFunc;if(this.filterParams){this.cellRenderer=this.filterParams.cellRenderer;}this.createGui();this.addScrollListener();this.createApi();}; // we need to have the gui attached before we can draw the virtual rows, as the
	// virtual row logic needs info about the gui state
	SetFilter.prototype.afterGuiAttached=function(){this.drawVirtualRows();};SetFilter.prototype.isFilterActive=function(){return this.model.isFilterActive();};SetFilter.prototype.doesFilterPass=function(node){ // if no filter, always pass
	if(this.model.isEverythingSelected()){return true;} // if nothing selected in filter, always fail
	if(this.model.isNothingSelected()){return false;}var value=this.valueGetter(node);value=_.makeNull(value);if(Array.isArray(value)){for(var i=0;i<value.length;i++){if(this.model.isValueSelected(value[i])){return true;}}return false;}else {return this.model.isValueSelected(value);}};SetFilter.prototype.getGui=function(){return this.eGui;};SetFilter.prototype.onNewRowsLoaded=function(){var keepSelection=this.filterParams&&this.filterParams.newRowsAction==='keep';var isSelectAll=this.eSelectAll&&this.eSelectAll.checked&&!this.eSelectAll.indeterminate; // default is reset
	this.model.refreshAfterNewRowsLoaded(keepSelection,isSelectAll);this.setContainerHeight();this.refreshVirtualRows();};SetFilter.prototype.onAnyFilterChanged=function(){this.model.refreshAfterAnyFilterChanged();this.setContainerHeight();this.refreshVirtualRows();};SetFilter.prototype.createTemplate=function(){return template.replace('[SELECT ALL]',this.localeTextFunc('selectAll','Select All')).replace('[SEARCH...]',this.localeTextFunc('searchOoo','Search...')).replace('[APPLY FILTER]',this.localeTextFunc('applyFilter','Apply Filter'));};SetFilter.prototype.createGui=function(){var _this=this;this.eGui=_.loadTemplate(this.createTemplate());this.eListContainer=this.eGui.querySelector(".ag-filter-list-container");this.eFilterValueTemplate=this.eGui.querySelector("#itemForRepeat");this.eSelectAll=this.eGui.querySelector("#selectAll");this.eListViewport=this.eGui.querySelector(".ag-filter-list-viewport");this.eMiniFilter=this.eGui.querySelector(".ag-filter-filter");this.eListContainer.style.height=this.model.getUniqueValueCount()*this.rowHeight+"px";this.setContainerHeight();this.eMiniFilter.value=this.model.getMiniFilter();_.addChangeListener(this.eMiniFilter,function(){_this.onMiniFilterChanged();});_.removeAllChildren(this.eListContainer);this.eSelectAll.onclick=this.onSelectAll.bind(this);if(this.model.isEverythingSelected()){this.eSelectAll.indeterminate=false;this.eSelectAll.checked=true;}else if(this.model.isNothingSelected()){this.eSelectAll.indeterminate=false;this.eSelectAll.checked=false;}else {this.eSelectAll.indeterminate=true;}this.setupApply();};SetFilter.prototype.setupApply=function(){var _this=this;if(this.applyActive){this.eApplyButton=this.eGui.querySelector('#applyButton');this.eApplyButton.addEventListener('click',function(){_this.filterChangedCallback();});}else {_.removeElement(this.eGui,'#applyPanel');}};SetFilter.prototype.setContainerHeight=function(){this.eListContainer.style.height=this.model.getDisplayedValueCount()*this.rowHeight+"px";};SetFilter.prototype.drawVirtualRows=function(){var topPixel=this.eListViewport.scrollTop;var bottomPixel=topPixel+this.eListViewport.offsetHeight;var firstRow=Math.floor(topPixel/this.rowHeight);var lastRow=Math.floor(bottomPixel/this.rowHeight);this.ensureRowsRendered(firstRow,lastRow);};SetFilter.prototype.ensureRowsRendered=function(start,finish){var _this=this; //at the end, this array will contain the items we need to remove
	var rowsToRemove=Object.keys(this.rowsInBodyContainer); //add in new rows
	for(var rowIndex=start;rowIndex<=finish;rowIndex++){ //see if item already there, and if yes, take it out of the 'to remove' array
	if(rowsToRemove.indexOf(rowIndex.toString())>=0){rowsToRemove.splice(rowsToRemove.indexOf(rowIndex.toString()),1);continue;} //check this row actually exists (in case overflow buffer window exceeds real data)
	if(this.model.getDisplayedValueCount()>rowIndex){var value=this.model.getDisplayedValue(rowIndex);_this.insertRow(value,rowIndex);}} //at this point, everything in our 'rowsToRemove' . . .
	this.removeVirtualRows(rowsToRemove);}; //takes array of row id's
	SetFilter.prototype.removeVirtualRows=function(rowsToRemove){var _this=this;rowsToRemove.forEach(function(indexToRemove){var eRowToRemove=_this.rowsInBodyContainer[indexToRemove];_this.eListContainer.removeChild(eRowToRemove);delete _this.rowsInBodyContainer[indexToRemove];});};SetFilter.prototype.insertRow=function(value,rowIndex){var _this=this;var eFilterValue=this.eFilterValueTemplate.cloneNode(true);var valueElement=eFilterValue.querySelector(".ag-filter-value");if(this.cellRenderer){ //renderer provided, so use it
	var resultFromRenderer=this.cellRenderer({value:value});if(_.isNode(resultFromRenderer)){ //a dom node or element was returned, so add child
	valueElement.appendChild(resultFromRenderer);}else { //otherwise assume it was html, so just insert
	valueElement.innerHTML=resultFromRenderer;}}else { //otherwise display as a string
	var blanksText='('+this.localeTextFunc('blanks','Blanks')+')';var displayNameOfValue=value===null?blanksText:value;valueElement.innerHTML=displayNameOfValue;}var eCheckbox=eFilterValue.querySelector("input");eCheckbox.checked=this.model.isValueSelected(value);eCheckbox.onclick=function(){_this.onCheckboxClicked(eCheckbox,value);};eFilterValue.style.top=this.rowHeight*rowIndex+"px";this.eListContainer.appendChild(eFilterValue);this.rowsInBodyContainer[rowIndex]=eFilterValue;};SetFilter.prototype.onCheckboxClicked=function(eCheckbox,value){var checked=eCheckbox.checked;if(checked){this.model.selectValue(value);if(this.model.isEverythingSelected()){this.eSelectAll.indeterminate=false;this.eSelectAll.checked=true;}else {this.eSelectAll.indeterminate=true;}}else {this.model.unselectValue(value); //if set is empty, nothing is selected
	if(this.model.isNothingSelected()){this.eSelectAll.indeterminate=false;this.eSelectAll.checked=false;}else {this.eSelectAll.indeterminate=true;}}this.filterChanged();};SetFilter.prototype.filterChanged=function(){this.filterModifiedCallback();if(!this.applyActive){this.filterChangedCallback();}};SetFilter.prototype.onMiniFilterChanged=function(){var miniFilterChanged=this.model.setMiniFilter(this.eMiniFilter.value);if(miniFilterChanged){this.setContainerHeight();this.refreshVirtualRows();}};SetFilter.prototype.refreshVirtualRows=function(){this.clearVirtualRows();this.drawVirtualRows();};SetFilter.prototype.clearVirtualRows=function(){var rowsToRemove=Object.keys(this.rowsInBodyContainer);this.removeVirtualRows(rowsToRemove);};SetFilter.prototype.onSelectAll=function(){var checked=this.eSelectAll.checked;if(checked){this.model.selectEverything();}else {this.model.selectNothing();}this.updateAllCheckboxes(checked);this.filterChanged();};SetFilter.prototype.updateAllCheckboxes=function(checked){var currentlyDisplayedCheckboxes=this.eListContainer.querySelectorAll("[filter-checkbox=true]");for(var i=0,l=currentlyDisplayedCheckboxes.length;i<l;i++){currentlyDisplayedCheckboxes[i].checked=checked;}};SetFilter.prototype.addScrollListener=function(){var _this=this;this.eListViewport.addEventListener("scroll",function(){_this.drawVirtualRows();});};SetFilter.prototype.getApi=function(){return this.api;};SetFilter.prototype.createApi=function(){var model=this.model;var that=this;this.api={setMiniFilter:function setMiniFilter(newMiniFilter){model.setMiniFilter(newMiniFilter);},getMiniFilter:function getMiniFilter(){return model.getMiniFilter();},selectEverything:function selectEverything(){that.eSelectAll.indeterminate=false;that.eSelectAll.checked=true; // not sure if we need to call this, as checking the checkout above might
	// fire events.
	model.selectEverything();},isFilterActive:function isFilterActive(){return model.isFilterActive();},selectNothing:function selectNothing(){that.eSelectAll.indeterminate=false;that.eSelectAll.checked=false; // not sure if we need to call this, as checking the checkout above might
	// fire events.
	model.selectNothing();},unselectValue:function unselectValue(value){model.unselectValue(value);that.refreshVirtualRows();},selectValue:function selectValue(value){model.selectValue(value);that.refreshVirtualRows();},isValueSelected:function isValueSelected(value){return model.isValueSelected(value);},isEverythingSelected:function isEverythingSelected(){return model.isEverythingSelected();},isNothingSelected:function isNothingSelected(){return model.isNothingSelected();},getUniqueValueCount:function getUniqueValueCount(){return model.getUniqueValueCount();},getUniqueValue:function getUniqueValue(index){return model.getUniqueValue(index);},getModel:function getModel(){return model.getModel();},setModel:function setModel(dataModel){model.setModel(dataModel);that.refreshVirtualRows();}};};return SetFilter;}();grid.SetFilter=SetFilter;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path="../utils.ts" />
	/// <reference path="../constants.ts" />
	var ag;(function(ag){var grid;(function(grid){var _=grid.Utils;var PopupService=function(){function PopupService(){}PopupService.prototype.init=function(ePopupParent){this.ePopupParent=ePopupParent;};PopupService.prototype.positionPopup=function(eventSource,ePopup,keepWithinBounds){var sourceRect=eventSource.getBoundingClientRect();var parentRect=this.ePopupParent.getBoundingClientRect();var x=sourceRect.left-parentRect.left;var y=sourceRect.top-parentRect.top+sourceRect.height; // if popup is overflowing to the right, move it left
	if(keepWithinBounds){var minWidth;if(ePopup.clientWidth>0){minWidth=ePopup.clientWidth;}else {minWidth=200;}var widthOfParent=parentRect.right-parentRect.left;var maxX=widthOfParent-minWidth;if(x>maxX){x=maxX;}if(x<0){x=0;}}ePopup.style.left=x+"px";ePopup.style.top=y+"px";}; //adds an element to a div, but also listens to background checking for clicks,
	//so that when the background is clicked, the child is removed again, giving
	//a model look to popups.
	PopupService.prototype.addAsModalPopup=function(eChild,closeOnEsc){var eBody=document.body;if(!eBody){console.warn('ag-grid: could not find the body of the document, document.body is empty');return;}var popupAlreadyShown=_.isVisible(eChild);if(popupAlreadyShown){return;}this.ePopupParent.appendChild(eChild);var that=this; // if we add these listeners now, then the current mouse
	// click will be included, which we don't want
	setTimeout(function(){if(closeOnEsc){eBody.addEventListener('keydown',hidePopupOnEsc);}eBody.addEventListener('click',hidePopup);eChild.addEventListener('click',consumeClick);},0);var eventFromChild=null;function hidePopupOnEsc(event){var key=event.which||event.keyCode;if(key===grid.Constants.KEY_ESCAPE){hidePopup(null);}}function hidePopup(event){if(event&&event===eventFromChild){return;}that.ePopupParent.removeChild(eChild);eBody.removeEventListener('keydown',hidePopupOnEsc);eBody.removeEventListener('click',hidePopup);eChild.removeEventListener('click',consumeClick);}function consumeClick(event){eventFromChild=event;}return hidePopup;};return PopupService;}();grid.PopupService=PopupService;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path="../utils.ts" />
	/// <reference path="textFilter.ts" />
	/// <reference path="numberFilter.ts" />
	/// <reference path="setFilter.ts" />
	/// <reference path="../widgets/agPopupService.ts" />
	/// <reference path="../widgets/agPopupService.ts" />
	/// <reference path="../grid.ts" />
	/// <reference path="../entities/rowNode.ts" />
	var ag;(function(ag){var grid;(function(grid_2){var _=grid_2.Utils;var FilterManager=function(){function FilterManager(){}FilterManager.prototype.init=function(grid,gridOptionsWrapper,$compile,$scope,columnController,popupService,valueService){this.$compile=$compile;this.$scope=$scope;this.gridOptionsWrapper=gridOptionsWrapper;this.grid=grid;this.allFilters={};this.columnController=columnController;this.popupService=popupService;this.valueService=valueService;this.columnController=columnController;this.quickFilter=null;};FilterManager.prototype.setFilterModel=function(model){var _this=this;if(model){ // mark the filters as we set them, so any active filters left over we stop
	var modelKeys=Object.keys(model);_.iterateObject(this.allFilters,function(colId,filterWrapper){_.removeFromArray(modelKeys,colId);var newModel=model[colId];_this.setModelOnFilterWrapper(filterWrapper.filter,newModel);}); // at this point, processedFields contains data for which we don't have a filter working yet
	_.iterateArray(modelKeys,function(colId){var column=_this.columnController.getColumn(colId);if(!column){console.warn('Warning ag-grid setFilterModel - no column found for colId '+colId);return;}var filterWrapper=_this.getOrCreateFilterWrapper(column);_this.setModelOnFilterWrapper(filterWrapper.filter,model[colId]);});}else {_.iterateObject(this.allFilters,function(key,filterWrapper){_this.setModelOnFilterWrapper(filterWrapper.filter,null);});}this.grid.onFilterChanged();};FilterManager.prototype.setModelOnFilterWrapper=function(filter,newModel){ // because user can provide filters, we provide useful error checking and messages
	if(typeof filter.getApi!=='function'){console.warn('Warning ag-grid - filter missing getApi method, which is needed for getFilterModel');return;}var filterApi=filter.getApi();if(typeof filterApi.setModel!=='function'){console.warn('Warning ag-grid - filter API missing setModel method, which is needed for setFilterModel');return;}filterApi.setModel(newModel);};FilterManager.prototype.getFilterModel=function(){var result={};_.iterateObject(this.allFilters,function(key,filterWrapper){ // because user can provide filters, we provide useful error checking and messages
	if(typeof filterWrapper.filter.getApi!=='function'){console.warn('Warning ag-grid - filter missing getApi method, which is needed for getFilterModel');return;}var filterApi=filterWrapper.filter.getApi();if(typeof filterApi.getModel!=='function'){console.warn('Warning ag-grid - filter API missing getModel method, which is needed for getFilterModel');return;}var model=filterApi.getModel();if(model){result[key]=model;}});return result;};FilterManager.prototype.setRowModel=function(rowModel){this.rowModel=rowModel;}; // returns true if any advanced filter (ie not quick filter) active
	FilterManager.prototype.isAdvancedFilterPresent=function(){var atLeastOneActive=false;_.iterateObject(this.allFilters,function(key,filterWrapper){if(!filterWrapper.filter.isFilterActive){console.error('Filter is missing method isFilterActive');}if(filterWrapper.filter.isFilterActive()){atLeastOneActive=true;}});return atLeastOneActive;}; // returns true if quickFilter or advancedFilter
	FilterManager.prototype.isAnyFilterPresent=function(){return this.isQuickFilterPresent()||this.advancedFilterPresent||this.externalFilterPresent;}; // returns true if given col has a filter active
	FilterManager.prototype.isFilterPresentForCol=function(colId){var filterWrapper=this.allFilters[colId];if(!filterWrapper){return false;}if(!filterWrapper.filter.isFilterActive){console.error('Filter is missing method isFilterActive');}var filterPresent=filterWrapper.filter.isFilterActive();return filterPresent;};FilterManager.prototype.doesFilterPass=function(node,filterToSkip){var data=node.data;var colKeys=Object.keys(this.allFilters);for(var i=0,l=colKeys.length;i<l;i++){var colId=colKeys[i];var filterWrapper=this.allFilters[colId]; // if no filter, always pass
	if(filterWrapper===undefined){continue;}if(filterWrapper.filter===filterToSkip){continue;}if(!filterWrapper.filter.doesFilterPass){console.error('Filter is missing method doesFilterPass');}var params={node:node,data:data};if(!filterWrapper.filter.doesFilterPass(params)){return false;}} // all filters passed
	return true;}; // returns true if it has changed (not just same value again)
	FilterManager.prototype.setQuickFilter=function(newFilter){if(newFilter===undefined||newFilter===""){newFilter=null;}if(this.quickFilter!==newFilter){if(this.gridOptionsWrapper.isVirtualPaging()){console.warn('ag-grid: cannot do quick filtering when doing virtual paging');return;} //want 'null' to mean to filter, so remove undefined and empty string
	if(newFilter===undefined||newFilter===""){newFilter=null;}if(newFilter!==null){newFilter=newFilter.toUpperCase();}this.quickFilter=newFilter;return true;}else {return false;}};FilterManager.prototype.onFilterChanged=function(){this.advancedFilterPresent=this.isAdvancedFilterPresent();this.externalFilterPresent=this.gridOptionsWrapper.isExternalFilterPresent();_.iterateObject(this.allFilters,function(key,filterWrapper){if(filterWrapper.filter.onAnyFilterChanged){filterWrapper.filter.onAnyFilterChanged();}});};FilterManager.prototype.isQuickFilterPresent=function(){return this.quickFilter!==null;};FilterManager.prototype.doesRowPassOtherFilters=function(filterToSkip,node){return this.doesRowPassFilter(node,filterToSkip);};FilterManager.prototype.doesRowPassFilter=function(node,filterToSkip){ //first up, check quick filter
	if(this.isQuickFilterPresent()){if(!node.quickFilterAggregateText){this.aggregateRowForQuickFilter(node);}if(node.quickFilterAggregateText.indexOf(this.quickFilter)<0){ //quick filter fails, so skip item
	return false;}} //secondly, give the client a chance to reject this row
	if(this.externalFilterPresent){if(!this.gridOptionsWrapper.doesExternalFilterPass(node)){return false;}} //lastly, check our internal advanced filter
	if(this.advancedFilterPresent){if(!this.doesFilterPass(node,filterToSkip)){return false;}} //got this far, all filters pass
	return true;};FilterManager.prototype.aggregateRowForQuickFilter=function(node){var aggregatedText='';var that=this;this.columnController.getAllColumns().forEach(function(column){var data=node.data;var value=that.valueService.getValue(column.getColDef(),data,node);if(value&&value!==''){aggregatedText=aggregatedText+value.toString().toUpperCase()+"_";}});node.quickFilterAggregateText=aggregatedText;};FilterManager.prototype.onNewRowsLoaded=function(){var that=this;Object.keys(this.allFilters).forEach(function(field){var filter=that.allFilters[field].filter;if(filter.onNewRowsLoaded){filter.onNewRowsLoaded();}});};FilterManager.prototype.createValueGetter=function(column){var that=this;return function valueGetter(node){return that.valueService.getValue(column.getColDef(),node.data,node);};};FilterManager.prototype.getFilterApi=function(column){var filterWrapper=this.getOrCreateFilterWrapper(column);if(filterWrapper){if(typeof filterWrapper.filter.getApi==='function'){return filterWrapper.filter.getApi();}}};FilterManager.prototype.getOrCreateFilterWrapper=function(column){var filterWrapper=this.allFilters[column.getColId()];if(!filterWrapper){filterWrapper=this.createFilterWrapper(column);this.allFilters[column.getColId()]=filterWrapper;}return filterWrapper;};FilterManager.prototype.createFilterWrapper=function(column){var colDef=column.getColDef();var filterWrapper={column:column,filter:null,scope:null,gui:null};if(typeof colDef.filter==='function'){ // if user provided a filter, just use it
	// first up, create child scope if needed
	if(this.gridOptionsWrapper.isAngularCompileFilters()){filterWrapper.scope=this.$scope.$new();} // now create filter (had to cast to any to get 'new' working)
	this.assertMethodHasNoParameters(colDef.filter);filterWrapper.filter=new colDef.filter();}else if(colDef.filter==='text'){filterWrapper.filter=new grid_2.TextFilter();}else if(colDef.filter==='number'){filterWrapper.filter=new grid_2.NumberFilter();}else {filterWrapper.filter=new grid_2.SetFilter();}var filterChangedCallback=this.grid.onFilterChanged.bind(this.grid);var filterModifiedCallback=this.grid.onFilterModified.bind(this.grid);var doesRowPassOtherFilters=this.doesRowPassOtherFilters.bind(this,filterWrapper.filter);var filterParams=colDef.filterParams;var params={colDef:colDef,rowModel:this.rowModel,filterChangedCallback:filterChangedCallback,filterModifiedCallback:filterModifiedCallback,filterParams:filterParams,localeTextFunc:this.gridOptionsWrapper.getLocaleTextFunc(),valueGetter:this.createValueGetter(column),doesRowPassOtherFilter:doesRowPassOtherFilters,context:this.gridOptionsWrapper.getContext,$scope:filterWrapper.scope};if(!filterWrapper.filter.init){throw 'Filter is missing method init';}filterWrapper.filter.init(params);if(!filterWrapper.filter.getGui){throw 'Filter is missing method getGui';}var eFilterGui=document.createElement('div');eFilterGui.className='ag-filter';var guiFromFilter=filterWrapper.filter.getGui();if(_.isNodeOrElement(guiFromFilter)){ //a dom node or element was returned, so add child
	eFilterGui.appendChild(guiFromFilter);}else { //otherwise assume it was html, so just insert
	var eTextSpan=document.createElement('span');eTextSpan.innerHTML=guiFromFilter;eFilterGui.appendChild(eTextSpan);}if(filterWrapper.scope){filterWrapper.gui=this.$compile(eFilterGui)(filterWrapper.scope)[0];}else {filterWrapper.gui=eFilterGui;}return filterWrapper;};FilterManager.prototype.destroy=function(){_.iterateObject(this.allFilters,function(key,filterWrapper){if(filterWrapper.filter.destroy){filterWrapper.filter.destroy();}});};FilterManager.prototype.assertMethodHasNoParameters=function(theMethod){var getRowsParams=_.getFunctionParameters(theMethod);if(getRowsParams.length>0){console.warn('ag-grid: It looks like your filter is of the old type and expecting parameters in the constructor.');console.warn('ag-grid: From ag-grid 1.14, the constructor should take no parameters and init() used instead.');}};FilterManager.prototype.showFilter=function(column,eventSource){var filterWrapper=this.getOrCreateFilterWrapper(column); // need to show filter before positioning, as only after filter
	// is visible can we find out what the width of it is
	var hidePopup=this.popupService.addAsModalPopup(filterWrapper.gui,true);this.popupService.positionPopup(eventSource,filterWrapper.gui,true);if(filterWrapper.filter.afterGuiAttached){var params={hidePopup:hidePopup,eventSource:eventSource};filterWrapper.filter.afterGuiAttached(params);}};return FilterManager;}();grid_2.FilterManager=FilterManager;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path="./columnGroupChild.ts"/>
	var ag;(function(ag){var grid;(function(grid){var ColumnGroup=function(){function ColumnGroup(colGroupDef,groupId,instanceId){ // depends on the open/closed state of the group, only displaying columns are stored here
	this.displayedChildren=[];this.expandable=false;this.expanded=false;this.colGroupDef=colGroupDef;this.groupId=groupId;this.instanceId=instanceId;} // returns header name if it exists, otherwise null. if will not exist if
	// this group is a padding group, as they don't have colGroupDef's
	ColumnGroup.prototype.getHeaderName=function(){if(this.colGroupDef){return this.colGroupDef.headerName;}else {return null;}};ColumnGroup.prototype.getGroupId=function(){return this.groupId;};ColumnGroup.prototype.getInstanceId=function(){return this.instanceId;};ColumnGroup.prototype.setExpanded=function(expanded){this.expanded=expanded;};ColumnGroup.prototype.isExpandable=function(){return this.expandable;};ColumnGroup.prototype.isExpanded=function(){return this.expanded;};ColumnGroup.prototype.getColGroupDef=function(){return this.colGroupDef;};ColumnGroup.prototype.isChildInThisGroupDeepSearch=function(wantedChild){var result=false;this.children.forEach(function(foundChild){if(wantedChild===foundChild){result=true;}if(foundChild instanceof ColumnGroup){if(foundChild.isChildInThisGroupDeepSearch(wantedChild)){result=true;}}});return result;};ColumnGroup.prototype.getActualWidth=function(){var groupActualWidth=0;if(this.displayedChildren){this.displayedChildren.forEach(function(child){groupActualWidth+=child.getActualWidth();});}return groupActualWidth;};ColumnGroup.prototype.getMinimumWidth=function(){var result=0;this.displayedChildren.forEach(function(groupChild){result+=groupChild.getMinimumWidth();});return result;};ColumnGroup.prototype.addChild=function(child){if(!this.children){this.children=[];}this.children.push(child);};ColumnGroup.prototype.getDisplayedChildren=function(){return this.displayedChildren;};ColumnGroup.prototype.getDisplayedLeafColumns=function(){var result=[];this.addDisplayedLeafColumns(result);return result;};ColumnGroup.prototype.getDefinition=function(){return this.colGroupDef;};ColumnGroup.prototype.addDisplayedLeafColumns=function(leafColumns){this.displayedChildren.forEach(function(child){if(child instanceof grid.Column){leafColumns.push(child);}else if(child instanceof ColumnGroup){child.addDisplayedLeafColumns(leafColumns);}});};ColumnGroup.prototype.getChildren=function(){return this.children;};ColumnGroup.prototype.getColumnGroupShow=function(){if(this.colGroupDef){return this.colGroupDef.columnGroupShow;}else { // if there is no col def, then this must be a padding
	// group, which means we exactly only child. we then
	// take the value from the child and push it up, making
	// this group 'invisible'.
	return this.children[0].getColumnGroupShow();}}; // need to check that this group has at least one col showing when both expanded and contracted.
	// if not, then we don't allow expanding and contracting on this group
	ColumnGroup.prototype.calculateExpandable=function(){ // want to make sure the group doesn't disappear when it's open
	var atLeastOneShowingWhenOpen=false; // want to make sure the group doesn't disappear when it's closed
	var atLeastOneShowingWhenClosed=false; // want to make sure the group has something to show / hide
	var atLeastOneChangeable=false;for(var i=0,j=this.children.length;i<j;i++){var abstractColumn=this.children[i]; // if the abstractColumn is a grid generated group, there will be no colDef
	var headerGroupShow=abstractColumn.getColumnGroupShow();if(headerGroupShow==='open'){atLeastOneShowingWhenOpen=true;atLeastOneChangeable=true;}else if(headerGroupShow==='closed'){atLeastOneShowingWhenClosed=true;atLeastOneChangeable=true;}else {atLeastOneShowingWhenOpen=true;atLeastOneShowingWhenClosed=true;}}this.expandable=atLeastOneShowingWhenOpen&&atLeastOneShowingWhenClosed&&atLeastOneChangeable;};ColumnGroup.prototype.calculateDisplayedColumns=function(){ // clear out last time we calculated
	this.displayedChildren=[]; // it not expandable, everything is visible
	if(!this.expandable){this.displayedChildren=this.children;return;} // and calculate again
	for(var i=0,j=this.children.length;i<j;i++){var abstractColumn=this.children[i];var headerGroupShow=abstractColumn.getColumnGroupShow();switch(headerGroupShow){case 'open': // when set to open, only show col if group is open
	if(this.expanded){this.displayedChildren.push(abstractColumn);}break;case 'closed': // when set to open, only show col if group is open
	if(!this.expanded){this.displayedChildren.push(abstractColumn);}break;default: // default is always show the column
	this.displayedChildren.push(abstractColumn);break;}}};return ColumnGroup;}();grid.ColumnGroup=ColumnGroup;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path="../constants.ts" />
	/// <reference path="columnGroup.ts" />
	var ag;(function(ag){var grid;(function(grid){var constants=grid.Constants; // Wrapper around a user provide column definition. The grid treats the column definition as ready only.
	// This class contains all the runtime information about a column, plus some logic (the definition has no logic).
	// This class implements both interfaces ColumnGroupChild and OriginalColumnGroupChild as the class can
	// appear as a child of either the original tree or the displayed tree. However the relevant group classes
	// for each type only implements one, as each group can only appear in it's associated tree (eg OriginalColumnGroup
	// can only appear in OriginalColumn tree).
	var Column=function(){function Column(colDef,actualWidth,colId){this.colDef=colDef;this.actualWidth=actualWidth;this.visible=!colDef.hide;this.sort=colDef.sort;this.sortedAt=colDef.sortedAt;this.colId=colId;if(colDef.pinned===true||colDef.pinned==='left'){this.pinned='left';}else if(colDef.pinned==='right'){this.pinned='right';}}Column.prototype.getSort=function(){return this.sort;};Column.prototype.setSort=function(sort){this.sort=sort;};Column.prototype.getSortedAt=function(){return this.sortedAt;};Column.prototype.setSortedAt=function(sortedAt){this.sortedAt=sortedAt;};Column.prototype.setAggFunc=function(aggFunc){this.aggFunc=aggFunc;};Column.prototype.getAggFunc=function(){return this.aggFunc;};Column.prototype.getIndex=function(){return this.index;};Column.prototype.setIndex=function(index){this.index=index;};Column.prototype.setPinned=function(pinned){if(pinned===true||pinned===Column.PINNED_LEFT){this.pinned=Column.PINNED_LEFT;}else if(pinned===Column.PINNED_RIGHT){this.pinned=Column.PINNED_RIGHT;}else {this.pinned=null;}};Column.prototype.isPinned=function(){return this.pinned===Column.PINNED_LEFT||this.pinned===Column.PINNED_RIGHT;};Column.prototype.getPinned=function(){return this.pinned;};Column.prototype.setVisible=function(visible){this.visible=visible===true;};Column.prototype.isVisible=function(){return this.visible;};Column.prototype.getColDef=function(){return this.colDef;};Column.prototype.getColumnGroupShow=function(){return this.colDef.columnGroupShow;};Column.prototype.getColId=function(){return this.colId;};Column.prototype.getDefinition=function(){return this.colDef;};Column.prototype.getActualWidth=function(){return this.actualWidth;};Column.prototype.setActualWidth=function(actualWidth){this.actualWidth=actualWidth;};Column.prototype.isGreaterThanMax=function(width){if(this.colDef.maxWidth>=constants.MIN_COL_WIDTH){return width>this.colDef.maxWidth;}else {return false;}};Column.prototype.getMinimumWidth=function(){return Math.max(this.colDef.minWidth,constants.MIN_COL_WIDTH);};Column.prototype.setMinimum=function(){this.actualWidth=this.getMinimumWidth();};Column.PINNED_RIGHT='right';Column.PINNED_LEFT='left';Column.AGG_SUM='sum';Column.AGG_MIN='min';Column.AGG_MAX='max';Column.SORT_ASC='asc';Column.SORT_DESC='desc';return Column;}();grid.Column=Column;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={}));var ag;(function(ag){var grid;(function(grid){var LoggerFactory=function(){function LoggerFactory(){}LoggerFactory.prototype.init=function(gridOptionsWrapper){this.logging=gridOptionsWrapper.isDebug();};LoggerFactory.prototype.create=function(name){return new Logger(name,this.logging);};return LoggerFactory;}();grid.LoggerFactory=LoggerFactory;var Logger=function(){function Logger(name,logging){this.name=name;this.logging=logging;}Logger.prototype.log=function(message){if(this.logging){console.log('ag-Grid.'+this.name+': '+message);}};return Logger;}();grid.Logger=Logger;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path="columnController/columnController.ts" />
	/// <reference path="gridOptionsWrapper.ts" />
	/// <reference path="logger.ts" />
	/// <reference path="events.ts" />
	/// <reference path="eventService.ts" />
	var ag;(function(ag){var grid;(function(grid){var MasterSlaveService=function(){function MasterSlaveService(){ // flag to mark if we are consuming. to avoid cyclic events (ie slave firing back to master
	// while processing a master event) we mark this if consuming an event, and if we are, then
	// we don't fire back any events.
	this.consuming=false;}MasterSlaveService.prototype.init=function(gridOptionsWrapper,columnController,gridPanel,loggerFactory,eventService){this.gridOptionsWrapper=gridOptionsWrapper;this.columnController=columnController;this.gridPanel=gridPanel;this.eventService=eventService;this.logger=loggerFactory.create('MasterSlaveService');eventService.addEventListener(grid.Events.EVENT_COLUMN_MOVED,this.fireColumnEvent.bind(this));eventService.addEventListener(grid.Events.EVENT_COLUMN_VISIBLE,this.fireColumnEvent.bind(this));eventService.addEventListener(grid.Events.EVENT_COLUMN_PINNED,this.fireColumnEvent.bind(this));eventService.addEventListener(grid.Events.EVENT_COLUMN_GROUP_OPENED,this.fireColumnEvent.bind(this));eventService.addEventListener(grid.Events.EVENT_COLUMN_RESIZED,this.fireColumnEvent.bind(this));}; // common logic across all the fire methods
	MasterSlaveService.prototype.fireEvent=function(callback){ // if we are already consuming, then we are acting on an event from a master,
	// so we don't cause a cyclic firing of events
	if(this.consuming){return;} // iterate through the slave grids, and pass each slave service to the callback
	var slaveGrids=this.gridOptionsWrapper.getSlaveGrids();if(slaveGrids){slaveGrids.forEach(function(slaveGridOptions){if(slaveGridOptions.api){var slaveService=slaveGridOptions.api.__getMasterSlaveService();callback(slaveService);}});}}; // common logic across all consume methods. very little common logic, however extracting
	// guarantees consistency across the methods.
	MasterSlaveService.prototype.onEvent=function(callback){this.consuming=true;callback();this.consuming=false;};MasterSlaveService.prototype.fireColumnEvent=function(event){this.fireEvent(function(slaveService){slaveService.onColumnEvent(event);});};MasterSlaveService.prototype.fireHorizontalScrollEvent=function(horizontalScroll){this.fireEvent(function(slaveService){slaveService.onScrollEvent(horizontalScroll);});};MasterSlaveService.prototype.onScrollEvent=function(horizontalScroll){var _this=this;this.onEvent(function(){_this.gridPanel.setHorizontalScrollPosition(horizontalScroll);});};MasterSlaveService.prototype.getMasterColumns=function(event){var result=[];if(event.getColumn()){result.push(event.getColumn());}if(event.getColumns()){event.getColumns().forEach(function(column){result.push(column);});}return result;};MasterSlaveService.prototype.getColumnIds=function(event){var result=[];if(event.getColumn()){result.push(event.getColumn().getColId());}if(event.getColumns()){event.getColumns().forEach(function(column){result.push(column.getColId());});}return result;};MasterSlaveService.prototype.onColumnEvent=function(event){var _this=this;this.onEvent(function(){ // the column in the event is from the master grid. need to
	// look up the equivalent from this (slave) grid
	var masterColumn=event.getColumn();var slaveColumn;if(masterColumn){slaveColumn=_this.columnController.getColumn(masterColumn.getColId());} // if event was with respect to a master column, that is not present in this
	// grid, then we ignore the event
	if(masterColumn&&!slaveColumn){return;} // likewise for column group
	var masterColumnGroup=event.getColumnGroup();var slaveColumnGroup;if(masterColumnGroup){var colId=masterColumnGroup.getGroupId();var instanceId=masterColumnGroup.getInstanceId();slaveColumnGroup=_this.columnController.getColumnGroup(colId,instanceId);}if(masterColumnGroup&&!slaveColumnGroup){return;} // in time, all the methods below should use the column ids, it's a more generic way
	// of handling columns, and also allows for single or multi column events
	var columnIds=_this.getColumnIds(event);var masterColumns=_this.getMasterColumns(event);switch(event.getType()){case grid.Events.EVENT_COLUMN_MOVED:_this.logger.log('onColumnEvent-> processing '+event+' fromIndex = '+event.getFromIndex()+', toIndex = '+event.getToIndex());_this.columnController.moveColumn(event.getFromIndex(),event.getToIndex());break;case grid.Events.EVENT_COLUMN_VISIBLE:_this.logger.log('onColumnEvent-> processing '+event+' visible = '+event.isVisible());_this.columnController.setColumnsVisible(columnIds,event.isVisible());break;case grid.Events.EVENT_COLUMN_PINNED:_this.logger.log('onColumnEvent-> processing '+event+' pinned = '+event.getPinned());_this.columnController.setColumnsPinned(columnIds,event.getPinned());break;case grid.Events.EVENT_COLUMN_GROUP_OPENED:_this.logger.log('onColumnEvent-> processing '+event+' expanded = '+masterColumnGroup.isExpanded());_this.columnController.setColumnGroupOpened(slaveColumnGroup,masterColumnGroup.isExpanded());break;case grid.Events.EVENT_COLUMN_RESIZED:masterColumns.forEach(function(masterColumn){_this.logger.log('onColumnEvent-> processing '+event+' actualWidth = '+masterColumn.getActualWidth());_this.columnController.setColumnWidth(masterColumn.getColId(),masterColumn.getActualWidth(),event.isFinished());});break;}});};return MasterSlaveService;}();grid.MasterSlaveService=MasterSlaveService;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={}));var ag;(function(ag){var grid;(function(grid){ // class returns unique instance id's for columns.
	// eg, the following calls (in this order) will result in:
	//
	// getInstanceIdForKey('country') => 0
	// getInstanceIdForKey('country') => 1
	// getInstanceIdForKey('country') => 2
	// getInstanceIdForKey('country') => 3
	// getInstanceIdForKey('age') => 0
	// getInstanceIdForKey('age') => 1
	// getInstanceIdForKey('country') => 4
	var GroupInstanceIdCreator=function(){function GroupInstanceIdCreator(){ // this map contains keys to numbers, so we remember what the last call was
	this.existingIds={};}GroupInstanceIdCreator.prototype.getInstanceIdForKey=function(key){var lastResult=this.existingIds[key];var result;if(typeof lastResult!=='number'){ // first time this key
	result=0;}else {result=lastResult+1;}this.existingIds[key]=result;return result;};return GroupInstanceIdCreator;}();grid.GroupInstanceIdCreator=GroupInstanceIdCreator;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path='../entities/colDef.ts'/>
	/// <reference path='../entities/column.ts'/>
	/// <reference path='../entities/columnGroup.ts'/>
	/// <reference path='../logger.ts'/>
	/// <reference path='groupInstanceIdCreator.ts'/>
	var ag;(function(ag){var grid;(function(grid){ // takes in a list of columns, as specified by the column definitions, and returns column groups
	var DisplayedGroupCreator=function(){function DisplayedGroupCreator(){}DisplayedGroupCreator.prototype.init=function(columnUtils){this.columnUtils=columnUtils;};DisplayedGroupCreator.prototype.createDisplayedGroups=function(sortedVisibleColumns,balancedColumnTree,groupInstanceIdCreator){var _this=this;var result=[];var previousRealPath;var previousOriginalPath; // go through each column, then do a bottom up comparison to the previous column, and start
	// to share groups if they converge at any point.
	sortedVisibleColumns.forEach(function(currentColumn){var currentOriginalPath=_this.getOriginalPathForColumn(balancedColumnTree,currentColumn);var currentRealPath=[];var firstColumn=!previousOriginalPath;for(var i=0;i<currentOriginalPath.length;i++){if(firstColumn||currentOriginalPath[i]!==previousOriginalPath[i]){ // new group needed
	var originalGroup=currentOriginalPath[i];var groupId=originalGroup.getGroupId();var instanceId=groupInstanceIdCreator.getInstanceIdForKey(groupId);var newGroup=new grid.ColumnGroup(originalGroup.getColGroupDef(),groupId,instanceId);currentRealPath[i]=newGroup; // if top level, add to result, otherwise add to parent
	if(i==0){result.push(newGroup);}else {currentRealPath[i-1].addChild(newGroup);}}else { // reuse old group
	currentRealPath[i]=previousRealPath[i];}}var noColumnGroups=currentRealPath.length===0;if(noColumnGroups){ // if we are not grouping, then the result of the above is an empty
	// path (no groups), and we just add the column to the root list.
	result.push(currentColumn);}else {var leafGroup=currentRealPath[currentRealPath.length-1];leafGroup.addChild(currentColumn);}previousRealPath=currentRealPath;previousOriginalPath=currentOriginalPath;});this.columnUtils.deptFirstAllColumnTreeSearch(result,function(child){if(child instanceof grid.ColumnGroup){child.calculateExpandable();}});return result;};DisplayedGroupCreator.prototype.createFakePath=function(balancedColumnTree){var result=[];var currentChildren=balancedColumnTree; // this while look does search on the balanced tree, so our result is the right length
	var index=0;while(currentChildren&&currentChildren[0]&&currentChildren[0] instanceof grid.OriginalColumnGroup){ // putting in a deterministic fake id, in case the API in the future needs to reference the col
	result.push(new grid.OriginalColumnGroup(null,'FAKE_PATH_'+index));currentChildren=currentChildren[0].getChildren();index++;}return result;};DisplayedGroupCreator.prototype.getOriginalPathForColumn=function(balancedColumnTree,column){var result=[];var found=false;recursePath(balancedColumnTree,0); // it's possible we didn't find a path. this happens if the column is generated
	// by the grid, in that the definition didn't come from the client. in this case,
	// we create a fake original path.
	if(found){return result;}else {return this.createFakePath(balancedColumnTree);}function recursePath(balancedColumnTree,dept){for(var i=0;i<balancedColumnTree.length;i++){if(found){ // quit the search, so 'result' is kept with the found result
	return;}var node=balancedColumnTree[i];if(node instanceof grid.OriginalColumnGroup){var nextNode=node;recursePath(nextNode.getChildren(),dept+1);result[dept]=node;}else {if(node===column){found=true;}}}}};return DisplayedGroupCreator;}();grid.DisplayedGroupCreator=DisplayedGroupCreator;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path="./originalColumnGroupChild.ts"/>
	var ag;(function(ag){var grid;(function(grid){var OriginalColumnGroup=function(){function OriginalColumnGroup(colGroupDef,groupId){this.colGroupDef=colGroupDef;this.groupId=groupId;}OriginalColumnGroup.prototype.getGroupId=function(){return this.groupId;};OriginalColumnGroup.prototype.setChildren=function(children){this.children=children;};OriginalColumnGroup.prototype.getChildren=function(){return this.children;};OriginalColumnGroup.prototype.getColGroupDef=function(){return this.colGroupDef;};return OriginalColumnGroup;}();grid.OriginalColumnGroup=OriginalColumnGroup;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={}));var ag;(function(ag){var grid;(function(grid){ // class returns a unique id to use for the column. it checks the existing columns, and if the requested
	// id is already taken, it will start appending numbers until it gets a unique id.
	// eg, if the col field is 'name', it will try ids: {name, name_1, name_2...}
	// if no field or id provided in the col, it will try the ids of natural numbers
	var ColumnKeyCreator=function(){function ColumnKeyCreator(){this.existingKeys=[];}ColumnKeyCreator.prototype.getUniqueKey=function(colId,colField){var count=0;while(true){var idToTry;if(colId){idToTry=colId;if(count!==0){idToTry+='_'+count;}}else if(colField){idToTry=colField;if(count!==0){idToTry+='_'+count;}}else {idToTry=''+count;}if(this.existingKeys.indexOf(idToTry)<0){this.existingKeys.push(idToTry);return idToTry;}count++;}};return ColumnKeyCreator;}();grid.ColumnKeyCreator=ColumnKeyCreator;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path='../entities/colDef.ts'/>
	/// <reference path='../entities/column.ts'/>
	/// <reference path='../entities/originalColumnGroup.ts'/>
	/// <reference path='../logger.ts'/>
	/// <reference path='columnKeyCreator.ts'/>
	var ag;(function(ag){var grid;(function(grid){ // takes in a list of columns, as specified by the column definitions, and returns column groups
	var BalancedColumnTreeBuilder=function(){function BalancedColumnTreeBuilder(){}BalancedColumnTreeBuilder.prototype.init=function(gridOptionsWrapper,loggerFactory,columnUtils){this.gridOptionsWrapper=gridOptionsWrapper;this.columnUtils=columnUtils;this.logger=loggerFactory.create('BalancedColumnTreeBuilder');};BalancedColumnTreeBuilder.prototype.createBalancedColumnGroups=function(abstractColDefs){ // column key creator dishes out unique column id's in a deterministic way,
	// so if we have two grids (that cold be master/slave) with same column definitions,
	// then this ensures the two grids use identical id's.
	var columnKeyCreator=new grid.ColumnKeyCreator(); // create am unbalanced tree that maps the provided definitions
	var unbalancedTree=this.recursivelyCreateColumns(abstractColDefs,0,columnKeyCreator);var treeDept=this.findMaxDept(unbalancedTree,0);this.logger.log('Number of levels for grouped columns is '+treeDept);var balancedTree=this.balanceColumnTree(unbalancedTree,0,treeDept,columnKeyCreator);return {balancedTree:balancedTree,treeDept:treeDept};};BalancedColumnTreeBuilder.prototype.balanceColumnTree=function(unbalancedTree,currentDept,columnDept,columnKeyCreator){var _this=this;var result=[]; // go through each child, for groups, recurse a level deeper,
	// for columns we need to pad
	unbalancedTree.forEach(function(child){if(child instanceof grid.OriginalColumnGroup){var originalGroup=child;var newChildren=_this.balanceColumnTree(originalGroup.getChildren(),currentDept+1,columnDept,columnKeyCreator);originalGroup.setChildren(newChildren);result.push(originalGroup);}else {var newChild=child;for(var i=columnDept-1;i>=currentDept;i--){var newColId=columnKeyCreator.getUniqueKey(null,null);var paddedGroup=new grid.OriginalColumnGroup(null,newColId);paddedGroup.setChildren([newChild]);newChild=paddedGroup;}result.push(newChild);}});return result;};BalancedColumnTreeBuilder.prototype.findMaxDept=function(treeChildren,dept){var maxDeptThisLevel=dept;for(var i=0;i<treeChildren.length;i++){var abstractColumn=treeChildren[i];if(abstractColumn instanceof grid.OriginalColumnGroup){var originalGroup=abstractColumn;var newDept=this.findMaxDept(originalGroup.getChildren(),dept+1);if(maxDeptThisLevel<newDept){maxDeptThisLevel=newDept;}}}return maxDeptThisLevel;};BalancedColumnTreeBuilder.prototype.recursivelyCreateColumns=function(abstractColDefs,level,columnKeyCreator){var _this=this;var result=[];if(!abstractColDefs){return result;}abstractColDefs.forEach(function(abstractColDef){_this.checkForDeprecatedItems(abstractColDef);if(_this.isColumnGroup(abstractColDef)){var groupColDef=abstractColDef;var groupId=columnKeyCreator.getUniqueKey(groupColDef.groupId,null);var originalGroup=new grid.OriginalColumnGroup(groupColDef,groupId);var children=_this.recursivelyCreateColumns(groupColDef.children,level+1,columnKeyCreator);originalGroup.setChildren(children);result.push(originalGroup);}else {var colDef=abstractColDef;var width=_this.columnUtils.calculateColInitialWidth(colDef);var colId=columnKeyCreator.getUniqueKey(colDef.colId,colDef.field);var column=new grid.Column(colDef,width,colId);result.push(column);}});return result;};BalancedColumnTreeBuilder.prototype.checkForDeprecatedItems=function(colDef){if(colDef){var colDefNoType=colDef; // take out the type, so we can access attributes not defined in the type
	if(colDefNoType.group!==undefined){console.warn('ag-grid: colDef.group is invalid, please check documentation on how to do grouping as it changed in version 3');}if(colDefNoType.headerGroup!==undefined){console.warn('ag-grid: colDef.headerGroup is invalid, please check documentation on how to do grouping as it changed in version 3');}if(colDefNoType.headerGroupShow!==undefined){console.warn('ag-grid: colDef.headerGroupShow is invalid, should be columnGroupShow, please check documentation on how to do grouping as it changed in version 3');}}}; // if object has children, we assume it's a group
	BalancedColumnTreeBuilder.prototype.isColumnGroup=function(abstractColDef){return abstractColDef.children!==undefined;};return BalancedColumnTreeBuilder;}();grid.BalancedColumnTreeBuilder=BalancedColumnTreeBuilder;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={}));var ag;(function(ag){var grid;(function(grid){var AutoWidthCalculator=function(){function AutoWidthCalculator(){}AutoWidthCalculator.prototype.init=function(rowRenderer,gridPanel){this.gridPanel=gridPanel;this.rowRenderer=rowRenderer;}; // this is the trick: we create a dummy container and clone all the cells
	// into the dummy, then check the dummy's width. then destroy the dummy
	// as we don't need it any more.
	// drawback: only the cells visible on the screen are considered
	AutoWidthCalculator.prototype.getPreferredWidthForColumn=function(column){var eDummyContainer=document.createElement('span'); // position fixed, so it isn't restricted to the boundaries of the parent
	eDummyContainer.style.position='fixed';eDummyContainer.style.backgroundColor='red'; // we put the dummy into the body container, so it will inherit all the
	// css styles that the real cells are inheriting
	var eBodyContainer=this.gridPanel.getBodyContainer();eBodyContainer.appendChild(eDummyContainer); // get all the cells that are currently displayed (this only brings back
	// rendered cells, rows not rendered due to row visualisation will not be here)
	var eOriginalCells=this.rowRenderer.getAllCellsForColumn(column);eOriginalCells.forEach(function(eCell,index){ // make a deep clone of the cell
	var eCellClone=eCell.cloneNode(true); // the original has a fixed width, we remove this to allow the natural width based on content
	eCellClone.style.width=''; // we put the cell into a containing div, as otherwise the cells would just line up
	// on the same line, standard flow layout, by putting them into divs, they are laid
	// out one per line
	var eCloneParent=document.createElement('div'); // table-row, so that each cell is on a row. i also tried display='block', but this
	// didn't work in IE
	eCloneParent.style.display='table-row'; // the twig on the branch, the branch on the tree, the tree in the hole,
	// the hole in the bog, the bog in the clone, the clone in the parent,
	// the parent in the dummy, and the dummy down in the vall-e-ooo, OOOOOOOOO! Oh row the rattling bog....
	eCloneParent.appendChild(eCellClone);eDummyContainer.appendChild(eCloneParent);}); // at this point, all the clones are lined up vertically with natural widths. the dummy
	// container will have a width wide enough just to fit the largest.
	var dummyContainerWidth=eDummyContainer.offsetWidth; // we are finished with the dummy container, so get rid of it
	eBodyContainer.removeChild(eDummyContainer); // we add 4 as I found without it, the gui still put '...' after some of the texts
	return dummyContainerWidth+4;};return AutoWidthCalculator;}();grid.AutoWidthCalculator=AutoWidthCalculator;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path="../utils.ts" />
	/// <reference path="../constants.ts" />
	/// <reference path="../entities/column.ts" />
	/// <reference path="../entities/columnGroup.ts" />
	/// <reference path="../columnChangeEvent.ts" />
	/// <reference path="../masterSlaveService.ts" />
	/// <reference path="./displayedGroupCreator.ts" />
	/// <reference path="./balancedColumnTreeBuilder.ts" />
	/// <reference path="../rendering/autoWidthCalculator.ts" />
	var ag;(function(ag){var grid;(function(grid){var _=grid.Utils;var constants=grid.Constants;var ColumnApi=function(){function ColumnApi(_columnController){this._columnController=_columnController;}ColumnApi.prototype.sizeColumnsToFit=function(gridWidth){this._columnController.sizeColumnsToFit(gridWidth);};ColumnApi.prototype.setColumnGroupOpened=function(group,newValue,instanceId){this._columnController.setColumnGroupOpened(group,newValue,instanceId);};ColumnApi.prototype.getColumnGroup=function(name,instanceId){return this._columnController.getColumnGroup(name,instanceId);};ColumnApi.prototype.getDisplayNameForCol=function(column){return this._columnController.getDisplayNameForCol(column);};ColumnApi.prototype.getColumn=function(key){return this._columnController.getColumn(key);};ColumnApi.prototype.setState=function(columnState){return this._columnController.setState(columnState);};ColumnApi.prototype.getState=function(){return this._columnController.getState();};ColumnApi.prototype.resetState=function(){this._columnController.resetState();};ColumnApi.prototype.isPinning=function(){return this._columnController.isPinningLeft()||this._columnController.isPinningRight();};ColumnApi.prototype.isPinningLeft=function(){return this._columnController.isPinningLeft();};ColumnApi.prototype.isPinningRight=function(){return this._columnController.isPinningRight();};ColumnApi.prototype.getDisplayedColAfter=function(col){return this._columnController.getDisplayedColAfter(col);};ColumnApi.prototype.getDisplayedColBefore=function(col){return this._columnController.getDisplayedColBefore(col);};ColumnApi.prototype.setColumnVisible=function(key,visible){this._columnController.setColumnVisible(key,visible);};ColumnApi.prototype.setColumnsVisible=function(keys,visible){this._columnController.setColumnsVisible(keys,visible);};ColumnApi.prototype.setColumnPinned=function(key,pinned){this._columnController.setColumnPinned(key,pinned);};ColumnApi.prototype.setColumnsPinned=function(keys,pinned){this._columnController.setColumnsPinned(keys,pinned);};ColumnApi.prototype.getAllColumns=function(){return this._columnController.getAllColumns();};ColumnApi.prototype.getDisplayedLeftColumns=function(){return this._columnController.getDisplayedLeftColumns();};ColumnApi.prototype.getDisplayedCenterColumns=function(){return this._columnController.getDisplayedCenterColumns();};ColumnApi.prototype.getDisplayedRightColumns=function(){return this._columnController.getDisplayedRightColumns();};ColumnApi.prototype.getRowGroupColumns=function(){return this._columnController.getRowGroupColumns();};ColumnApi.prototype.getValueColumns=function(){return this._columnController.getValueColumns();};ColumnApi.prototype.moveColumn=function(fromIndex,toIndex){this._columnController.moveColumn(fromIndex,toIndex);};ColumnApi.prototype.moveRowGroupColumn=function(fromIndex,toIndex){this._columnController.moveRowGroupColumn(fromIndex,toIndex);};ColumnApi.prototype.setColumnAggFunction=function(column,aggFunc){this._columnController.setColumnAggFunction(column,aggFunc);};ColumnApi.prototype.setColumnWidth=function(key,newWidth,finished){if(finished===void 0){finished=true;}this._columnController.setColumnWidth(key,newWidth,finished);};ColumnApi.prototype.removeValueColumn=function(column){this._columnController.removeValueColumn(column);};ColumnApi.prototype.addValueColumn=function(column){this._columnController.addValueColumn(column);};ColumnApi.prototype.removeRowGroupColumn=function(column){this._columnController.removeRowGroupColumn(column);};ColumnApi.prototype.addRowGroupColumn=function(column){this._columnController.addRowGroupColumn(column);};ColumnApi.prototype.getLeftDisplayedColumnGroups=function(){return this._columnController.getLeftDisplayedColumnGroups();};ColumnApi.prototype.getCenterDisplayedColumnGroups=function(){return this._columnController.getCenterDisplayedColumnGroups();};ColumnApi.prototype.getRightDisplayedColumnGroups=function(){return this._columnController.getRightDisplayedColumnGroups();};ColumnApi.prototype.getAllDisplayedColumnGroups=function(){return this._columnController.getAllDisplayedColumnGroups();};ColumnApi.prototype.autoSizeColumn=function(key){return this._columnController.autoSizeColumn(key);};ColumnApi.prototype.autoSizeColumns=function(keys){return this._columnController.autoSizeColumns(keys);};ColumnApi.prototype.columnGroupOpened=function(group,newValue){console.error('ag-Grid: columnGroupOpened no longer exists, use setColumnGroupOpened');this.setColumnGroupOpened(group,newValue);};ColumnApi.prototype.hideColumns=function(colIds,hide){console.error('ag-Grid: hideColumns is deprecated, use setColumnsVisible');this._columnController.setColumnsVisible(colIds,!hide);};ColumnApi.prototype.hideColumn=function(colId,hide){console.error('ag-Grid: hideColumn is deprecated, use setColumnVisible');this._columnController.setColumnVisible(colId,!hide);};return ColumnApi;}();grid.ColumnApi=ColumnApi;var ColumnController=function(){function ColumnController(){this.headerRowCount=0;this.setupComplete=false;}ColumnController.prototype.init=function(angularGrid,selectionRendererFactory,gridOptionsWrapper,expressionService,valueService,masterSlaveController,eventService,balancedColumnTreeBuilder,displayedGroupCreator,columnUtils,autoWidthCalculator,loggerFactory){this.gridOptionsWrapper=gridOptionsWrapper;this.angularGrid=angularGrid;this.selectionRendererFactory=selectionRendererFactory;this.expressionService=expressionService;this.valueService=valueService;this.masterSlaveController=masterSlaveController;this.eventService=eventService;this.balancedColumnTreeBuilder=balancedColumnTreeBuilder;this.displayedGroupCreator=displayedGroupCreator;this.columnUtils=columnUtils;this.autoWidthCalculator=autoWidthCalculator;this.logger=loggerFactory.create('ColumnController');};ColumnController.prototype.autoSizeColumns=function(keys){var _this=this;this.actionOnColumns(keys,function(column){var requiredWidth=_this.autoWidthCalculator.getPreferredWidthForColumn(column);if(requiredWidth>0){var newWidth=_this.normaliseColumnWidth(column,requiredWidth);column.setActualWidth(newWidth);}},function(){return new grid.ColumnChangeEvent(grid.Events.EVENT_COLUMN_RESIZED).withFinished(true);});};ColumnController.prototype.autoSizeColumn=function(key){this.autoSizeColumns([key]);};ColumnController.prototype.getColumnsFromTree=function(rootColumns){var result=[];recursiveFindColumns(rootColumns);return result;function recursiveFindColumns(childColumns){for(var i=0;i<childColumns.length;i++){var child=childColumns[i];if(child instanceof grid.Column){result.push(child);}else if(child instanceof grid.OriginalColumnGroup){recursiveFindColumns(child.getChildren());}}}};ColumnController.prototype.getAllDisplayedColumnGroups=function(){if(this.displayedLeftColumnTree&&this.displayedRightColumnTree&&this.displayedCentreColumnTree){return this.displayedLeftColumnTree.concat(this.displayedCentreColumnTree).concat(this.displayedRightColumnTree);}else {return null;}};ColumnController.prototype.getColumnApi=function(){return new ColumnApi(this);};ColumnController.prototype.isSetupComplete=function(){return this.setupComplete;}; // + gridPanel -> for resizing the body and setting top margin
	ColumnController.prototype.getHeaderRowCount=function(){return this.headerRowCount;}; // + headerRenderer -> setting pinned body width
	ColumnController.prototype.getLeftDisplayedColumnGroups=function(){return this.displayedLeftColumnTree;}; // + headerRenderer -> setting pinned body width
	ColumnController.prototype.getRightDisplayedColumnGroups=function(){return this.displayedRightColumnTree;}; // + headerRenderer -> setting pinned body width
	ColumnController.prototype.getCenterDisplayedColumnGroups=function(){return this.displayedCentreColumnTree;}; // + csvCreator
	ColumnController.prototype.getAllDisplayedColumns=function(){ // order we add the arrays together is important, so the result
	// has the columns left to right, as they appear on the screen.
	return this.displayedLeftColumns.concat(this.displayedCenterColumns).concat(this.displayedRightColumns);}; // used by:
	// + angularGrid -> setting pinned body width
	ColumnController.prototype.getPinnedLeftContainerWidth=function(){return this.getWithOfColsInList(this.displayedLeftColumns);};ColumnController.prototype.getPinnedRightContainerWidth=function(){return this.getWithOfColsInList(this.displayedRightColumns);};ColumnController.prototype.addRowGroupColumn=function(column){if(this.allColumns.indexOf(column)<0){console.warn('not a valid column: '+column);return;}if(this.rowGroupColumns.indexOf(column)>=0){console.warn('column is already a value column');return;}this.rowGroupColumns.push(column); // because we could be taking out columns, the displayed
	// columns may differ, so need to work out all the columns again
	this.updateModel();var event=new grid.ColumnChangeEvent(grid.Events.EVENT_COLUMN_ROW_GROUP_CHANGE);this.eventService.dispatchEvent(grid.Events.EVENT_COLUMN_ROW_GROUP_CHANGE,event);};ColumnController.prototype.removeRowGroupColumn=function(column){if(this.rowGroupColumns.indexOf(column)<0){console.warn('column not a row group');return;}_.removeFromArray(this.rowGroupColumns,column);this.updateModel();var event=new grid.ColumnChangeEvent(grid.Events.EVENT_COLUMN_ROW_GROUP_CHANGE);this.eventService.dispatchEvent(grid.Events.EVENT_COLUMN_ROW_GROUP_CHANGE,event);};ColumnController.prototype.addValueColumn=function(column){if(this.allColumns.indexOf(column)<0){console.warn('not a valid column: '+column);return;}if(this.valueColumns.indexOf(column)>=0){console.warn('column is already a value column');return;}if(!column.getAggFunc()){column.setAggFunc(grid.Column.AGG_SUM);}this.valueColumns.push(column);var event=new grid.ColumnChangeEvent(grid.Events.EVENT_COLUMN_VALUE_CHANGE);this.eventService.dispatchEvent(grid.Events.EVENT_COLUMN_VALUE_CHANGE,event);};ColumnController.prototype.removeValueColumn=function(column){if(this.valueColumns.indexOf(column)<0){console.warn('column not a value');return;}_.removeFromArray(this.valueColumns,column);var event=new grid.ColumnChangeEvent(grid.Events.EVENT_COLUMN_VALUE_CHANGE);this.eventService.dispatchEvent(grid.Events.EVENT_COLUMN_VALUE_CHANGE,event);};ColumnController.prototype.doesColumnExistInGrid=function(column){var columnInAllColumns=this.allColumns.indexOf(column)>=0;var columnIsGroupAutoColumn=column===this.groupAutoColumn;return columnInAllColumns||columnIsGroupAutoColumn;};ColumnController.prototype.getFirstRightPinnedColIndex=function(){return this.displayedLeftColumns.length+this.displayedCenterColumns.length;}; // returns the widht we can set to this col, taking into consideration min and max widths
	ColumnController.prototype.normaliseColumnWidth=function(column,newWidth){if(newWidth<column.getMinimumWidth()){newWidth=column.getMinimumWidth();}if(column.isGreaterThanMax(newWidth)){newWidth=column.getColDef().maxWidth;}return newWidth;};ColumnController.prototype.setColumnWidth=function(key,newWidth,finished){var column=this.getColumn(key);if(!column){return;}newWidth=this.normaliseColumnWidth(column,newWidth); // check for change first, to avoid unnecessary firing of events
	// however we always fire 'finished' events. this is important
	// when groups are resized, as if the group is changing slowly,
	// eg 1 pixel at a time, then each change will fire change events
	// in all the columns in the group, but only one with get the pixel.
	if(finished||column.getActualWidth()!==newWidth){column.setActualWidth(newWidth);var event=new grid.ColumnChangeEvent(grid.Events.EVENT_COLUMN_RESIZED).withColumn(column).withFinished(finished);this.eventService.dispatchEvent(grid.Events.EVENT_COLUMN_RESIZED,event);}};ColumnController.prototype.setColumnAggFunction=function(column,aggFunc){column.setAggFunc(aggFunc);var event=new grid.ColumnChangeEvent(grid.Events.EVENT_COLUMN_VALUE_CHANGE);this.eventService.dispatchEvent(grid.Events.EVENT_COLUMN_VALUE_CHANGE,event);};ColumnController.prototype.moveRowGroupColumn=function(fromIndex,toIndex){var column=this.rowGroupColumns[fromIndex];this.rowGroupColumns.splice(fromIndex,1);this.rowGroupColumns.splice(toIndex,0,column);var event=new grid.ColumnChangeEvent(grid.Events.EVENT_COLUMN_ROW_GROUP_CHANGE);this.eventService.dispatchEvent(grid.Events.EVENT_COLUMN_ROW_GROUP_CHANGE,event);};ColumnController.prototype.moveColumn=function(fromIndex,toIndex){var column=this.allColumns[fromIndex];this.allColumns.splice(fromIndex,1);this.allColumns.splice(toIndex,0,column);this.updateModel();var event=new grid.ColumnChangeEvent(grid.Events.EVENT_COLUMN_MOVED).withFromIndex(fromIndex).withToIndex(toIndex);this.eventService.dispatchEvent(grid.Events.EVENT_COLUMN_MOVED,event);}; // used by:
	// + angularGrid -> for setting body width
	// + rowController -> setting main row widths (when inserting and resizing)
	ColumnController.prototype.getBodyContainerWidth=function(){var result=this.getWithOfColsInList(this.displayedCenterColumns);return result;}; // + rowController
	ColumnController.prototype.getValueColumns=function(){return this.valueColumns;}; // + toolPanel
	ColumnController.prototype.getRowGroupColumns=function(){return this.rowGroupColumns;}; // + rowController -> while inserting rows
	ColumnController.prototype.getDisplayedCenterColumns=function(){return this.displayedCenterColumns;}; // + rowController -> while inserting rows
	ColumnController.prototype.getDisplayedLeftColumns=function(){return this.displayedLeftColumns;};ColumnController.prototype.getDisplayedRightColumns=function(){return this.displayedRightColumns;}; // used by:
	// + inMemoryRowController -> sorting, building quick filter text
	// + headerRenderer -> sorting (clearing icon)
	ColumnController.prototype.getAllColumns=function(){return this.allColumns;};ColumnController.prototype.setColumnVisible=function(key,visible){this.setColumnsVisible([key],visible);};ColumnController.prototype.setColumnsVisible=function(keys,visible){this.actionOnColumns(keys,function(column){column.setVisible(visible);},function(){return new grid.ColumnChangeEvent(grid.Events.EVENT_COLUMN_VISIBLE).withVisible(visible);});};ColumnController.prototype.setColumnPinned=function(key,pinned){this.setColumnsPinned([key],pinned);};ColumnController.prototype.setColumnsPinned=function(keys,pinned){var actualPinned;if(pinned===true||pinned===grid.Column.PINNED_LEFT){actualPinned=grid.Column.PINNED_LEFT;}else if(pinned===grid.Column.PINNED_RIGHT){actualPinned=grid.Column.PINNED_RIGHT;}else {actualPinned=null;}this.actionOnColumns(keys,function(column){column.setPinned(actualPinned);},function(){return new grid.ColumnChangeEvent(grid.Events.EVENT_COLUMN_PINNED).withPinned(actualPinned);});}; // does an action on a set of columns. provides common functionality for looking up the
	// columns based on key, getting a list of effected columns, and then updated the event
	// with either one column (if it was just one col) or a list of columns
	ColumnController.prototype.actionOnColumns=function(keys,action,createEvent){var _this=this;if(!keys||keys.length===0){return;}var updatedColumns=[];keys.forEach(function(key){var column=_this.getColumn(key);if(!column){return;}action(column);updatedColumns.push(column);});if(updatedColumns.length===0){return;}this.updateModel();var event=createEvent();event.withColumns(updatedColumns);if(updatedColumns.length===1){event.withColumn(updatedColumns[0]);}this.eventService.dispatchEvent(event.getType(),event);};ColumnController.prototype.getDisplayedColBefore=function(col){var allDisplayedColumns=this.getAllDisplayedColumns();var oldIndex=allDisplayedColumns.indexOf(col);if(oldIndex>0){return allDisplayedColumns[oldIndex-1];}else {return null;}}; // used by:
	// + rowRenderer -> for navigation
	ColumnController.prototype.getDisplayedColAfter=function(col){var allDisplayedColumns=this.getAllDisplayedColumns();var oldIndex=allDisplayedColumns.indexOf(col);if(oldIndex<allDisplayedColumns.length-1){return allDisplayedColumns[oldIndex+1];}else {return null;}};ColumnController.prototype.isPinningLeft=function(){return this.displayedLeftColumns.length>0;};ColumnController.prototype.isPinningRight=function(){return this.displayedRightColumns.length>0;};ColumnController.prototype.getState=function(){if(!this.allColumns||this.allColumns.length<0){return [];}var result=[];for(var i=0;i<this.allColumns.length;i++){var column=this.allColumns[i];var rowGroupIndex=this.rowGroupColumns.indexOf(column);var resultItem={colId:column.getColId(),hide:!column.isVisible(),aggFunc:column.getAggFunc()?column.getAggFunc():null,width:column.getActualWidth(),pinned:column.getPinned(),rowGroupIndex:rowGroupIndex>=0?rowGroupIndex:null};result.push(resultItem);}return result;};ColumnController.prototype.resetState=function(){ // we can't use 'allColumns' as the order might of messed up, so get the original ordered list
	var originalColumns=this.allColumns=this.getColumnsFromTree(this.originalBalancedTree);var state=[];if(originalColumns){originalColumns.forEach(function(column){state.push({colId:column.getColId(),aggFunc:column.getColDef().aggFunc,hide:column.getColDef().hide,pinned:column.getColDef().pinned,rowGroupIndex:column.getColDef().rowGroupIndex,width:column.getColDef().width});});}this.setState(state);};ColumnController.prototype.setState=function(columnState){var _this=this;var oldColumnList=this.allColumns;this.allColumns=[];this.rowGroupColumns=[];this.valueColumns=[];if(columnState){columnState.forEach(function(stateItem){var oldColumn=_.find(oldColumnList,'colId',stateItem.colId);if(!oldColumn){console.warn('ag-grid: column '+stateItem.colId+' not found');return;} // following ensures we are left with boolean true or false, eg converts (null, undefined, 0) all to true
	oldColumn.setVisible(!stateItem.hide); // sets pinned to 'left' or 'right'
	oldColumn.setPinned(stateItem.pinned); // if width provided and valid, use it, otherwise stick with the old width
	if(stateItem.width>=constants.MIN_COL_WIDTH){oldColumn.setActualWidth(stateItem.width);} // accept agg func only if valid
	var aggFuncValid=[grid.Column.AGG_MIN,grid.Column.AGG_MAX,grid.Column.AGG_SUM].indexOf(stateItem.aggFunc)>=0;if(aggFuncValid){oldColumn.setAggFunc(stateItem.aggFunc);_this.valueColumns.push(oldColumn);}else {oldColumn.setAggFunc(null);} // if rowGroup
	if(typeof stateItem.rowGroupIndex==='number'&&stateItem.rowGroupIndex>=0){_this.rowGroupColumns.push(oldColumn);}_this.allColumns.push(oldColumn);oldColumnList.splice(oldColumnList.indexOf(oldColumn),1);});} // anything left over, we got no data for, so add in the column as non-value, non-rowGroup and hidden
	oldColumnList.forEach(function(oldColumn){oldColumn.setVisible(false);oldColumn.setAggFunc(null);oldColumn.setPinned(null);_this.allColumns.push(oldColumn);}); // sort the row group columns
	this.rowGroupColumns.sort(function(colA,colB){var rowGroupIndexA=-1;var rowGroupIndexB=-1;for(var i=0;i<columnState.length;i++){var state=columnState[i];if(state.colId===colA.getColId()){rowGroupIndexA=state.rowGroupIndex;}if(state.colId===colB.getColId()){rowGroupIndexB=state.rowGroupIndex;}}return rowGroupIndexA-rowGroupIndexB;});this.updateModel();var event=new grid.ColumnChangeEvent(grid.Events.EVENT_COLUMN_EVERYTHING_CHANGED);this.eventService.dispatchEvent(grid.Events.EVENT_COLUMN_EVERYTHING_CHANGED,event);};ColumnController.prototype.getColumns=function(keys){var _this=this;var foundColumns=[];if(keys){keys.forEach(function(key){var column=_this.getColumn(key);if(column){foundColumns.push(column);}});}return foundColumns;};ColumnController.prototype.getColumn=function(key){if(!key){return null;}for(var i=0;i<this.allColumns.length;i++){if(colMatches(this.allColumns[i])){return this.allColumns[i];}}if(this.groupAutoColumn&&colMatches(this.groupAutoColumn)){return this.groupAutoColumn;}function colMatches(column){var columnMatches=column===key;var colDefMatches=column.getColDef()===key;var idMatches=column.getColId()===key;return columnMatches||colDefMatches||idMatches;}console.log('could not find column for key '+key);return null;};ColumnController.prototype.getDisplayNameForCol=function(column){var colDef=column.colDef;var headerValueGetter=colDef.headerValueGetter;if(headerValueGetter){var params={colDef:colDef,api:this.gridOptionsWrapper.getApi(),context:this.gridOptionsWrapper.getContext()};if(typeof headerValueGetter==='function'){ // valueGetter is a function, so just call it
	return headerValueGetter(params);}else if(typeof headerValueGetter==='string'){ // valueGetter is an expression, so execute the expression
	return this.expressionService.evaluate(headerValueGetter,params);}else {console.warn('ag-grid: headerValueGetter must be a function or a string');}}else if(colDef.displayName){console.warn("ag-grid: Found displayName "+colDef.displayName+", please use headerName instead, displayName is deprecated.");return colDef.displayName;}else {return colDef.headerName;}}; // returns the group with matching colId and instanceId. If instanceId is missing,
	// matches only on the colId.
	ColumnController.prototype.getColumnGroup=function(colId,instanceId){if(!colId){return null;}if(colId instanceof grid.ColumnGroup){return colId;}var allColumnGroups=this.getAllDisplayedColumnGroups();var checkInstanceId=typeof instanceId==='number';var result=null;this.columnUtils.deptFirstAllColumnTreeSearch(allColumnGroups,function(child){if(child instanceof grid.ColumnGroup){var columnGroup=child;var matched;if(checkInstanceId){matched=colId===columnGroup.getGroupId()&&instanceId===columnGroup.getInstanceId();}else {matched=colId===columnGroup.getGroupId();}if(matched){result=columnGroup;}}});return result;}; // called by angularGrid
	ColumnController.prototype.onColumnsChanged=function(){var columnDefs=this.gridOptionsWrapper.getColumnDefs();var balancedTreeResult=this.balancedColumnTreeBuilder.createBalancedColumnGroups(columnDefs);this.originalBalancedTree=balancedTreeResult.balancedTree;this.headerRowCount=balancedTreeResult.treeDept+1;this.allColumns=this.getColumnsFromTree(this.originalBalancedTree);this.extractRowGroupColumns();this.createValueColumns();this.updateModel();var event=new grid.ColumnChangeEvent(grid.Events.EVENT_COLUMN_EVERYTHING_CHANGED);this.eventService.dispatchEvent(grid.Events.EVENT_COLUMN_EVERYTHING_CHANGED,event);this.setupComplete=true;};ColumnController.prototype.extractRowGroupColumns=function(){var _this=this;this.rowGroupColumns=[]; // pull out the columns
	this.allColumns.forEach(function(column){if(typeof column.getColDef().rowGroupIndex==='number'){_this.rowGroupColumns.push(column);}}); // then sort them
	this.rowGroupColumns.sort(function(colA,colB){return colA.getColDef().rowGroupIndex-colB.getColDef().rowGroupIndex;});}; // called by headerRenderer - when a header is opened or closed
	ColumnController.prototype.setColumnGroupOpened=function(passedGroup,newValue,instanceId){var groupToUse=this.getColumnGroup(passedGroup,instanceId);if(!groupToUse){return;}this.logger.log('columnGroupOpened('+groupToUse.getGroupId()+','+newValue+')');groupToUse.setExpanded(newValue);this.updateGroupsAndDisplayedColumns();var event=new grid.ColumnChangeEvent(grid.Events.EVENT_COLUMN_GROUP_OPENED).withColumnGroup(groupToUse);this.eventService.dispatchEvent(grid.Events.EVENT_COLUMN_GROUP_OPENED,event);};ColumnController.prototype.updateModel=function(){ // following 3 methods are only called from here
	this.createGroupAutoColumn();var visibleColumns=this.updateVisibleColumns(); // only called from here
	this.buildAllGroups(visibleColumns); // this is also called when a group is opened or closed
	this.updateGroupsAndDisplayedColumns();};ColumnController.prototype.updateGroupsAndDisplayedColumns=function(){this.updateGroups();this.updateDisplayedColumnsFromGroups();};ColumnController.prototype.updateDisplayedColumnsFromGroups=function(){var _this=this; // if grouping, then only show col as per group rules
	this.displayedLeftColumns=[];this.displayedRightColumns=[];this.displayedCenterColumns=[];this.columnUtils.deptFirstDisplayedColumnTreeSearch(this.displayedLeftColumnTree,function(child){if(child instanceof grid.Column){_this.displayedLeftColumns.push(child);}});this.columnUtils.deptFirstDisplayedColumnTreeSearch(this.displayedRightColumnTree,function(child){if(child instanceof grid.Column){_this.displayedRightColumns.push(child);}});this.columnUtils.deptFirstDisplayedColumnTreeSearch(this.displayedCentreColumnTree,function(child){if(child instanceof grid.Column){_this.displayedCenterColumns.push(child);}});}; // called from api
	ColumnController.prototype.sizeColumnsToFit=function(gridWidth){var _this=this; // avoid divide by zero
	var allDisplayedColumns=this.getAllDisplayedColumns();if(gridWidth<=0||allDisplayedColumns.length===0){return;}var colsToNotSpread=_.filter(allDisplayedColumns,function(column){return column.getColDef().suppressSizeToFit===true;});var colsToSpread=_.filter(allDisplayedColumns,function(column){return column.getColDef().suppressSizeToFit!==true;}); // make a copy of the cols that are going to be resized
	var colsToFireEventFor=colsToSpread.slice(0);var finishedResizing=false;while(!finishedResizing){finishedResizing=true;var availablePixels=gridWidth-getTotalWidth(colsToNotSpread);if(availablePixels<=0){ // no width, set everything to minimum
	colsToSpread.forEach(function(column){column.setMinimum();});}else {var scale=availablePixels/getTotalWidth(colsToSpread); // we set the pixels for the last col based on what's left, as otherwise
	// we could be a pixel or two short or extra because of rounding errors.
	var pixelsForLastCol=availablePixels; // backwards through loop, as we are removing items as we go
	for(var i=colsToSpread.length-1;i>=0;i--){var column=colsToSpread[i];var newWidth=Math.round(column.getActualWidth()*scale);if(newWidth<column.getMinimumWidth()){column.setMinimum();moveToNotSpread(column);finishedResizing=false;}else if(column.isGreaterThanMax(newWidth)){column.setActualWidth(column.getColDef().maxWidth);moveToNotSpread(column);finishedResizing=false;}else {var onLastCol=i===0;if(onLastCol){column.setActualWidth(pixelsForLastCol);}else {pixelsForLastCol-=newWidth;column.setActualWidth(newWidth);}}}}} // widths set, refresh the gui
	colsToFireEventFor.forEach(function(column){var event=new grid.ColumnChangeEvent(grid.Events.EVENT_COLUMN_RESIZED).withColumn(column);_this.eventService.dispatchEvent(grid.Events.EVENT_COLUMN_RESIZED,event);});function moveToNotSpread(column){_.removeFromArray(colsToSpread,column);colsToNotSpread.push(column);}function getTotalWidth(columns){var result=0;for(var i=0;i<columns.length;i++){result+=columns[i].getActualWidth();}return result;}};ColumnController.prototype.buildAllGroups=function(visibleColumns){var leftVisibleColumns=_.filter(visibleColumns,function(column){return column.getPinned()==='left';});var rightVisibleColumns=_.filter(visibleColumns,function(column){return column.getPinned()==='right';});var centerVisibleColumns=_.filter(visibleColumns,function(column){return column.getPinned()!=='left'&&column.getPinned()!=='right';});var groupInstanceIdCreator=new grid.GroupInstanceIdCreator();this.displayedLeftColumnTree=this.displayedGroupCreator.createDisplayedGroups(leftVisibleColumns,this.originalBalancedTree,groupInstanceIdCreator);this.displayedRightColumnTree=this.displayedGroupCreator.createDisplayedGroups(rightVisibleColumns,this.originalBalancedTree,groupInstanceIdCreator);this.displayedCentreColumnTree=this.displayedGroupCreator.createDisplayedGroups(centerVisibleColumns,this.originalBalancedTree,groupInstanceIdCreator);};ColumnController.prototype.updateGroups=function(){var allGroups=this.getAllDisplayedColumnGroups();this.columnUtils.deptFirstAllColumnTreeSearch(allGroups,function(child){if(child instanceof grid.ColumnGroup){var group=child;group.calculateDisplayedColumns();}});};ColumnController.prototype.createGroupAutoColumn=function(){ // see if we need to insert the default grouping column
	var needAGroupColumn=this.rowGroupColumns.length>0&&!this.gridOptionsWrapper.isGroupSuppressAutoColumn()&&!this.gridOptionsWrapper.isGroupUseEntireRow()&&!this.gridOptionsWrapper.isGroupSuppressRow();if(needAGroupColumn){ // if one provided by user, use it, otherwise create one
	var groupColDef=this.gridOptionsWrapper.getGroupColumnDef();if(!groupColDef){var localeTextFunc=this.gridOptionsWrapper.getLocaleTextFunc();groupColDef={headerName:localeTextFunc('group','Group'),cellRenderer:{renderer:'group'}};}var groupColumnWidth=this.columnUtils.calculateColInitialWidth(groupColDef);var colId='ag-Grid-AutoColumn';this.groupAutoColumn=new grid.Column(groupColDef,groupColumnWidth,colId);}else {this.groupAutoColumn=null;}};ColumnController.prototype.updateVisibleColumns=function(){var visibleColumns=[];if(this.groupAutoColumn){visibleColumns.push(this.groupAutoColumn);}for(var i=0;i<this.allColumns.length;i++){var column=this.allColumns[i];var hideBecauseOfRowGroup=this.rowGroupColumns.indexOf(column)>=0&&this.gridOptionsWrapper.isGroupHideGroupColumns();if(column.isVisible()&&!hideBecauseOfRowGroup){column.setIndex(visibleColumns.length);visibleColumns.push(this.allColumns[i]);}}return visibleColumns;};ColumnController.prototype.createValueColumns=function(){this.valueColumns=[]; // override with columns that have the aggFunc specified explicitly
	for(var i=0;i<this.allColumns.length;i++){var column=this.allColumns[i];if(column.getColDef().aggFunc){column.setAggFunc(column.getColDef().aggFunc);this.valueColumns.push(column);}}};ColumnController.prototype.getWithOfColsInList=function(columnList){var result=0;for(var i=0;i<columnList.length;i++){result+=columnList[i].getActualWidth();}return result;};return ColumnController;}();grid.ColumnController=ColumnController;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={}));var ag;(function(ag){var grid;(function(grid){var SVG_NS="http://www.w3.org/2000/svg";var SvgFactory=function(){function SvgFactory(){}SvgFactory.getInstance=function(){if(!this.theInstance){this.theInstance=new SvgFactory();}return this.theInstance;};SvgFactory.prototype.createFilterSvg=function(){var eSvg=createIconSvg();var eFunnel=document.createElementNS(SVG_NS,"polygon");eFunnel.setAttribute("points","0,0 4,4 4,10 6,10 6,4 10,0");eFunnel.setAttribute("class","ag-header-icon");eSvg.appendChild(eFunnel);return eSvg;};SvgFactory.prototype.createColumnShowingSvg=function(){return createCircle(true);};SvgFactory.prototype.createColumnHiddenSvg=function(){return createCircle(false);};SvgFactory.prototype.createMenuSvg=function(){var eSvg=document.createElementNS(SVG_NS,"svg");var size="12";eSvg.setAttribute("width",size);eSvg.setAttribute("height",size);["0","5","10"].forEach(function(y){var eLine=document.createElementNS(SVG_NS,"rect");eLine.setAttribute("y",y);eLine.setAttribute("width",size);eLine.setAttribute("height","2");eLine.setAttribute("class","ag-header-icon");eSvg.appendChild(eLine);});return eSvg;};SvgFactory.prototype.createArrowUpSvg=function(){return createPolygonSvg("0,10 5,0 10,10");};SvgFactory.prototype.createArrowLeftSvg=function(){return createPolygonSvg("10,0 0,5 10,10");};SvgFactory.prototype.createArrowDownSvg=function(){return createPolygonSvg("0,0 5,10 10,0");};SvgFactory.prototype.createArrowRightSvg=function(){return createPolygonSvg("0,0 10,5 0,10");};SvgFactory.prototype.createSmallArrowDownSvg=function(){return createPolygonSvg("0,0 3,6 6,0",6);}; // UnSort Icon SVG
	SvgFactory.prototype.createArrowUpDownSvg=function(){var svg=createIconSvg();var eAscIcon=document.createElementNS(SVG_NS,"polygon");eAscIcon.setAttribute("points",'0,4 5,0 10,4');svg.appendChild(eAscIcon);var eDescIcon=document.createElementNS(SVG_NS,"polygon");eDescIcon.setAttribute("points",'0,6 5,10 10,6');svg.appendChild(eDescIcon);return svg;};return SvgFactory;}();grid.SvgFactory=SvgFactory;function createPolygonSvg(points,width){var eSvg=createIconSvg(width);var eDescIcon=document.createElementNS(SVG_NS,"polygon");eDescIcon.setAttribute("points",points);eSvg.appendChild(eDescIcon);return eSvg;} // util function for the above
	function createIconSvg(width){var eSvg=document.createElementNS(SVG_NS,"svg");if(width>0){eSvg.setAttribute("width",width);eSvg.setAttribute("height",width);}else {eSvg.setAttribute("width","10");eSvg.setAttribute("height","10");}return eSvg;}function createCircle(fill){var eSvg=createIconSvg();var eCircle=document.createElementNS(SVG_NS,"circle");eCircle.setAttribute("cx","5");eCircle.setAttribute("cy","5");eCircle.setAttribute("r","5");eCircle.setAttribute("stroke","black");eCircle.setAttribute("stroke-width","2");if(fill){eCircle.setAttribute("fill","black");}else {eCircle.setAttribute("fill","none");}eSvg.appendChild(eCircle);return eSvg;}})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path="../utils.ts"/>
	/// <reference path="../svgFactory.ts"/>
	var ag;(function(ag){var grid;(function(grid){var _=grid.Utils;var svgFactory=grid.SvgFactory.getInstance();var HeaderTemplateLoader=function(){function HeaderTemplateLoader(){}HeaderTemplateLoader.prototype.init=function(gridOptionsWrapper){this.gridOptionsWrapper=gridOptionsWrapper;};HeaderTemplateLoader.prototype.createHeaderElement=function(column){var params={column:column,colDef:column.getColDef,context:this.gridOptionsWrapper.getContext(),api:this.gridOptionsWrapper.getApi()}; // option 1 - see if user provided a template in colDef
	var userProvidedTemplate=column.getColDef().headerCellTemplate;if(typeof userProvidedTemplate==='function'){var colDefFunc=userProvidedTemplate;userProvidedTemplate=colDefFunc(params);} // option 2 - check the gridOptions for cellTemplate
	if(!userProvidedTemplate&&this.gridOptionsWrapper.getHeaderCellTemplate()){userProvidedTemplate=this.gridOptionsWrapper.getHeaderCellTemplate();} // option 3 - check the gridOptions for templateFunction
	if(!userProvidedTemplate&&this.gridOptionsWrapper.getHeaderCellTemplateFunc()){var gridOptionsFunc=this.gridOptionsWrapper.getHeaderCellTemplateFunc();userProvidedTemplate=gridOptionsFunc(params);} // finally, if still no template, use the default
	if(!userProvidedTemplate){userProvidedTemplate=this.createDefaultHeaderElement(column);} // template can be a string or a dom element, if string we need to convert to a dom element
	var result;if(typeof userProvidedTemplate==='string'){result=_.loadTemplate(userProvidedTemplate);}else if(_.isNodeOrElement(userProvidedTemplate)){result=userProvidedTemplate;}else {console.error('ag-Grid: header template must be a string or an HTML element');}return result;};HeaderTemplateLoader.prototype.createDefaultHeaderElement=function(column){var eTemplate=_.loadTemplate(HeaderTemplateLoader.HEADER_CELL_TEMPLATE);this.addInIcon(eTemplate,'sortAscending','#agSortAsc',column,svgFactory.createArrowUpSvg);this.addInIcon(eTemplate,'sortDescending','#agSortDesc',column,svgFactory.createArrowDownSvg);this.addInIcon(eTemplate,'sortUnSort','#agNoSort',column,svgFactory.createArrowUpDownSvg);this.addInIcon(eTemplate,'menu','#agMenu',column,svgFactory.createMenuSvg);this.addInIcon(eTemplate,'filter','#agFilter',column,svgFactory.createFilterSvg);return eTemplate;};HeaderTemplateLoader.prototype.addInIcon=function(eTemplate,iconName,cssSelector,column,defaultIconFactory){var eIcon=_.createIconNoSpan(iconName,this.gridOptionsWrapper,column,defaultIconFactory);eTemplate.querySelector(cssSelector).appendChild(eIcon);};HeaderTemplateLoader.HEADER_CELL_TEMPLATE='<div class="ag-header-cell">'+'  <div id="agResizeBar" class="ag-header-cell-resize"></div>'+'  <span id="agMenu" class="ag-header-icon ag-header-cell-menu-button"></span>'+'  <div class="ag-header-cell-label">'+'    <span id="agSortAsc" class="ag-header-icon ag-sort-ascending-icon"></span>'+'    <span id="agSortDesc" class="ag-header-icon ag-sort-descending-icon"></span>'+'    <span id="agNoSort" class="ag-header-icon ag-sort-none-icon"></span>'+'    <span id="agFilter" class="ag-header-icon ag-filter-icon"></span>'+'    <span id="agText" class="ag-header-cell-text"></span>'+'  </div>'+'</div>';return HeaderTemplateLoader;}();grid.HeaderTemplateLoader=HeaderTemplateLoader;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={}));var ag;(function(ag){var grid;(function(grid){var TemplateService=function(){function TemplateService(){this.templateCache={};this.waitingCallbacks={};}TemplateService.prototype.init=function($scope){this.$scope=$scope;}; // returns the template if it is loaded, or null if it is not loaded
	// but will call the callback when it is loaded
	TemplateService.prototype.getTemplate=function(url,callback){var templateFromCache=this.templateCache[url];if(templateFromCache){return templateFromCache;}var callbackList=this.waitingCallbacks[url];var that=this;if(!callbackList){ // first time this was called, so need a new list for callbacks
	callbackList=[];this.waitingCallbacks[url]=callbackList; // and also need to do the http request
	var client=new XMLHttpRequest();client.onload=function(){that.handleHttpResult(this,url);};client.open("GET",url);client.send();} // add this callback
	if(callback){callbackList.push(callback);} // caller needs to wait for template to load, so return null
	return null;};TemplateService.prototype.handleHttpResult=function(httpResult,url){if(httpResult.status!==200||httpResult.response===null){console.warn('Unable to get template error '+httpResult.status+' - '+url);return;} // response success, so process it
	// in IE9 the response is in - responseText
	this.templateCache[url]=httpResult.response||httpResult.responseText; // inform all listeners that this is now in the cache
	var callbacks=this.waitingCallbacks[url];for(var i=0;i<callbacks.length;i++){var callback=callbacks[i]; // we could pass the callback the response, however we know the client of this code
	// is the cell renderer, and it passes the 'cellRefresh' method in as the callback
	// which doesn't take any parameters.
	callback();}if(this.$scope){var that=this;setTimeout(function(){that.$scope.$apply();},0);}};return TemplateService;}();grid.TemplateService=TemplateService;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={}));var ag;(function(ag){var grid;(function(grid_3){var SelectionRendererFactory=function(){function SelectionRendererFactory(){}SelectionRendererFactory.prototype.init=function(grid,selectionController){this.grid=grid;this.selectionController=selectionController;};SelectionRendererFactory.prototype.createSelectionCheckbox=function(node,rowIndex){var eCheckbox=document.createElement('input');eCheckbox.type="checkbox";eCheckbox.name="name";eCheckbox.className='ag-selection-checkbox';setCheckboxState(eCheckbox,this.selectionController.isNodeSelected(node));var that=this;eCheckbox.onclick=function(event){event.stopPropagation();};eCheckbox.onchange=function(){var newValue=eCheckbox.checked;if(newValue){that.selectionController.selectIndex(rowIndex,true);}else {that.selectionController.deselectIndex(rowIndex);}};this.grid.addVirtualRowListener(grid_3.Grid.VIRTUAL_ROW_SELECTED,rowIndex,function(selected){setCheckboxState(eCheckbox,selected);});return eCheckbox;};return SelectionRendererFactory;}();grid_3.SelectionRendererFactory=SelectionRendererFactory;function setCheckboxState(eCheckbox,state){if(typeof state==='boolean'){eCheckbox.checked=state;eCheckbox.indeterminate=false;}else { // isNodeSelected returns back undefined if it's a group and the children
	// are a mix of selected and unselected
	eCheckbox.indeterminate=true;}}})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path="../utils.ts" />
	var ag;(function(ag){var vdom;(function(vdom){var _=ag.grid.Utils;var VElement=function(){function VElement(){this.id=VElement.idSequence++;}VElement.prototype.getId=function(){return this.id;};VElement.prototype.addElementAttachedListener=function(listener){if(!this.elementAttachedListeners){this.elementAttachedListeners=[];}this.elementAttachedListeners.push(listener);};VElement.prototype.fireElementAttached=function(element){if(!this.elementAttachedListeners){return;}for(var i=0;i<this.elementAttachedListeners.length;i++){var listener=this.elementAttachedListeners[i];listener(element);}}; // abstract
	VElement.prototype.elementAttached=function(element){this.fireElementAttached(element);};VElement.prototype.toHtmlString=function(){return null;};VElement.idSequence=0;return VElement;}();vdom.VElement=VElement;})(vdom=ag.vdom||(ag.vdom={}));})(ag||(ag={})); /// <reference path="vElement.ts" />
	/// <reference path="../utils.ts" />
	var __extends=undefined&&undefined.__extends||function(d,b){for(var p in b){if(b.hasOwnProperty(p))d[p]=b[p];}function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());};var ag;(function(ag){var vdom;(function(vdom){var _=ag.grid.Utils;var VHtmlElement=function(_super){__extends(VHtmlElement,_super);function VHtmlElement(type){_super.call(this);this.style={};this.type=type;}VHtmlElement.prototype.getElement=function(){return this.element;};VHtmlElement.prototype.setInnerHtml=function(innerHtml){if(this.bound){this.element.innerHTML=innerHtml;}else {this.innerHtml=innerHtml;}};VHtmlElement.prototype.addStyles=function(styles){var _this=this;if(!styles){return;}if(!this.bound&&!this.style){this.style={};}_.iterateObject(styles,function(key,value){if(_this.bound){var style=_this.element.style;style[key]=value;}else {_this.style[key]=value;}});};VHtmlElement.prototype.attachEventListeners=function(node){if(!this.eventListeners){return;}for(var i=0;i<this.eventListeners.length;i++){var listener=this.eventListeners[i];node.addEventListener(listener.event,listener.listener);}};VHtmlElement.prototype.addClass=function(newClass){if(this.bound){_.addCssClass(this.element,newClass);}else {if(!this.classes){this.classes=[];}this.classes.push(newClass);}};VHtmlElement.prototype.removeClass=function(oldClass){if(this.bound){_.removeCssClass(this.element,oldClass);}else {if(!this.classes){return;}while(this.classes.indexOf(oldClass)>=0){_.removeFromArray(this.classes,oldClass);}}};VHtmlElement.prototype.addClasses=function(classes){if(!classes||classes.length<=0){return;}if(this.bound){for(var i=0;i<classes.length;i++){_.addCssClass(this.element,classes[i]);}}else {if(!this.classes){this.classes=[];}for(var j=0;j<classes.length;j++){this.classes.push(classes[j]);}}};VHtmlElement.prototype.toHtmlString=function(){var buff=''; // opening element
	buff+='<'+this.type+' v_element_id="'+this.getId()+'" ';buff+=this.toHtmlStringClasses();buff+=this.toHtmlStringAttributes();buff+=this.toHtmlStringStyles();buff+='>'; // contents
	if(this.innerHtml!==null&&this.innerHtml!==undefined){buff+=this.innerHtml;}buff+=this.toHtmlStringChildren(); // closing element
	buff+='</'+this.type+'>';return buff;};VHtmlElement.prototype.toHtmlStringChildren=function(){if(!this.children){return '';}var result='';for(var i=0;i<this.children.length;i++){result+=this.children[i].toHtmlString();}return result;};VHtmlElement.prototype.toHtmlStringAttributes=function(){if(!this.attributes){return '';}var result='';_.iterateObject(this.attributes,function(key,value){result+=' '+key+'="'+value+'"';});return result;};VHtmlElement.prototype.toHtmlStringClasses=function(){if(!this.classes){return '';}return ' class="'+this.classes.join(' ')+'"';};VHtmlElement.prototype.toHtmlStringStyles=function(){var result=' style="';var atLeastOne=false;_.iterateObject(this.style,function(key,value){result+=' '+key+': '+value+';';atLeastOne=true;});result+='"';if(atLeastOne){return result;}else {return '';}};VHtmlElement.prototype.appendChild=function(child){if(this.bound){if(_.isNodeOrElement(child)){this.element.appendChild(child);}else {console.error('cannot appendChild with virtual child to already bound VHTMLElement');}}else {if(!this.children){this.children=[];}if(_.isNodeOrElement(child)){this.children.push(new vdom.VWrapperElement(child));}else {this.children.push(child);}}};VHtmlElement.prototype.setAttribute=function(key,value){if(this.bound){this.element.setAttribute(key,value);}else {if(!this.attributes){this.attributes={};}this.attributes[key]=value;}};VHtmlElement.prototype.addEventListener=function(event,listener){if(this.bound){this.element.addEventListener(event,listener);}else {if(!this.eventListeners){this.eventListeners=[];}var entry=new VEventListener(event,listener);this.eventListeners.push(entry);}};VHtmlElement.prototype.elementAttached=function(element){_super.prototype.elementAttached.call(this,element);this.element=element;this.attachEventListeners(element);this.fireElementAttachedToChildren(element);this.bound=true;};VHtmlElement.prototype.fireElementAttachedToChildren=function(element){if(!this.children){return;}for(var i=0;i<this.children.length;i++){var child=this.children[i];var childElement=element.querySelector('[v_element_id="'+child.getId()+'"]');child.elementAttached(childElement);}};return VHtmlElement;}(vdom.VElement);vdom.VHtmlElement=VHtmlElement;var VEventListener=function(){function VEventListener(event,listener){this.event=event;this.listener=listener;}return VEventListener;}();})(vdom=ag.vdom||(ag.vdom={}));})(ag||(ag={})); /// <reference path="vElement.ts" />
	var ag;(function(ag){var vdom;(function(vdom){var VWrapperElement=function(_super){__extends(VWrapperElement,_super);function VWrapperElement(wrappedElement){_super.call(this);this.wrappedElement=wrappedElement;}VWrapperElement.prototype.toHtmlString=function(){return '<span v_element_id="'+this.getId()+'"></span>';};VWrapperElement.prototype.elementAttached=function(element){var parent=element.parentNode;parent.insertBefore(this.wrappedElement,element);parent.removeChild(element);};return VWrapperElement;}(vdom.VElement);vdom.VWrapperElement=VWrapperElement;})(vdom=ag.vdom||(ag.vdom={}));})(ag||(ag={})); /// <reference path='../columnController/columnController.ts' />
	/// <reference path='../utils.ts' />
	/// <reference path="../gridOptionsWrapper.ts" />
	/// <reference path="../expressionService.ts" />
	/// <reference path="../selectionRendererFactory.ts" />
	/// <reference path="rowRenderer.ts" />
	/// <reference path="../selectionController.ts" />
	/// <reference path="../templateService.ts" />
	/// <reference path="../virtualDom/vHtmlElement.ts" />
	/// <reference path="../virtualDom/vWrapperElement.ts" />
	var ag;(function(ag){var grid;(function(grid){var _=grid.Utils;var RenderedCell=function(){function RenderedCell(firstRightPinnedCol,column,$compile,rowRenderer,gridOptionsWrapper,expressionService,selectionRendererFactory,selectionController,templateService,cellRendererMap,node,rowIndex,colIndex,scope,columnController,valueService,eventService){this.firstRightPinnedColumn=firstRightPinnedCol;this.column=column;this.rowRenderer=rowRenderer;this.gridOptionsWrapper=gridOptionsWrapper;this.expressionService=expressionService;this.selectionRendererFactory=selectionRendererFactory;this.selectionController=selectionController;this.cellRendererMap=cellRendererMap;this.$compile=$compile;this.templateService=templateService;this.columnController=columnController;this.valueService=valueService;this.eventService=eventService;this.node=node;this.rowIndex=rowIndex;this.colIndex=colIndex;this.scope=scope;this.data=this.getDataForRow();this.value=this.getValue();this.checkboxSelection=this.calculateCheckboxSelection();this.setupComponents();}RenderedCell.prototype.calculateCheckboxSelection=function(){ // never allow selection on floating rows
	if(this.node.floating){return false;} // if boolean set, then just use it
	var colDef=this.column.getColDef();if(typeof colDef.checkboxSelection==='boolean'){return colDef.checkboxSelection;} // if function, then call the function to find out. we first check colDef for
	// a function, and if missing then check gridOptions, so colDef has precedence
	var selectionFunc;if(typeof colDef.checkboxSelection==='function'){selectionFunc=colDef.checkboxSelection;}if(!selectionFunc&&this.gridOptionsWrapper.getCheckboxSelection()){selectionFunc=this.gridOptionsWrapper.getCheckboxSelection();}if(selectionFunc){var params=this.createParams();return selectionFunc(params);}return false;};RenderedCell.prototype.getColumn=function(){return this.column;};RenderedCell.prototype.getValue=function(){return this.valueService.getValue(this.column.getColDef(),this.data,this.node);};RenderedCell.prototype.getVGridCell=function(){return this.vGridCell;};RenderedCell.prototype.getDataForRow=function(){if(this.node.footer){ // if footer, we always show the data
	return this.node.data;}else if(this.node.group){ // if header and header is expanded, we show data in footer only
	var footersEnabled=this.gridOptionsWrapper.isGroupIncludeFooter();var suppressHideHeader=this.gridOptionsWrapper.isGroupSuppressBlankHeader();if(this.node.expanded&&footersEnabled&&!suppressHideHeader){return undefined;}else {return this.node.data;}}else { // otherwise it's a normal node, just return data as normal
	return this.node.data;}};RenderedCell.prototype.setupComponents=function(){this.vGridCell=new ag.vdom.VHtmlElement("div");this.vGridCell.setAttribute("col",this.column.getIndex()!==undefined&&this.column.getIndex()!==null?this.column.getIndex().toString():'');this.vGridCell.setAttribute("colId",this.column.getColId()); // only set tab index if cell selection is enabled
	if(!this.gridOptionsWrapper.isSuppressCellSelection()&&!this.node.floating){this.vGridCell.setAttribute("tabindex","-1");} // these are the grid styles, don't change between soft refreshes
	this.addClasses();this.addCellClickedHandler();this.addCellDoubleClickedHandler();this.addCellContextMenuHandler();if(!this.node.floating){this.addCellNavigationHandler();}this.vGridCell.addStyles({width:this.column.getActualWidth()+"px"});this.createParentOfValue();this.populateCell();if(this.eCheckbox){this.setSelected(this.selectionController.isNodeSelected(this.node));}}; // called by rowRenderer when user navigates via tab key
	RenderedCell.prototype.startEditing=function(key){var _this=this;var that=this;this.editingCell=true;_.removeAllChildren(this.vGridCell.getElement());var eInput=document.createElement('input');eInput.type='text';_.addCssClass(eInput,'ag-cell-edit-input');var startWithOldValue=key!==grid.Constants.KEY_BACKSPACE&&key!==grid.Constants.KEY_DELETE;var value=this.getValue();if(startWithOldValue&&value!==null&&value!==undefined){eInput.value=value;}eInput.style.width=this.column.getActualWidth()-14+'px';this.vGridCell.appendChild(eInput);eInput.focus();eInput.select();var blurListener=function blurListener(){that.stopEditing(eInput,blurListener);}; //stop entering if we loose focus
	eInput.addEventListener("blur",blurListener); //stop editing if enter pressed
	eInput.addEventListener('keypress',function(event){var key=event.which||event.keyCode;if(key===grid.Constants.KEY_ENTER){_this.stopEditing(eInput,blurListener);_this.focusCell(true);}}); //stop editing if enter pressed
	eInput.addEventListener('keydown',function(event){var key=event.which||event.keyCode;if(key===grid.Constants.KEY_ESCAPE){_this.stopEditing(eInput,blurListener,true);_this.focusCell(true);}}); // tab key doesn't generate keypress, so need keydown to listen for that
	eInput.addEventListener('keydown',function(event){var key=event.which||event.keyCode;if(key==grid.Constants.KEY_TAB){that.stopEditing(eInput,blurListener);that.rowRenderer.startEditingNextCell(that.rowIndex,that.column,event.shiftKey); // we don't want the default tab action, so return false, this stops the event from bubbling
	event.preventDefault();return false;}});};RenderedCell.prototype.focusCell=function(forceBrowserFocus){this.rowRenderer.focusCell(this.vGridCell.getElement(),this.rowIndex,this.column.getIndex(),this.column.getColDef(),forceBrowserFocus);};RenderedCell.prototype.stopEditing=function(eInput,blurListener,reset){if(reset===void 0){reset=false;}this.editingCell=false;var newValue=eInput.value;var colDef=this.column.getColDef(); //If we don't remove the blur listener first, we get:
	//Uncaught NotFoundError: Failed to execute 'removeChild' on 'Node': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?
	eInput.removeEventListener('blur',blurListener);if(!reset){var paramsForCallbacks={node:this.node,data:this.node.data,oldValue:this.node.data[colDef.field],newValue:newValue,rowIndex:this.rowIndex,colDef:colDef,api:this.gridOptionsWrapper.getApi(),context:this.gridOptionsWrapper.getContext()};if(colDef.newValueHandler){colDef.newValueHandler(paramsForCallbacks);}else {this.node.data[colDef.field]=newValue;} // at this point, the value has been updated
	this.value=this.getValue();paramsForCallbacks.newValue=this.value;if(typeof colDef.onCellValueChanged==='function'){colDef.onCellValueChanged(paramsForCallbacks);}this.eventService.dispatchEvent(grid.Events.EVENT_CELL_VALUE_CHANGED,paramsForCallbacks);}_.removeAllChildren(this.vGridCell.getElement());if(this.checkboxSelection){this.vGridCell.appendChild(this.vCellWrapper.getElement());}this.refreshCell();};RenderedCell.prototype.createParams=function(){var params={node:this.node,data:this.node.data,value:this.value,rowIndex:this.rowIndex,colIndex:this.colIndex,colDef:this.column.getColDef(),$scope:this.scope,context:this.gridOptionsWrapper.getContext(),api:this.gridOptionsWrapper.getApi()};return params;};RenderedCell.prototype.createEvent=function(event,eventSource){var agEvent=this.createParams();agEvent.event=event;agEvent.eventSource=eventSource;return agEvent;};RenderedCell.prototype.addCellDoubleClickedHandler=function(){var that=this;var colDef=this.column.getColDef();this.vGridCell.addEventListener('dblclick',function(event){ // always dispatch event to eventService
	var agEvent=that.createEvent(event,this);that.eventService.dispatchEvent(grid.Events.EVENT_CELL_DOUBLE_CLICKED,agEvent); // check if colDef also wants to handle event
	if(typeof colDef.onCellDoubleClicked==='function'){colDef.onCellDoubleClicked(agEvent);}if(!that.gridOptionsWrapper.isSingleClickEdit()&&that.isCellEditable()){that.startEditing();}});};RenderedCell.prototype.addCellContextMenuHandler=function(){var that=this;var colDef=this.column.getColDef();this.vGridCell.addEventListener('contextmenu',function(event){var agEvent=that.createEvent(event,this);that.eventService.dispatchEvent(grid.Events.EVENT_CELL_CONTEXT_MENU,agEvent);if(colDef.onCellContextMenu){colDef.onCellContextMenu(agEvent);}});};RenderedCell.prototype.isCellEditable=function(){if(this.editingCell){return false;} // never allow editing of groups
	if(this.node.group){return false;} // if boolean set, then just use it
	var colDef=this.column.getColDef();if(typeof colDef.editable==='boolean'){return colDef.editable;} // if function, then call the function to find out
	if(typeof colDef.editable==='function'){var params=this.createParams();var editableFunc=colDef.editable;return editableFunc(params);}return false;};RenderedCell.prototype.addCellClickedHandler=function(){var colDef=this.column.getColDef();var that=this;this.vGridCell.addEventListener("click",function(event){ // we pass false to focusCell, as we don't want the cell to focus
	// also get the browser focus. if we did, then the cellRenderer could
	// have a text field in it, for example, and as the user clicks on the
	// text field, the text field, the focus doesn't get to the text
	// field, instead to goes to the div behind, making it impossible to
	// select the text field.
	if(!that.node.floating){that.focusCell(false);}var agEvent=that.createEvent(event,this);that.eventService.dispatchEvent(grid.Events.EVENT_CELL_CLICKED,agEvent);if(colDef.onCellClicked){colDef.onCellClicked(agEvent);}if(that.gridOptionsWrapper.isSingleClickEdit()&&that.isCellEditable()){that.startEditing();}});};RenderedCell.prototype.populateCell=function(){ // populate
	this.putDataIntoCell(); // style
	this.addStylesFromCollDef();this.addClassesFromCollDef();this.addClassesFromRules();};RenderedCell.prototype.addStylesFromCollDef=function(){var colDef=this.column.getColDef();if(colDef.cellStyle){var cssToUse;if(typeof colDef.cellStyle==='function'){var cellStyleParams={value:this.value,data:this.node.data,node:this.node,colDef:colDef,column:this.column,$scope:this.scope,context:this.gridOptionsWrapper.getContext(),api:this.gridOptionsWrapper.getApi()};var cellStyleFunc=colDef.cellStyle;cssToUse=cellStyleFunc(cellStyleParams);}else {cssToUse=colDef.cellStyle;}if(cssToUse){this.vGridCell.addStyles(cssToUse);}}};RenderedCell.prototype.addClassesFromCollDef=function(){var _this=this;var colDef=this.column.getColDef();if(colDef.cellClass){var classToUse;if(typeof colDef.cellClass==='function'){var cellClassParams={value:this.value,data:this.node.data,node:this.node,colDef:colDef,$scope:this.scope,context:this.gridOptionsWrapper.getContext(),api:this.gridOptionsWrapper.getApi()};var cellClassFunc=colDef.cellClass;classToUse=cellClassFunc(cellClassParams);}else {classToUse=colDef.cellClass;}if(typeof classToUse==='string'){this.vGridCell.addClass(classToUse);}else if(Array.isArray(classToUse)){classToUse.forEach(function(cssClassItem){_this.vGridCell.addClass(cssClassItem);});}}};RenderedCell.prototype.addClassesFromRules=function(){var colDef=this.column.getColDef();var classRules=colDef.cellClassRules;if((typeof classRules==='undefined'?'undefined':_typeof(classRules))==='object'&&classRules!==null){var params={value:this.value,data:this.node.data,node:this.node,colDef:colDef,rowIndex:this.rowIndex,api:this.gridOptionsWrapper.getApi(),context:this.gridOptionsWrapper.getContext()};var classNames=Object.keys(classRules);for(var i=0;i<classNames.length;i++){var className=classNames[i];var rule=classRules[className];var resultOfRule;if(typeof rule==='string'){resultOfRule=this.expressionService.evaluate(rule,params);}else if(typeof rule==='function'){resultOfRule=rule(params);}if(resultOfRule){this.vGridCell.addClass(className);}else {this.vGridCell.removeClass(className);}}}}; // rename this to 'add key event listener
	RenderedCell.prototype.addCellNavigationHandler=function(){var that=this;this.vGridCell.addEventListener('keydown',function(event){if(that.editingCell){return;} // only interested on key presses that are directly on this element, not any children elements. this
	// stops navigation if the user is in, for example, a text field inside the cell, and user hits
	// on of the keys we are looking for.
	if(event.target!==that.vGridCell.getElement()){return;}var key=event.which||event.keyCode;var startNavigation=key===grid.Constants.KEY_DOWN||key===grid.Constants.KEY_UP||key===grid.Constants.KEY_LEFT||key===grid.Constants.KEY_RIGHT;if(startNavigation){event.preventDefault();that.rowRenderer.navigateToNextCell(key,that.rowIndex,that.column);return;}var startEdit=that.isKeycodeForStartEditing(key);if(startEdit&&that.isCellEditable()){that.startEditing(key); // if we don't prevent default, then the editor that get displayed also picks up the 'enter key'
	// press, and stops editing immediately, hence giving he user experience that nothing happened
	event.preventDefault();return;}var selectRow=key===grid.Constants.KEY_SPACE;if(selectRow&&that.gridOptionsWrapper.isRowSelection()){var selected=that.selectionController.isNodeSelected(that.node);if(selected){that.selectionController.deselectNode(that.node);}else {that.selectionController.selectNode(that.node,true);}event.preventDefault();return;}});};RenderedCell.prototype.isKeycodeForStartEditing=function(key){return key===grid.Constants.KEY_ENTER||key===grid.Constants.KEY_BACKSPACE||key===grid.Constants.KEY_DELETE;};RenderedCell.prototype.createSelectionCheckbox=function(){this.eCheckbox=document.createElement('input');this.eCheckbox.type="checkbox";this.eCheckbox.name="name";this.eCheckbox.className='ag-selection-checkbox';this.eCheckbox.addEventListener('click',function(event){event.stopPropagation();});var that=this;this.checkboxOnChangeListener=function(){var newValue=that.eCheckbox.checked;if(newValue){that.selectionController.selectIndex(that.rowIndex,true);}else {that.selectionController.deselectIndex(that.rowIndex);}};this.eCheckbox.onchange=this.checkboxOnChangeListener;};RenderedCell.prototype.setSelected=function(state){if(!this.eCheckbox){return;}this.eCheckbox.onchange=null;if(typeof state==='boolean'){this.eCheckbox.checked=state;this.eCheckbox.indeterminate=false;}else { // isNodeSelected returns back undefined if it's a group and the children
	// are a mix of selected and unselected
	this.eCheckbox.indeterminate=true;}this.eCheckbox.onchange=this.checkboxOnChangeListener;};RenderedCell.prototype.createParentOfValue=function(){if(this.checkboxSelection){this.vCellWrapper=new ag.vdom.VHtmlElement('span');this.vCellWrapper.addClass('ag-cell-wrapper');this.vGridCell.appendChild(this.vCellWrapper);this.createSelectionCheckbox();this.vCellWrapper.appendChild(new ag.vdom.VWrapperElement(this.eCheckbox)); // eventually we call eSpanWithValue.innerHTML = xxx, so cannot include the checkbox (above) in this span
	this.vSpanWithValue=new ag.vdom.VHtmlElement('span');this.vSpanWithValue.addClass('ag-cell-value');this.vCellWrapper.appendChild(this.vSpanWithValue);this.vParentOfValue=this.vSpanWithValue;}else {this.vGridCell.addClass('ag-cell-value');this.vParentOfValue=this.vGridCell;}};RenderedCell.prototype.isVolatile=function(){return this.column.getColDef().volatile;};RenderedCell.prototype.refreshCell=function(){_.removeAllChildren(this.vParentOfValue.getElement());this.value=this.getValue();this.populateCell();if(this.checkboxSelection){this.setSelected(this.selectionController.isNodeSelected(this.node));} // if angular compiling, then need to also compile the cell again (angular compiling sucks, please wait...)
	if(this.gridOptionsWrapper.isAngularCompileRows()){this.$compile(this.vGridCell.getElement())(this.scope);}};RenderedCell.prototype.putDataIntoCell=function(){ // template gets preference, then cellRenderer, then do it ourselves
	var colDef=this.column.getColDef();if(colDef.template){this.vParentOfValue.setInnerHtml(colDef.template);}else if(colDef.templateUrl){var template=this.templateService.getTemplate(colDef.templateUrl,this.refreshCell.bind(this,true));if(template){this.vParentOfValue.setInnerHtml(template);}}else if(colDef.floatingCellRenderer&&this.node.floating){this.useCellRenderer(colDef.floatingCellRenderer);}else if(colDef.cellRenderer){this.useCellRenderer(colDef.cellRenderer);}else { // if we insert undefined, then it displays as the string 'undefined', ugly!
	if(this.value!==undefined&&this.value!==null&&this.value!==''){this.vParentOfValue.setInnerHtml(this.value.toString());}}};RenderedCell.prototype.useCellRenderer=function(cellRenderer){var colDef=this.column.getColDef();var rendererParams={value:this.value,valueGetter:this.getValue,data:this.node.data,node:this.node,colDef:colDef,column:this.column,$scope:this.scope,rowIndex:this.rowIndex,api:this.gridOptionsWrapper.getApi(),context:this.gridOptionsWrapper.getContext(),refreshCell:this.refreshCell.bind(this),eGridCell:this.vGridCell,eParentOfValue:this.vParentOfValue}; // start duplicated code
	var actualCellRenderer;if((typeof cellRenderer==='undefined'?'undefined':_typeof(cellRenderer))==='object'&&cellRenderer!==null){var cellRendererObj=cellRenderer;actualCellRenderer=this.cellRendererMap[cellRendererObj.renderer];if(!actualCellRenderer){throw 'Cell renderer '+cellRenderer+' not found, available are '+Object.keys(this.cellRendererMap);}}else if(typeof cellRenderer==='function'){actualCellRenderer=cellRenderer;}else {throw 'Cell Renderer must be String or Function';}var resultFromRenderer=actualCellRenderer(rendererParams); // end duplicated code
	if(_.isNodeOrElement(resultFromRenderer)){ // a dom node or element was returned, so add child
	this.vParentOfValue.appendChild(resultFromRenderer);}else { // otherwise assume it was html, so just insert
	this.vParentOfValue.setInnerHtml(resultFromRenderer);}};RenderedCell.prototype.addClasses=function(){this.vGridCell.addClass('ag-cell');this.vGridCell.addClass('ag-cell-no-focus');this.vGridCell.addClass('cell-col-'+this.column.getIndex());if(this.node.group&&this.node.footer){this.vGridCell.addClass('ag-footer-cell');}if(this.node.group&&!this.node.footer){this.vGridCell.addClass('ag-group-cell');}if(this.firstRightPinnedColumn){this.vGridCell.addClass('ag-cell-first-right-pinned');}};return RenderedCell;}();grid.RenderedCell=RenderedCell;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path="../gridOptionsWrapper.ts" />
	/// <reference path="../grid.ts" />
	/// <reference path="../utils.ts" />
	/// <reference path="../columnController/columnController.ts" />
	/// <reference path="../expressionService.ts" />
	/// <reference path="rowRenderer.ts" />
	/// <reference path="../templateService.ts" />
	/// <reference path="../selectionController.ts" />
	/// <reference path="renderedCell.ts" />
	/// <reference path="../virtualDom/vHtmlElement.ts" />
	var ag;(function(ag){var grid;(function(grid){var _=grid.Utils;var RenderedRow=function(){function RenderedRow(gridOptionsWrapper,valueService,parentScope,angularGrid,columnController,expressionService,cellRendererMap,selectionRendererFactory,$compile,templateService,selectionController,rowRenderer,eBodyContainer,ePinnedLeftContainer,ePinnedRightContainer,node,rowIndex,eventService){this.renderedCells={};this.gridOptionsWrapper=gridOptionsWrapper;this.valueService=valueService;this.parentScope=parentScope;this.angularGrid=angularGrid;this.expressionService=expressionService;this.columnController=columnController;this.cellRendererMap=cellRendererMap;this.selectionRendererFactory=selectionRendererFactory;this.$compile=$compile;this.templateService=templateService;this.selectionController=selectionController;this.rowRenderer=rowRenderer;this.eBodyContainer=eBodyContainer;this.ePinnedLeftContainer=ePinnedLeftContainer;this.ePinnedRightContainer=ePinnedRightContainer;this.pinningLeft=columnController.isPinningLeft();this.pinningRight=columnController.isPinningRight();this.eventService=eventService;var groupHeaderTakesEntireRow=this.gridOptionsWrapper.isGroupUseEntireRow();var rowIsHeaderThatSpans=node.group&&groupHeaderTakesEntireRow;this.vBodyRow=this.createRowContainer();if(this.pinningLeft){this.vPinnedLeftRow=this.createRowContainer();}if(this.pinningRight){this.vPinnedRightRow=this.createRowContainer();}this.rowIndex=rowIndex;this.node=node;this.scope=this.createChildScopeOrNull(node.data);if(!rowIsHeaderThatSpans){this.drawNormalRow();}this.addDynamicStyles();this.addDynamicClasses();var rowStr=this.rowIndex.toString();if(this.node.floatingBottom){rowStr='fb-'+rowStr;}else if(this.node.floatingTop){rowStr='ft-'+rowStr;}this.vBodyRow.setAttribute('row',rowStr);if(this.pinningLeft){this.vPinnedLeftRow.setAttribute('row',rowStr);}if(this.pinningRight){this.vPinnedRightRow.setAttribute('row',rowStr);}if(typeof this.gridOptionsWrapper.getBusinessKeyForNodeFunc()==='function'){var businessKey=this.gridOptionsWrapper.getBusinessKeyForNodeFunc()(this.node);if(typeof businessKey==='string'||typeof businessKey==='number'){this.vBodyRow.setAttribute('row-id',businessKey);if(this.pinningLeft){this.vPinnedLeftRow.setAttribute('row-id',businessKey);}if(this.pinningRight){this.vPinnedRightRow.setAttribute('row-id',businessKey);}}} // if showing scrolls, position on the container
	if(!this.gridOptionsWrapper.isForPrint()){var topPx=this.node.rowTop+"px";this.vBodyRow.style.top=topPx;if(this.pinningLeft){this.vPinnedLeftRow.style.top=topPx;}if(this.pinningRight){this.vPinnedRightRow.style.top=topPx;}}var heightPx=this.node.rowHeight+'px';this.vBodyRow.style.height=heightPx;if(this.pinningLeft){this.vPinnedLeftRow.style.height=heightPx;}if(this.pinningRight){this.vPinnedRightRow.style.height=heightPx;} // if group item, insert the first row
	if(rowIsHeaderThatSpans){this.createGroupRow();}this.bindVirtualElement(this.vBodyRow);if(this.pinningLeft){this.bindVirtualElement(this.vPinnedLeftRow);}if(this.pinningRight){this.bindVirtualElement(this.vPinnedRightRow);}if(this.scope){this.$compile(this.vBodyRow.getElement())(this.scope);if(this.pinningLeft){this.$compile(this.vPinnedLeftRow.getElement())(this.scope);}if(this.pinningRight){this.$compile(this.vPinnedRightRow.getElement())(this.scope);}}this.eBodyContainer.appendChild(this.vBodyRow.getElement());if(this.pinningLeft){this.ePinnedLeftContainer.appendChild(this.vPinnedLeftRow.getElement());}if(this.pinningRight){this.ePinnedRightContainer.appendChild(this.vPinnedRightRow.getElement());}}RenderedRow.prototype.onRowSelected=function(selected){_.iterateObject(this.renderedCells,function(key,renderedCell){renderedCell.setSelected(selected);});};RenderedRow.prototype.softRefresh=function(){_.iterateObject(this.renderedCells,function(key,renderedCell){if(renderedCell.isVolatile()){renderedCell.refreshCell();}});};RenderedRow.prototype.getRenderedCellForColumn=function(column){return this.renderedCells[column.getIndex()];};RenderedRow.prototype.getCellForCol=function(column){var renderedCell=this.renderedCells[column.getIndex()];if(renderedCell){return renderedCell.getVGridCell().getElement();}else {return null;}};RenderedRow.prototype.destroy=function(){this.destroyScope();if(this.pinningLeft){this.ePinnedLeftContainer.removeChild(this.vPinnedLeftRow.getElement());}if(this.pinningRight){this.ePinnedRightContainer.removeChild(this.vPinnedRightRow.getElement());}this.eBodyContainer.removeChild(this.vBodyRow.getElement());};RenderedRow.prototype.destroyScope=function(){if(this.scope){this.scope.$destroy();this.scope=null;}};RenderedRow.prototype.isDataInList=function(rows){return rows.indexOf(this.node.data)>=0;};RenderedRow.prototype.isNodeInList=function(nodes){return nodes.indexOf(this.node)>=0;};RenderedRow.prototype.isGroup=function(){return this.node.group===true;};RenderedRow.prototype.drawNormalRow=function(){var columns=this.columnController.getAllDisplayedColumns();var firstRightPinnedColIndex=this.columnController.getFirstRightPinnedColIndex();for(var colIndex=0;colIndex<columns.length;colIndex++){var column=columns[colIndex];var firstRightPinnedCol=colIndex===firstRightPinnedColIndex;var renderedCell=new grid.RenderedCell(firstRightPinnedCol,column,this.$compile,this.rowRenderer,this.gridOptionsWrapper,this.expressionService,this.selectionRendererFactory,this.selectionController,this.templateService,this.cellRendererMap,this.node,this.rowIndex,colIndex,this.scope,this.columnController,this.valueService,this.eventService);var vGridCell=renderedCell.getVGridCell();if(column.getPinned()===grid.Column.PINNED_LEFT){this.vPinnedLeftRow.appendChild(vGridCell);}else if(column.getPinned()===grid.Column.PINNED_RIGHT){this.vPinnedRightRow.appendChild(vGridCell);}else {this.vBodyRow.appendChild(vGridCell);}this.renderedCells[column.getIndex()]=renderedCell;}};RenderedRow.prototype.bindVirtualElement=function(vElement){var html=vElement.toHtmlString();var element=_.loadTemplate(html);vElement.elementAttached(element);};RenderedRow.prototype.createGroupRow=function(){var eGroupRow=this.createGroupSpanningEntireRowCell(false);if(this.pinningLeft){this.vPinnedLeftRow.appendChild(eGroupRow);var eGroupRowPadding=this.createGroupSpanningEntireRowCell(true);this.vBodyRow.appendChild(eGroupRowPadding);}else {this.vBodyRow.appendChild(eGroupRow);}if(this.pinningRight){var ePinnedRightPadding=this.createGroupSpanningEntireRowCell(true);this.vPinnedRightRow.appendChild(ePinnedRightPadding);}};RenderedRow.prototype.createGroupSpanningEntireRowCell=function(padding){var eRow; // padding means we are on the right hand side of a pinned table, ie
	// in the main body.
	if(padding){eRow=document.createElement('span');}else {var rowCellRenderer=this.gridOptionsWrapper.getGroupRowRenderer();if(!rowCellRenderer){rowCellRenderer={renderer:'group',innerRenderer:this.gridOptionsWrapper.getGroupRowInnerRenderer()};}var params={node:this.node,data:this.node.data,rowIndex:this.rowIndex,api:this.gridOptionsWrapper.getApi(),colDef:{cellRenderer:rowCellRenderer}}; // start duplicated code
	var actualCellRenderer;if((typeof rowCellRenderer==='undefined'?'undefined':_typeof(rowCellRenderer))==='object'&&rowCellRenderer!==null){var cellRendererObj=rowCellRenderer;actualCellRenderer=this.cellRendererMap[cellRendererObj.renderer];if(!actualCellRenderer){throw 'Cell renderer '+rowCellRenderer+' not found, available are '+Object.keys(this.cellRendererMap);}}else if(typeof rowCellRenderer==='function'){actualCellRenderer=rowCellRenderer;}else {throw 'Cell Renderer must be String or Function';}var resultFromRenderer=actualCellRenderer(params); // end duplicated code
	if(_.isNodeOrElement(resultFromRenderer)){ // a dom node or element was returned, so add child
	eRow=resultFromRenderer;}else { // otherwise assume it was html, so just insert
	eRow=_.loadTemplate(resultFromRenderer);}}if(this.node.footer){_.addCssClass(eRow,'ag-footer-cell-entire-row');}else {_.addCssClass(eRow,'ag-group-cell-entire-row');}return eRow;};RenderedRow.prototype.setMainRowWidth=function(width){this.vBodyRow.addStyles({width:width+"px"});};RenderedRow.prototype.createChildScopeOrNull=function(data){if(this.gridOptionsWrapper.isAngularCompileRows()){var newChildScope=this.parentScope.$new();newChildScope.data=data;return newChildScope;}else {return null;}};RenderedRow.prototype.addDynamicStyles=function(){var rowStyle=this.gridOptionsWrapper.getRowStyle();if(rowStyle){if(typeof rowStyle==='function'){console.log('ag-Grid: rowStyle should be a string or an array, not be a function, use getRowStyle() instead');}else {this.vBodyRow.addStyles(rowStyle);if(this.pinningLeft){this.vPinnedLeftRow.addStyles(rowStyle);}if(this.pinningRight){this.vPinnedRightRow.addStyles(rowStyle);}}}var rowStyleFunc=this.gridOptionsWrapper.getRowStyleFunc();if(rowStyleFunc){var params={data:this.node.data,node:this.node,api:this.gridOptionsWrapper.getApi(),context:this.gridOptionsWrapper.getContext(),$scope:this.scope};var cssToUseFromFunc=rowStyleFunc(params);this.vBodyRow.addStyles(cssToUseFromFunc);if(this.pinningLeft){this.vPinnedLeftRow.addStyles(cssToUseFromFunc);}if(this.pinningRight){this.vPinnedRightRow.addStyles(cssToUseFromFunc);}}};RenderedRow.prototype.createParams=function(){var params={node:this.node,data:this.node.data,rowIndex:this.rowIndex,$scope:this.scope,context:this.gridOptionsWrapper.getContext(),api:this.gridOptionsWrapper.getApi()};return params;};RenderedRow.prototype.createEvent=function(event,eventSource){var agEvent=this.createParams();agEvent.event=event;agEvent.eventSource=eventSource;return agEvent;};RenderedRow.prototype.createRowContainer=function(){var vRow=new ag.vdom.VHtmlElement('div');var that=this;vRow.addEventListener("click",function(event){var agEvent=that.createEvent(event,this);that.eventService.dispatchEvent(grid.Events.EVENT_ROW_CLICKED,agEvent); // ctrlKey for windows, metaKey for Apple
	var multiSelectKeyPressed=event.ctrlKey||event.metaKey;that.angularGrid.onRowClicked(multiSelectKeyPressed,that.rowIndex,that.node);});vRow.addEventListener("dblclick",function(event){var agEvent=that.createEvent(event,this);that.eventService.dispatchEvent(grid.Events.EVENT_ROW_DOUBLE_CLICKED,agEvent);});return vRow;};RenderedRow.prototype.getRowNode=function(){return this.node;};RenderedRow.prototype.getRowIndex=function(){return this.rowIndex;};RenderedRow.prototype.refreshCells=function(colIds){if(!colIds){return;}var columnsToRefresh=this.columnController.getColumns(colIds);_.iterateObject(this.renderedCells,function(key,renderedCell){var colForCel=renderedCell.getColumn();if(columnsToRefresh.indexOf(colForCel)>=0){renderedCell.refreshCell();}});};RenderedRow.prototype.addDynamicClasses=function(){var classes=[];classes.push('ag-row');classes.push('ag-row-no-focus');classes.push(this.rowIndex%2==0?"ag-row-even":"ag-row-odd");if(this.selectionController.isNodeSelected(this.node)){classes.push("ag-row-selected");}if(this.node.group){classes.push("ag-row-group"); // if a group, put the level of the group in
	classes.push("ag-row-level-"+this.node.level);if(!this.node.footer&&this.node.expanded){classes.push("ag-row-group-expanded");}if(!this.node.footer&&!this.node.expanded){ // opposite of expanded is contracted according to the internet.
	classes.push("ag-row-group-contracted");}if(this.node.footer){classes.push("ag-row-footer");}}else { // if a leaf, and a parent exists, put a level of the parent, else put level of 0 for top level item
	if(this.node.parent){classes.push("ag-row-level-"+(this.node.parent.level+1));}else {classes.push("ag-row-level-0");}} // add in extra classes provided by the config
	var gridOptionsRowClass=this.gridOptionsWrapper.getRowClass();if(gridOptionsRowClass){if(typeof gridOptionsRowClass==='function'){console.warn('ag-Grid: rowClass should not be a function, please use getRowClass instead');}else {if(typeof gridOptionsRowClass==='string'){classes.push(gridOptionsRowClass);}else if(Array.isArray(gridOptionsRowClass)){gridOptionsRowClass.forEach(function(classItem){classes.push(classItem);});}}}var gridOptionsRowClassFunc=this.gridOptionsWrapper.getRowClassFunc();if(gridOptionsRowClassFunc){var params={node:this.node,data:this.node.data,rowIndex:this.rowIndex,context:this.gridOptionsWrapper.getContext(),api:this.gridOptionsWrapper.getApi()};var classToUseFromFunc=gridOptionsRowClassFunc(params);if(classToUseFromFunc){if(typeof classToUseFromFunc==='string'){classes.push(classToUseFromFunc);}else if(Array.isArray(classToUseFromFunc)){classToUseFromFunc.forEach(function(classItem){classes.push(classItem);});}}}this.vBodyRow.addClasses(classes);if(this.pinningLeft){this.vPinnedLeftRow.addClasses(classes);}if(this.pinningRight){this.vPinnedRightRow.addClasses(classes);}};return RenderedRow;}();grid.RenderedRow=RenderedRow;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path="../svgFactory.ts" />
	/// <reference path="../utils.ts" />
	/// <reference path="../constants.ts" />
	var ag;(function(ag){var grid;(function(grid){var svgFactory=grid.SvgFactory.getInstance();var utils=grid.Utils;var constants=grid.Constants;function groupCellRendererFactory(gridOptionsWrapper,selectionRendererFactory,expressionService,eventService){return function groupCellRenderer(params){var eGroupCell=document.createElement('span');var node=params.node;var cellExpandable=node.group&&!node.footer;if(cellExpandable){addExpandAndContract(eGroupCell,params);}var checkboxNeeded=params.colDef&&params.colDef.cellRenderer&&params.colDef.cellRenderer.checkbox&&!node.footer;if(checkboxNeeded){var eCheckbox=selectionRendererFactory.createSelectionCheckbox(node,params.rowIndex);eGroupCell.appendChild(eCheckbox);}if(params.colDef&&params.colDef.cellRenderer&&params.colDef.cellRenderer.innerRenderer){createFromInnerRenderer(eGroupCell,params,params.colDef.cellRenderer.innerRenderer);}else if(node.footer){createFooterCell(eGroupCell,params);}else if(node.group){createGroupCell(eGroupCell,params);}else {createLeafCell(eGroupCell,params);} // only do this if an indent - as this overwrites the padding that
	// the theme set, which will make things look 'not aligned' for the
	// first group level.
	var suppressPadding=params.colDef&&params.colDef.cellRenderer&&params.colDef.cellRenderer.suppressPadding;if(!suppressPadding&&(node.footer||node.level>0)){var paddingFactor;if(params.colDef&&params.colDef.cellRenderer&&params.colDef.cellRenderer.padding>=0){paddingFactor=params.colDef.cellRenderer.padding;}else {paddingFactor=10;}var paddingPx=node.level*paddingFactor;if(node.footer){paddingPx+=10;}else if(!node.group){paddingPx+=5;}eGroupCell.style.paddingLeft=paddingPx+'px';}return eGroupCell;};function addExpandAndContract(eGroupCell,params){var eExpandIcon=createGroupExpandIcon(true);var eContractIcon=createGroupExpandIcon(false);eGroupCell.appendChild(eExpandIcon);eGroupCell.appendChild(eContractIcon);eExpandIcon.addEventListener('click',expandOrContract);eContractIcon.addEventListener('click',expandOrContract);eGroupCell.addEventListener('dblclick',expandOrContract);showAndHideExpandAndContract(eExpandIcon,eContractIcon,params.node.expanded); // if parent cell was passed, then we can listen for when focus is on the cell,
	// and then expand / contract as the user hits enter or space-bar
	if(params.eGridCell){params.eGridCell.addEventListener('keydown',function(event){if(utils.isKeyPressed(event,constants.KEY_ENTER)){expandOrContract();event.preventDefault();}});}function expandOrContract(){expandGroup(eExpandIcon,eContractIcon,params);}}function showAndHideExpandAndContract(eExpandIcon,eContractIcon,expanded){utils.setVisible(eExpandIcon,!expanded);utils.setVisible(eContractIcon,expanded);}function createFromInnerRenderer(eGroupCell,params,renderer){utils.useRenderer(eGroupCell,renderer,params);}function getRefreshFromIndex(params){if(gridOptionsWrapper.isGroupIncludeFooter()){return params.rowIndex;}else {return params.rowIndex+1;}}function expandGroup(eExpandIcon,eContractIcon,params){params.node.expanded=!params.node.expanded;var refreshIndex=getRefreshFromIndex(params);params.api.onGroupExpandedOrCollapsed(refreshIndex);showAndHideExpandAndContract(eExpandIcon,eContractIcon,params.node.expanded);var event={node:params.node};eventService.dispatchEvent(grid.Events.EVENT_ROW_GROUP_OPENED,event);}function createGroupExpandIcon(expanded){var eIcon;if(expanded){eIcon=utils.createIcon('groupContracted',gridOptionsWrapper,null,svgFactory.createArrowRightSvg);}else {eIcon=utils.createIcon('groupExpanded',gridOptionsWrapper,null,svgFactory.createArrowDownSvg);}utils.addCssClass(eIcon,'ag-group-expand');return eIcon;} // creates cell with 'Total {{key}}' for a group
	function createFooterCell(eGroupCell,params){var footerValue;var groupName=getGroupName(params);if(params.colDef&&params.colDef.cellRenderer&&params.colDef.cellRenderer.footerValueGetter){var footerValueGetter=params.colDef.cellRenderer.footerValueGetter; // params is same as we were given, except we set the value as the item to display
	var paramsClone=utils.cloneObject(params);paramsClone.value=groupName;if(typeof footerValueGetter==='function'){footerValue=footerValueGetter(paramsClone);}else if(typeof footerValueGetter==='string'){footerValue=expressionService.evaluate(footerValueGetter,paramsClone);}else {console.warn('ag-Grid: footerValueGetter should be either a function or a string (expression)');}}else {footerValue='Total '+groupName;}var eText=document.createTextNode(footerValue);eGroupCell.appendChild(eText);}function getGroupName(params){var cellRenderer=params.colDef.cellRenderer;if(cellRenderer&&cellRenderer.keyMap&&_typeof(cellRenderer.keyMap)==='object'&&params.colDef.cellRenderer!==null){var valueFromMap=cellRenderer.keyMap[params.node.key];if(valueFromMap){return valueFromMap;}else {return params.node.key;}}else {return params.node.key;}} // creates cell with '{{key}} ({{childCount}})' for a group
	function createGroupCell(eGroupCell,params){var groupName=getGroupName(params);var colDefOfGroupedCol=params.api.getColumnDef(params.node.field);if(colDefOfGroupedCol&&typeof colDefOfGroupedCol.cellRenderer==='function'){params.value=groupName;utils.useRenderer(eGroupCell,colDefOfGroupedCol.cellRenderer,params);}else {eGroupCell.appendChild(document.createTextNode(groupName));} // only include the child count if it's included, eg if user doing custom aggregation,
	// then this could be left out, or set to -1, ie no child count
	var suppressCount=params.colDef.cellRenderer&&params.colDef.cellRenderer.suppressCount;if(!suppressCount&&params.node.allChildrenCount>=0){eGroupCell.appendChild(document.createTextNode(" ("+params.node.allChildrenCount+")"));}} // creates cell with '{{key}} ({{childCount}})' for a group
	function createLeafCell(eParent,params){if(params.value){var eText=document.createTextNode(' '+params.value);eParent.appendChild(eText);}}}grid.groupCellRendererFactory=groupCellRendererFactory;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path="../utils.ts" />
	/// <reference path="../constants.ts" />
	/// <reference path="../rowControllers/floatingRowModel.ts" />
	/// <reference path="renderedRow.ts" />
	/// <reference path="../cellRenderers/groupCellRendererFactory.ts" />
	var ag;(function(ag){var grid;(function(grid){var _=grid.Utils;var RowRenderer=function(){function RowRenderer(){this.renderedTopFloatingRows=[];this.renderedBottomFloatingRows=[];}RowRenderer.prototype.init=function(columnModel,gridOptionsWrapper,gridPanel,angularGrid,selectionRendererFactory,$compile,$scope,selectionController,expressionService,templateService,valueService,eventService,floatingRowModel){this.columnModel=columnModel;this.gridOptionsWrapper=gridOptionsWrapper;this.angularGrid=angularGrid;this.selectionRendererFactory=selectionRendererFactory;this.gridPanel=gridPanel;this.$compile=$compile;this.$scope=$scope;this.selectionController=selectionController;this.expressionService=expressionService;this.templateService=templateService;this.valueService=valueService;this.findAllElements(gridPanel);this.eventService=eventService;this.floatingRowModel=floatingRowModel;this.cellRendererMap={'group':grid.groupCellRendererFactory(gridOptionsWrapper,selectionRendererFactory,expressionService,eventService),'default':function _default(params){return params.value;}}; // map of row ids to row objects. keeps track of which elements
	// are rendered for which rows in the dom.
	this.renderedRows={};};RowRenderer.prototype.setRowModel=function(rowModel){this.rowModel=rowModel;};RowRenderer.prototype.getAllCellsForColumn=function(column){var eCells=[];_.iterateObject(this.renderedRows,callback);_.iterateObject(this.renderedBottomFloatingRows,callback);_.iterateObject(this.renderedBottomFloatingRows,callback);function callback(key,renderedRow){var eCell=renderedRow.getCellForCol(column);if(eCell){eCells.push(eCell);}}return eCells;};RowRenderer.prototype.onIndividualColumnResized=function(column){var newWidthPx=column.getActualWidth()+"px";var selectorForAllColsInCell=".cell-col-"+column.getIndex();this.eParentsOfRows.forEach(function(rowContainer){var cellsForThisCol=rowContainer.querySelectorAll(selectorForAllColsInCell);for(var i=0;i<cellsForThisCol.length;i++){var element=cellsForThisCol[i];element.style.width=newWidthPx;}});};RowRenderer.prototype.setMainRowWidths=function(){var mainRowWidth=this.columnModel.getBodyContainerWidth()+"px";this.eAllBodyContainers.forEach(function(container){var unpinnedRows=container.querySelectorAll(".ag-row");for(var i=0;i<unpinnedRows.length;i++){unpinnedRows[i].style.width=mainRowWidth;}});};RowRenderer.prototype.findAllElements=function(gridPanel){this.eBodyContainer=gridPanel.getBodyContainer();this.ePinnedLeftColsContainer=gridPanel.getPinnedLeftColsContainer();this.ePinnedRightColsContainer=gridPanel.getPinnedRightColsContainer();this.eFloatingTopContainer=gridPanel.getFloatingTopContainer();this.eFloatingTopPinnedLeftContainer=gridPanel.getPinnedLeftFloatingTop();this.eFloatingTopPinnedRightContainer=gridPanel.getPinnedRightFloatingTop();this.eFloatingBottomContainer=gridPanel.getFloatingBottomContainer();this.eFloatingBottomPinnedLeftContainer=gridPanel.getPinnedLeftFloatingBottom();this.eFloatingBottomPinnedRightContainer=gridPanel.getPinnedRightFloatingBottom();this.eBodyViewport=gridPanel.getBodyViewport();this.eParentsOfRows=gridPanel.getRowsParent();this.eAllBodyContainers=[this.eBodyContainer,this.eFloatingBottomContainer,this.eFloatingTopContainer];this.eAllPinnedLeftContainers=[this.ePinnedLeftColsContainer,this.eFloatingBottomPinnedLeftContainer,this.eFloatingTopPinnedLeftContainer];this.eAllPinnedRightContainers=[this.ePinnedRightColsContainer,this.eFloatingBottomPinnedRightContainer,this.eFloatingTopPinnedRightContainer];};RowRenderer.prototype.refreshAllFloatingRows=function(){this.refreshFloatingRows(this.renderedTopFloatingRows,this.floatingRowModel.getFloatingTopRowData(),this.eFloatingTopPinnedLeftContainer,this.eFloatingTopPinnedRightContainer,this.eFloatingTopContainer);this.refreshFloatingRows(this.renderedBottomFloatingRows,this.floatingRowModel.getFloatingBottomRowData(),this.eFloatingBottomPinnedLeftContainer,this.eFloatingBottomPinnedRightContainer,this.eFloatingBottomContainer);};RowRenderer.prototype.refreshFloatingRows=function(renderedRows,rowNodes,pinnedLeftContainer,pinnedRightContainer,bodyContainer){var _this=this;renderedRows.forEach(function(row){row.destroy();});renderedRows.length=0; // if no cols, don't draw row - can we get rid of this???
	var columns=this.columnModel.getAllDisplayedColumns();if(!columns||columns.length==0){return;} // should we be storing this somewhere???
	var mainRowWidth=this.columnModel.getBodyContainerWidth();if(rowNodes){rowNodes.forEach(function(node,rowIndex){var renderedRow=new grid.RenderedRow(_this.gridOptionsWrapper,_this.valueService,_this.$scope,_this.angularGrid,_this.columnModel,_this.expressionService,_this.cellRendererMap,_this.selectionRendererFactory,_this.$compile,_this.templateService,_this.selectionController,_this,bodyContainer,pinnedLeftContainer,pinnedRightContainer,node,rowIndex,_this.eventService);renderedRow.setMainRowWidth(mainRowWidth);renderedRows.push(renderedRow);});}};RowRenderer.prototype.refreshView=function(refreshFromIndex){if(!this.gridOptionsWrapper.isForPrint()){var containerHeight=this.rowModel.getVirtualRowCombinedHeight();this.eBodyContainer.style.height=containerHeight+"px";this.ePinnedLeftColsContainer.style.height=containerHeight+"px";this.ePinnedRightColsContainer.style.height=containerHeight+"px";}this.refreshAllVirtualRows(refreshFromIndex);this.refreshAllFloatingRows();};RowRenderer.prototype.softRefreshView=function(){_.iterateObject(this.renderedRows,function(key,renderedRow){renderedRow.softRefresh();});};RowRenderer.prototype.refreshRows=function(rowNodes){if(!rowNodes||rowNodes.length==0){return;} // we only need to be worried about rendered rows, as this method is
	// called to whats rendered. if the row isn't rendered, we don't care
	var indexesToRemove=[];_.iterateObject(this.renderedRows,function(key,renderedRow){var rowNode=renderedRow.getRowNode();if(rowNodes.indexOf(rowNode)>=0){indexesToRemove.push(key);}}); // remove the rows
	this.removeVirtualRow(indexesToRemove); // add draw them again
	this.drawVirtualRows();};RowRenderer.prototype.refreshCells=function(rowNodes,colIds){if(!rowNodes||rowNodes.length==0){return;} // we only need to be worried about rendered rows, as this method is
	// called to whats rendered. if the row isn't rendered, we don't care
	_.iterateObject(this.renderedRows,function(key,renderedRow){var rowNode=renderedRow.getRowNode();if(rowNodes.indexOf(rowNode)>=0){renderedRow.refreshCells(colIds);}});};RowRenderer.prototype.rowDataChanged=function(rows){ // we only need to be worried about rendered rows, as this method is
	// called to whats rendered. if the row isn't rendered, we don't care
	var indexesToRemove=[];var renderedRows=this.renderedRows;Object.keys(renderedRows).forEach(function(key){var renderedRow=renderedRows[key]; // see if the rendered row is in the list of rows we have to update
	if(renderedRow.isDataInList(rows)){indexesToRemove.push(key);}}); // remove the rows
	this.removeVirtualRow(indexesToRemove); // add draw them again
	this.drawVirtualRows();};RowRenderer.prototype.destroy=function(){var rowsToRemove=Object.keys(this.renderedRows);this.removeVirtualRow(rowsToRemove);};RowRenderer.prototype.refreshAllVirtualRows=function(fromIndex){ // remove all current virtual rows, as they have old data
	var rowsToRemove=Object.keys(this.renderedRows);this.removeVirtualRow(rowsToRemove,fromIndex); // add in new rows
	this.drawVirtualRows();}; // public - removes the group rows and then redraws them again
	RowRenderer.prototype.refreshGroupRows=function(){ // find all the group rows
	var rowsToRemove=[];var that=this;Object.keys(this.renderedRows).forEach(function(key){var renderedRow=that.renderedRows[key];if(renderedRow.isGroup()){rowsToRemove.push(key);}}); // remove the rows
	this.removeVirtualRow(rowsToRemove); // and draw them back again
	this.ensureRowsRendered();}; // takes array of row indexes
	RowRenderer.prototype.removeVirtualRow=function(rowsToRemove,fromIndex){var that=this; // if no fromIndex then set to -1, which will refresh everything
	var realFromIndex=typeof fromIndex==='number'?fromIndex:-1;rowsToRemove.forEach(function(indexToRemove){if(indexToRemove>=realFromIndex){that.unbindVirtualRow(indexToRemove); // if the row was last to have focus, we remove the fact that it has focus
	if(that.focusedCell&&that.focusedCell.rowIndex==indexToRemove){that.focusedCell=null;}}});};RowRenderer.prototype.unbindVirtualRow=function(indexToRemove){var renderedRow=this.renderedRows[indexToRemove];renderedRow.destroy();var event={node:renderedRow.getRowNode(),rowIndex:indexToRemove};this.eventService.dispatchEvent(grid.Events.EVENT_VIRTUAL_ROW_REMOVED,event);this.angularGrid.onVirtualRowRemoved(indexToRemove);delete this.renderedRows[indexToRemove];};RowRenderer.prototype.drawVirtualRows=function(){this.workOutFirstAndLastRowsToRender();this.ensureRowsRendered();};RowRenderer.prototype.workOutFirstAndLastRowsToRender=function(){var rowCount=this.rowModel.getVirtualRowCount();if(rowCount===0){this.firstVirtualRenderedRow=0;this.lastVirtualRenderedRow=-1; // setting to -1 means nothing in range
	return;}if(this.gridOptionsWrapper.isForPrint()){this.firstVirtualRenderedRow=0;this.lastVirtualRenderedRow=rowCount;}else {var topPixel=this.eBodyViewport.scrollTop;var bottomPixel=topPixel+this.eBodyViewport.offsetHeight;var first=this.rowModel.getRowAtPixel(topPixel);var last=this.rowModel.getRowAtPixel(bottomPixel); //add in buffer
	var buffer=this.gridOptionsWrapper.getRowBuffer();first=first-buffer;last=last+buffer; // adjust, in case buffer extended actual size
	if(first<0){first=0;}if(last>rowCount-1){last=rowCount-1;}this.firstVirtualRenderedRow=first;this.lastVirtualRenderedRow=last;}};RowRenderer.prototype.getFirstVirtualRenderedRow=function(){return this.firstVirtualRenderedRow;};RowRenderer.prototype.getLastVirtualRenderedRow=function(){return this.lastVirtualRenderedRow;};RowRenderer.prototype.ensureRowsRendered=function(){ //var start = new Date().getTime();
	var mainRowWidth=this.columnModel.getBodyContainerWidth();var that=this; // at the end, this array will contain the items we need to remove
	var rowsToRemove=Object.keys(this.renderedRows); // add in new rows
	for(var rowIndex=this.firstVirtualRenderedRow;rowIndex<=this.lastVirtualRenderedRow;rowIndex++){ // see if item already there, and if yes, take it out of the 'to remove' array
	if(rowsToRemove.indexOf(rowIndex.toString())>=0){rowsToRemove.splice(rowsToRemove.indexOf(rowIndex.toString()),1);continue;} // check this row actually exists (in case overflow buffer window exceeds real data)
	var node=this.rowModel.getVirtualRow(rowIndex);if(node){that.insertRow(node,rowIndex,mainRowWidth);}} // at this point, everything in our 'rowsToRemove' . . .
	this.removeVirtualRow(rowsToRemove); // if we are doing angular compiling, then do digest the scope here
	if(this.gridOptionsWrapper.isAngularCompileRows()){ // we do it in a timeout, in case we are already in an apply
	setTimeout(function(){that.$scope.$apply();},0);} //var end = new Date().getTime();
	//console.log(end-start);
	};RowRenderer.prototype.insertRow=function(node,rowIndex,mainRowWidth){var columns=this.columnModel.getAllDisplayedColumns(); // if no cols, don't draw row
	if(!columns||columns.length==0){return;}var renderedRow=new grid.RenderedRow(this.gridOptionsWrapper,this.valueService,this.$scope,this.angularGrid,this.columnModel,this.expressionService,this.cellRendererMap,this.selectionRendererFactory,this.$compile,this.templateService,this.selectionController,this,this.eBodyContainer,this.ePinnedLeftColsContainer,this.ePinnedRightColsContainer,node,rowIndex,this.eventService);renderedRow.setMainRowWidth(mainRowWidth);this.renderedRows[rowIndex]=renderedRow;};RowRenderer.prototype.getRenderedNodes=function(){var renderedRows=this.renderedRows;return Object.keys(renderedRows).map(function(key){return renderedRows[key].getRowNode();});};RowRenderer.prototype.getIndexOfRenderedNode=function(node){var renderedRows=this.renderedRows;var keys=Object.keys(renderedRows);for(var i=0;i<keys.length;i++){var key=keys[i];if(renderedRows[key].getRowNode()===node){return renderedRows[key].getRowIndex();}}return -1;}; // we use index for rows, but column object for columns, as the next column (by index) might not
	// be visible (header grouping) so it's not reliable, so using the column object instead.
	RowRenderer.prototype.navigateToNextCell=function(key,rowIndex,column){var cellToFocus={rowIndex:rowIndex,column:column};var renderedRow;var eCell; // we keep searching for a next cell until we find one. this is how the group rows get skipped
	while(!eCell){cellToFocus=this.getNextCellToFocus(key,cellToFocus); // no next cell means we have reached a grid boundary, eg left, right, top or bottom of grid
	if(!cellToFocus){return;} // see if the next cell is selectable, if yes, use it, if not, skip it
	renderedRow=this.renderedRows[cellToFocus.rowIndex];eCell=renderedRow.getCellForCol(cellToFocus.column);} // this scrolls the row into view
	this.gridPanel.ensureIndexVisible(renderedRow.getRowIndex()); // this changes the css on the cell
	this.focusCell(eCell,cellToFocus.rowIndex,cellToFocus.column.getIndex(),cellToFocus.column.getColDef(),true);};RowRenderer.prototype.getNextCellToFocus=function(key,lastCellToFocus){var lastRowIndex=lastCellToFocus.rowIndex;var lastColumn=lastCellToFocus.column;var nextRowToFocus;var nextColumnToFocus;switch(key){case grid.Constants.KEY_UP: // if already on top row, do nothing
	if(lastRowIndex===this.firstVirtualRenderedRow){return null;}nextRowToFocus=lastRowIndex-1;nextColumnToFocus=lastColumn;break;case grid.Constants.KEY_DOWN: // if already on bottom, do nothing
	if(lastRowIndex===this.lastVirtualRenderedRow){return null;}nextRowToFocus=lastRowIndex+1;nextColumnToFocus=lastColumn;break;case grid.Constants.KEY_RIGHT:var colToRight=this.columnModel.getDisplayedColAfter(lastColumn); // if already on right, do nothing
	if(!colToRight){return null;}nextRowToFocus=lastRowIndex;nextColumnToFocus=colToRight;break;case grid.Constants.KEY_LEFT:var colToLeft=this.columnModel.getDisplayedColBefore(lastColumn); // if already on left, do nothing
	if(!colToLeft){return null;}nextRowToFocus=lastRowIndex;nextColumnToFocus=colToLeft;break;}return {rowIndex:nextRowToFocus,column:nextColumnToFocus};};RowRenderer.prototype.onRowSelected=function(rowIndex,selected){if(this.renderedRows[rowIndex]){this.renderedRows[rowIndex].onRowSelected(selected);}}; // called by the renderedRow
	RowRenderer.prototype.focusCell=function(eCell,rowIndex,colIndex,colDef,forceBrowserFocus){ // do nothing if cell selection is off
	if(this.gridOptionsWrapper.isSuppressCellSelection()){return;}this.eParentsOfRows.forEach(function(rowContainer){ // remove any previous focus
	_.querySelectorAll_replaceCssClass(rowContainer,'.ag-cell-focus','ag-cell-focus','ag-cell-no-focus');_.querySelectorAll_replaceCssClass(rowContainer,'.ag-row-focus','ag-row-focus','ag-row-no-focus');var selectorForCell='[row="'+rowIndex+'"] [col="'+colIndex+'"]';_.querySelectorAll_replaceCssClass(rowContainer,selectorForCell,'ag-cell-no-focus','ag-cell-focus');var selectorForRow='[row="'+rowIndex+'"]';_.querySelectorAll_replaceCssClass(rowContainer,selectorForRow,'ag-row-no-focus','ag-row-focus');});this.focusedCell={rowIndex:rowIndex,colIndex:colIndex,node:this.rowModel.getVirtualRow(rowIndex),colDef:colDef}; // this puts the browser focus on the cell (so it gets key presses)
	if(forceBrowserFocus){eCell.focus();}this.eventService.dispatchEvent(grid.Events.EVENT_CELL_FOCUSED,this.focusedCell);}; // for API
	RowRenderer.prototype.getFocusedCell=function(){return this.focusedCell;}; // called via API
	RowRenderer.prototype.setFocusedCell=function(rowIndex,colIndex){var renderedRow=this.renderedRows[rowIndex];var column=this.columnModel.getAllDisplayedColumns()[colIndex];if(renderedRow&&column){var eCell=renderedRow.getCellForCol(column);this.focusCell(eCell,rowIndex,colIndex,column.getColDef(),true);}}; // called by the cell, when tab is pressed while editing
	RowRenderer.prototype.startEditingNextCell=function(rowIndex,column,shiftKey){var firstRowToCheck=this.firstVirtualRenderedRow;var lastRowToCheck=this.lastVirtualRenderedRow;var currentRowIndex=rowIndex;var visibleColumns=this.columnModel.getAllDisplayedColumns();var currentCol=column;while(true){var indexOfCurrentCol=visibleColumns.indexOf(currentCol); // move backward
	if(shiftKey){ // move along to the previous cell
	currentCol=visibleColumns[indexOfCurrentCol-1]; // check if end of the row, and if so, go back a row
	if(!currentCol){currentCol=visibleColumns[visibleColumns.length-1];currentRowIndex--;} // if got to end of rendered rows, then quit looking
	if(currentRowIndex<firstRowToCheck){return;}}else { // move along to the next cell
	currentCol=visibleColumns[indexOfCurrentCol+1]; // check if end of the row, and if so, go forward a row
	if(!currentCol){currentCol=visibleColumns[0];currentRowIndex++;} // if got to end of rendered rows, then quit looking
	if(currentRowIndex>lastRowToCheck){return;}}var nextRenderedRow=this.renderedRows[currentRowIndex];var nextRenderedCell=nextRenderedRow.getRenderedCellForColumn(currentCol);if(nextRenderedCell.isCellEditable()){nextRenderedCell.startEditing();nextRenderedCell.focusCell(false);return;}}};return RowRenderer;}();grid.RowRenderer=RowRenderer;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path="utils.ts" />
	/// <reference path="rendering/rowRenderer.ts" />
	var ag;(function(ag){var grid;(function(grid){var utils=grid.Utils; // these constants are used for determining if groups should
	// be selected or deselected when selecting groups, and the group
	// then selects the children.
	var SELECTED=0;var UNSELECTED=1;var MIXED=2;var DO_NOT_CARE=3;var SelectionController=function(){function SelectionController(){}SelectionController.prototype.init=function(angularGrid,gridPanel,gridOptionsWrapper,$scope,rowRenderer,eventService){this.eParentsOfRows=gridPanel.getRowsParent();this.angularGrid=angularGrid;this.gridOptionsWrapper=gridOptionsWrapper;this.$scope=$scope;this.rowRenderer=rowRenderer;this.eventService=eventService;this.initSelectedNodesById();this.selectedRows=[];};SelectionController.prototype.initSelectedNodesById=function(){this.selectedNodesById={};};SelectionController.prototype.getSelectedNodesById=function(){return this.selectedNodesById;};SelectionController.prototype.getSelectedRows=function(){return this.selectedRows;};SelectionController.prototype.getSelectedNodes=function(){var selectedNodes=[];var keys=Object.keys(this.selectedNodesById);for(var i=0;i<keys.length;i++){var id=keys[i];var selectedNode=this.selectedNodesById[id];selectedNodes.push(selectedNode);}return selectedNodes;}; // returns a list of all nodes at 'best cost' - a feature to be used
	// with groups / trees. if a group has all it's children selected,
	// then the group appears in the result, but not the children.
	// Designed for use with 'children' as the group selection type,
	// where groups don't actually appear in the selection normally.
	SelectionController.prototype.getBestCostNodeSelection=function(){if(typeof this.rowModel.getTopLevelNodes!=='function'){throw 'selectAll not available when rows are on the server';}var topLevelNodes=this.rowModel.getTopLevelNodes();var result=[];var that=this; // recursive function, to find the selected nodes
	function traverse(nodes){for(var i=0,l=nodes.length;i<l;i++){var node=nodes[i];if(that.isNodeSelected(node)){result.push(node);}else { // if not selected, then if it's a group, and the group
	// has children, continue to search for selections
	if(node.group&&node.children){traverse(node.children);}}}}traverse(topLevelNodes);return result;};SelectionController.prototype.setRowModel=function(rowModel){this.rowModel=rowModel;}; // this clears the selection, but doesn't clear down the css - when it is called, the
	// caller then gets the grid to refresh.
	SelectionController.prototype.deselectAll=function(){this.initSelectedNodesById(); //var keys = Object.keys(this.selectedNodesById);
	//for (var i = 0; i < keys.length; i++) {
	//    delete this.selectedNodesById[keys[i]];
	//}
	this.syncSelectedRowsAndCallListener();}; // this selects everything, but doesn't clear down the css - when it is called, the
	// caller then gets the grid to refresh.
	SelectionController.prototype.selectAll=function(){if(typeof this.rowModel.getTopLevelNodes!=='function'){throw 'selectAll not available when rows are on the server';}var selectedNodesById=this.selectedNodesById; // if the selection is "don't include groups", then we don't include them!
	var includeGroups=!this.gridOptionsWrapper.isGroupSelectsChildren();function recursivelySelect(nodes){if(nodes){for(var i=0;i<nodes.length;i++){var node=nodes[i];if(node.group){recursivelySelect(node.children);if(includeGroups){selectedNodesById[node.id]=node;}}else {selectedNodesById[node.id]=node;}}}}var topLevelNodes=this.rowModel.getTopLevelNodes();recursivelySelect(topLevelNodes);this.syncSelectedRowsAndCallListener();};SelectionController.prototype.selectNode=function(node,tryMulti,suppressEvents){var multiSelect=this.gridOptionsWrapper.isRowSelectionMulti()&&tryMulti; // if the node is a group, then selecting this is the same as selecting the parent,
	// so to have only one flow through the below, we always select the header parent
	// (which then has the side effect of selecting the child).
	var nodeToSelect;if(node.footer){nodeToSelect=node.sibling;}else {nodeToSelect=node;} // at the end, if this is true, we inform the callback
	var atLeastOneItemUnselected=false;var atLeastOneItemSelected=false; // see if rows to be deselected
	if(!multiSelect){atLeastOneItemUnselected=this.doWorkOfDeselectAllNodes(null,suppressEvents);}if(this.gridOptionsWrapper.isGroupSelectsChildren()&&nodeToSelect.group){ // don't select the group, select the children instead
	atLeastOneItemSelected=this.recursivelySelectAllChildren(nodeToSelect);}else { // see if row needs to be selected
	atLeastOneItemSelected=this.doWorkOfSelectNode(nodeToSelect,suppressEvents);}if(atLeastOneItemUnselected||atLeastOneItemSelected){this.syncSelectedRowsAndCallListener(suppressEvents);}this.updateGroupParentsIfNeeded();};SelectionController.prototype.recursivelySelectAllChildren=function(node,suppressEvents){var atLeastOne=false;if(node.children){for(var i=0;i<node.children.length;i++){var child=node.children[i];if(child.group){if(this.recursivelySelectAllChildren(child)){atLeastOne=true;}}else {if(this.doWorkOfSelectNode(child,suppressEvents)){atLeastOne=true;}}}}return atLeastOne;};SelectionController.prototype.recursivelyDeselectAllChildren=function(node,suppressEvents){if(node.children){for(var i=0;i<node.children.length;i++){var child=node.children[i];if(child.group){this.recursivelyDeselectAllChildren(child,suppressEvents);}else {this.deselectRealNode(child,suppressEvents);}}}}; // 1 - selects a node
	// 2 - updates the UI
	// 3 - calls callbacks
	SelectionController.prototype.doWorkOfSelectNode=function(node,suppressEvents){if(this.selectedNodesById[node.id]){return false;}this.selectedNodesById[node.id]=node;this.addCssClassForNode_andInformVirtualRowListener(node); // also color in the footer if there is one
	if(node.group&&node.expanded&&node.sibling){this.addCssClassForNode_andInformVirtualRowListener(node.sibling);} // inform the rowSelected listener, if any
	if(!suppressEvents){var event={node:node};this.eventService.dispatchEvent(grid.Events.EVENT_ROW_SELECTED,event);}return true;}; // 1 - selects a node
	// 2 - updates the UI
	// 3 - calls callbacks
	// wow - what a big name for a method, exception case, it's saying what the method does
	SelectionController.prototype.addCssClassForNode_andInformVirtualRowListener=function(node){var virtualRenderedRowIndex=this.rowRenderer.getIndexOfRenderedNode(node);if(virtualRenderedRowIndex>=0){this.eParentsOfRows.forEach(function(rowContainer){utils.querySelectorAll_addCssClass(rowContainer,'[row="'+virtualRenderedRowIndex+'"]','ag-row-selected');}); // inform virtual row listener
	this.angularGrid.onVirtualRowSelected(virtualRenderedRowIndex,true);}}; // 1 - un-selects a node
	// 2 - updates the UI
	// 3 - calls callbacks
	SelectionController.prototype.doWorkOfDeselectAllNodes=function(nodeToKeepSelected,suppressEvents){ // not doing multi-select, so deselect everything other than the 'just selected' row
	var atLeastOneSelectionChange;var selectedNodeKeys=Object.keys(this.selectedNodesById);for(var i=0;i<selectedNodeKeys.length;i++){ // skip the 'just selected' row
	var key=selectedNodeKeys[i];var nodeToDeselect=this.selectedNodesById[key];if(nodeToDeselect===nodeToKeepSelected){continue;}else {this.deselectRealNode(nodeToDeselect,suppressEvents);atLeastOneSelectionChange=true;}}return atLeastOneSelectionChange;};SelectionController.prototype.deselectRealNode=function(node,suppressEvents){ // deselect the css
	this.removeCssClassForNode(node); // if node is a header, and if it has a sibling footer, deselect the footer also
	if(node.group&&node.expanded&&node.sibling){this.removeCssClassForNode(node.sibling);} // remove the row
	delete this.selectedNodesById[node.id];if(!suppressEvents){var event={node:node};this.eventService.dispatchEvent(grid.Events.EVENT_ROW_DESELECTED,event);}};SelectionController.prototype.removeCssClassForNode=function(node){var virtualRenderedRowIndex=this.rowRenderer.getIndexOfRenderedNode(node);if(virtualRenderedRowIndex>=0){this.eParentsOfRows.forEach(function(rowContainer){utils.querySelectorAll_removeCssClass(rowContainer,'[row="'+virtualRenderedRowIndex+'"]','ag-row-selected');}); // inform virtual row listener
	this.angularGrid.onVirtualRowSelected(virtualRenderedRowIndex,false);}}; // used by selectionRendererFactory
	SelectionController.prototype.deselectIndex=function(rowIndex,suppressEvents){if(suppressEvents===void 0){suppressEvents=false;}var node=this.rowModel.getVirtualRow(rowIndex);this.deselectNode(node,suppressEvents);}; // used by api
	SelectionController.prototype.deselectNode=function(node,suppressEvents){if(suppressEvents===void 0){suppressEvents=false;}if(node){if(this.gridOptionsWrapper.isGroupSelectsChildren()&&node.group){ // want to deselect children, not this node, so recursively deselect
	this.recursivelyDeselectAllChildren(node,suppressEvents);}else {this.deselectRealNode(node,suppressEvents);}}this.syncSelectedRowsAndCallListener();this.updateGroupParentsIfNeeded();}; // used by selectionRendererFactory & api
	SelectionController.prototype.selectIndex=function(index,tryMulti,suppressEvents){if(suppressEvents===void 0){suppressEvents=false;}var node=this.rowModel.getVirtualRow(index);this.selectNode(node,tryMulti,suppressEvents);}; // updates the selectedRows with the selectedNodes and calls selectionChanged listener
	SelectionController.prototype.syncSelectedRowsAndCallListener=function(suppressEvents){ // update selected rows
	var selectedRows=this.selectedRows;var oldCount=selectedRows.length; // clear selected rows
	selectedRows.length=0;var keys=Object.keys(this.selectedNodesById);for(var i=0;i<keys.length;i++){if(this.selectedNodesById[keys[i]]!==undefined){var selectedNode=this.selectedNodesById[keys[i]];selectedRows.push(selectedNode.data);}} // this stop the event firing the very first the time grid is initialised. without this, the documentation
	// page had a popup in the 'selection' page as soon as the page was loaded!!
	var nothingChangedMustBeInitialising=oldCount===0&&selectedRows.length===0;if(!nothingChangedMustBeInitialising&&!suppressEvents){var event={selectedNodesById:this.selectedNodesById,selectedRows:this.selectedRows};this.eventService.dispatchEvent(grid.Events.EVENT_SELECTION_CHANGED,event);}var that=this;if(this.$scope){setTimeout(function(){that.$scope.$apply();},0);}};SelectionController.prototype.recursivelyCheckIfSelected=function(node){var foundSelected=false;var foundUnselected=false;if(node.children){for(var i=0;i<node.children.length;i++){var child=node.children[i];var result;if(child.group){result=this.recursivelyCheckIfSelected(child);switch(result){case SELECTED:foundSelected=true;break;case UNSELECTED:foundUnselected=true;break;case MIXED:foundSelected=true;foundUnselected=true;break;}}else {if(this.isNodeSelected(child)){foundSelected=true;}else {foundUnselected=true;}}if(foundSelected&&foundUnselected){ // if mixed, then no need to go further, just return up the chain
	return MIXED;}}} // got this far, so no conflicts, either all children selected, unselected, or neither
	if(foundSelected){return SELECTED;}else if(foundUnselected){return UNSELECTED;}else {return DO_NOT_CARE;}}; // used by selectionRendererFactory
	// returns:
	// true: if selected
	// false: if unselected
	// undefined: if it's a group and 'children selection' is used and 'children' are a mix of selected and unselected
	SelectionController.prototype.isNodeSelected=function(node){if(this.gridOptionsWrapper.isGroupSelectsChildren()&&node.group){ // doing child selection, we need to traverse the children
	var resultOfChildren=this.recursivelyCheckIfSelected(node);switch(resultOfChildren){case SELECTED:return true;case UNSELECTED:return false;default:return undefined;}}else {return this.selectedNodesById[node.id]!==undefined;}};SelectionController.prototype.updateGroupParentsIfNeeded=function(){ // we only do this if parent nodes are responsible
	// for selecting their children.
	if(!this.gridOptionsWrapper.isGroupSelectsChildren()){return;}var firstRow=this.rowRenderer.getFirstVirtualRenderedRow();var lastRow=this.rowRenderer.getLastVirtualRenderedRow();for(var rowIndex=firstRow;rowIndex<=lastRow;rowIndex++){ // see if node is a group
	var node=this.rowModel.getVirtualRow(rowIndex);if(node.group){var selected=this.isNodeSelected(node);this.angularGrid.onVirtualRowSelected(rowIndex,selected);this.eParentsOfRows.forEach(function(rowContainer){if(selected){utils.querySelectorAll_addCssClass(rowContainer,'[row="'+rowIndex+'"]','ag-row-selected');}else {utils.querySelectorAll_removeCssClass(rowContainer,'[row="'+rowIndex+'"]','ag-row-selected');}});}}};return SelectionController;}();grid.SelectionController=SelectionController;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={}));var ag;(function(ag){var grid;(function(grid){var _=grid.Utils;var RenderedHeaderElement=function(){function RenderedHeaderElement(eRoot){this.eRoot=eRoot;} // methods implemented by the base classes
	RenderedHeaderElement.prototype.destroy=function(){};RenderedHeaderElement.prototype.refreshFilterIcon=function(){};RenderedHeaderElement.prototype.refreshSortIcon=function(){};RenderedHeaderElement.prototype.onDragStart=function(){};RenderedHeaderElement.prototype.onDragging=function(dragChange,finished){};RenderedHeaderElement.prototype.onIndividualColumnResized=function(column){};RenderedHeaderElement.prototype.getGui=function(){return null;};RenderedHeaderElement.prototype.addDragHandler=function(eDraggableElement){var that=this;eDraggableElement.addEventListener('mousedown',function(downEvent){that.onDragStart();that.eRoot.style.cursor="col-resize";that.dragStartX=downEvent.clientX;var listenersToRemove={};var lastDelta=0;listenersToRemove.mousemove=function(moveEvent){var newX=moveEvent.clientX;lastDelta=newX-that.dragStartX;that.onDragging(lastDelta,false);};listenersToRemove.mouseup=function(){that.stopDragging(listenersToRemove,lastDelta);};listenersToRemove.mouseleave=function(){that.stopDragging(listenersToRemove,lastDelta);};that.eRoot.addEventListener('mousemove',listenersToRemove.mousemove);that.eRoot.addEventListener('mouseup',listenersToRemove.mouseup);that.eRoot.addEventListener('mouseleave',listenersToRemove.mouseleave);});};RenderedHeaderElement.prototype.stopDragging=function(listenersToRemove,dragChange){this.eRoot.style.cursor="";var that=this;_.iterateObject(listenersToRemove,function(key,listener){that.eRoot.removeEventListener(key,listener);});that.onDragging(dragChange,true);};return RenderedHeaderElement;}();grid.RenderedHeaderElement=RenderedHeaderElement;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path='../utils.ts' />
	/// <reference path='../filter/filterManager.ts' />
	/// <reference path='../gridOptionsWrapper.ts' />
	/// <reference path='../columnController/columnController.ts' />
	/// <reference path='renderedHeaderElement.ts' />
	/// <reference path='headerTemplateLoader.ts' />
	var ag;(function(ag){var grid;(function(grid){var _=grid.Utils;var RenderedHeaderCell=function(_super){__extends(RenderedHeaderCell,_super);function RenderedHeaderCell(column,parentGroup,gridOptionsWrapper,parentScope,filterManager,columnController,$compile,angularGrid,eRoot,headerTemplateLoader){_super.call(this,eRoot);this.column=column;this.parentGroup=parentGroup;this.gridOptionsWrapper=gridOptionsWrapper;this.parentScope=parentScope;this.filterManager=filterManager;this.columnController=columnController;this.$compile=$compile;this.grid=angularGrid;this.headerTemplateLoader=headerTemplateLoader;this.setupComponents();}RenderedHeaderCell.prototype.getGui=function(){return this.eHeaderCell;};RenderedHeaderCell.prototype.destroy=function(){if(this.childScope){this.childScope.$destroy();}};RenderedHeaderCell.prototype.createScope=function(){if(this.gridOptionsWrapper.isAngularCompileHeaders()){this.childScope=this.parentScope.$new();this.childScope.colDef=this.column.getColDef();this.childScope.colIndex=this.column.getIndex();this.childScope.colDefWrapper=this.column;}};RenderedHeaderCell.prototype.addAttributes=function(){this.eHeaderCell.setAttribute("col",this.column.getIndex()!==undefined&&this.column.getIndex()!==null?this.column.getIndex().toString():'');this.eHeaderCell.setAttribute("colId",this.column.getColId());};RenderedHeaderCell.prototype.addMenu=function(){var eMenu=this.eHeaderCell.querySelector('#agMenu'); // if no menu provided in template, do nothing
	if(!eMenu){return;}var weWantMenu=this.gridOptionsWrapper.isEnableFilter()&&!this.column.getColDef().suppressMenu;if(!weWantMenu){_.removeFromParent(eMenu);return;}var that=this;eMenu.addEventListener('click',function(){that.filterManager.showFilter(that.column,this);});if(!this.gridOptionsWrapper.isSuppressMenuHide()){eMenu.style.opacity='0';this.eHeaderCell.addEventListener('mouseenter',function(){eMenu.style.opacity='1';});this.eHeaderCell.addEventListener('mouseleave',function(){eMenu.style.opacity='0';});}var style=eMenu.style;style['transition']='opacity 0.5s, border 0.2s';style['-webkit-transition']='opacity 0.5s, border 0.2s';};RenderedHeaderCell.prototype.removeSortIcons=function(){_.removeFromParent(this.eHeaderCell.querySelector('#agSortAsc'));_.removeFromParent(this.eHeaderCell.querySelector('#agSortDesc'));_.removeFromParent(this.eHeaderCell.querySelector('#agNoSort'));};RenderedHeaderCell.prototype.addSortIcons=function(){this.eSortAsc=this.eHeaderCell.querySelector('#agSortAsc');this.eSortDesc=this.eHeaderCell.querySelector('#agSortDesc');this.eSortNone=this.eHeaderCell.querySelector('#agNoSort');if(this.eSortAsc){this.eSortAsc.style.display='none';}if(this.eSortDesc){this.eSortDesc.style.display='none';}var showingNoSortIcon=this.column.getColDef().unSortIcon||this.gridOptionsWrapper.isUnSortIcon(); // 'no sort' icon
	if(!showingNoSortIcon){_.removeFromParent(this.eSortNone);}};RenderedHeaderCell.prototype.setupComponents=function(){this.eHeaderCell=this.headerTemplateLoader.createHeaderElement(this.column);_.addCssClass(this.eHeaderCell,'ag-header-cell');this.createScope();this.addAttributes();this.addHeaderClassesFromCollDef();var colDef=this.column.getColDef(); // add tooltip if exists
	if(colDef.headerTooltip){this.eHeaderCell.title=colDef.headerTooltip;}this.addResize();this.addMenu(); // label div
	this.eText=this.eHeaderCell.querySelector('#agText'); // add in sort icons
	this.addSort(); // add in filter icon
	this.eFilterIcon=this.eHeaderCell.querySelector('#agFilter'); // render the cell, use a renderer if one is provided
	var headerCellRenderer;if(colDef.headerCellRenderer){headerCellRenderer=colDef.headerCellRenderer;}else if(this.gridOptionsWrapper.getHeaderCellRenderer()){headerCellRenderer=this.gridOptionsWrapper.getHeaderCellRenderer();}var headerNameValue=this.columnController.getDisplayNameForCol(this.column);if(this.eText){if(headerCellRenderer){this.useRenderer(headerNameValue,headerCellRenderer);}else { // no renderer, default text render
	this.eText.className='ag-header-cell-text';this.eText.innerHTML=headerNameValue;}}this.eHeaderCell.style.width=_.formatWidth(this.column.getActualWidth());this.refreshFilterIcon();this.refreshSortIcon();};RenderedHeaderCell.prototype.addSort=function(){var enableSorting=this.gridOptionsWrapper.isEnableSorting()&&!this.column.getColDef().suppressSorting;if(enableSorting){this.addSortIcons();this.addSortHandling();}else {this.removeSortIcons();}};RenderedHeaderCell.prototype.addResize=function(){var _this=this;var colDef=this.column.getColDef();var eResize=this.eHeaderCell.querySelector('#agResizeBar'); // if no eResize in template, do nothing
	if(!eResize){return;}var weWantResize=this.gridOptionsWrapper.isEnableColResize()&&!colDef.suppressResize;if(!weWantResize){_.removeFromParent(eResize);return;}this.addDragHandler(eResize);var weWantAutoSize=!this.gridOptionsWrapper.isSuppressAutoSize()&&!colDef.suppressAutoSize;if(weWantAutoSize){eResize.addEventListener('dblclick',function(event){_this.columnController.autoSizeColumn(_this.column);});}};RenderedHeaderCell.prototype.useRenderer=function(headerNameValue,headerCellRenderer){ // renderer provided, use it
	var cellRendererParams={colDef:this.column.getColDef(),$scope:this.childScope,context:this.gridOptionsWrapper.getContext(),value:headerNameValue,api:this.gridOptionsWrapper.getApi(),eHeaderCell:this.eHeaderCell};var cellRendererResult=headerCellRenderer(cellRendererParams);var childToAppend;if(_.isNodeOrElement(cellRendererResult)){ // a dom node or element was returned, so add child
	childToAppend=cellRendererResult;}else { // otherwise assume it was html, so just insert
	var eTextSpan=document.createElement("span");eTextSpan.innerHTML=cellRendererResult;childToAppend=eTextSpan;} // angular compile header if option is turned on
	if(this.gridOptionsWrapper.isAngularCompileHeaders()){var childToAppendCompiled=this.$compile(childToAppend)(this.childScope)[0];this.eText.appendChild(childToAppendCompiled);}else {this.eText.appendChild(childToAppend);}};RenderedHeaderCell.prototype.refreshFilterIcon=function(){var filterPresent=this.filterManager.isFilterPresentForCol(this.column.getColId());if(this.eFilterIcon){_.addOrRemoveCssClass(this.eHeaderCell,'ag-header-cell-filtered',filterPresent);this.eFilterIcon.style.display=filterPresent?'inline':'none';}};RenderedHeaderCell.prototype.refreshSortIcon=function(){ // update visibility of icons
	var sortAscending=this.column.getSort()===grid.Column.SORT_ASC;var sortDescending=this.column.getSort()===grid.Column.SORT_DESC;var sortNone=this.column.getSort()!==grid.Column.SORT_DESC&&this.column.getSort()!==grid.Column.SORT_ASC;if(this.eSortAsc){_.setVisible(this.eSortAsc,sortAscending);}if(this.eSortDesc){_.setVisible(this.eSortDesc,sortDescending);}if(this.eSortNone){_.setVisible(this.eSortNone,sortNone);}_.addOrRemoveCssClass(this.eHeaderCell,'ag-header-cell-sorted-asc',sortAscending);_.addOrRemoveCssClass(this.eHeaderCell,'ag-header-cell-sorted-desc',sortDescending);_.addOrRemoveCssClass(this.eHeaderCell,'ag-header-cell-sorted-none',sortNone);};RenderedHeaderCell.prototype.getNextSortDirection=function(){var sortingOrder;if(this.column.getColDef().sortingOrder){sortingOrder=this.column.getColDef().sortingOrder;}else if(this.gridOptionsWrapper.getSortingOrder()){sortingOrder=this.gridOptionsWrapper.getSortingOrder();}else {sortingOrder=RenderedHeaderCell.DEFAULT_SORTING_ORDER;}if(!Array.isArray(sortingOrder)||sortingOrder.length<=0){console.warn('ag-grid: sortingOrder must be an array with at least one element, currently it\'s '+sortingOrder);return;}var currentIndex=sortingOrder.indexOf(this.column.getSort());var notInArray=currentIndex<0;var lastItemInArray=currentIndex==sortingOrder.length-1;var result;if(notInArray||lastItemInArray){result=sortingOrder[0];}else {result=sortingOrder[currentIndex+1];} // verify the sort type exists, as the user could provide the sortOrder, need to make sure it's valid
	if(RenderedHeaderCell.DEFAULT_SORTING_ORDER.indexOf(result)<0){console.warn('ag-grid: invalid sort type '+result);return null;}return result;};RenderedHeaderCell.prototype.addSortHandling=function(){var _this=this;this.eText.addEventListener("click",function(event){ // update sort on current col
	_this.column.setSort(_this.getNextSortDirection()); // sortedAt used for knowing order of cols when multi-col sort
	if(_this.column.getSort()){_this.column.setSortedAt(new Date().valueOf());}else {_this.column.setSortedAt(null);}var doingMultiSort=!_this.gridOptionsWrapper.isSuppressMultiSort()&&event.shiftKey; // clear sort on all columns except this one, and update the icons
	if(!doingMultiSort){_this.columnController.getAllColumns().forEach(function(columnToClear){ // Do not clear if either holding shift, or if column in question was clicked
	if(!(columnToClear===_this.column)){columnToClear.sort=null;}});}_this.grid.onSortingChanged();});};RenderedHeaderCell.prototype.onDragStart=function(){this.startWidth=this.column.getActualWidth();};RenderedHeaderCell.prototype.onDragging=function(dragChange,finished){var newWidth=this.startWidth+dragChange;this.columnController.setColumnWidth(this.column,newWidth,finished);};RenderedHeaderCell.prototype.onIndividualColumnResized=function(column){if(this.column!==column){return;}var newWidthPx=column.getActualWidth()+"px";this.eHeaderCell.style.width=newWidthPx;};RenderedHeaderCell.prototype.addHeaderClassesFromCollDef=function(){var _this=this;if(this.column.getColDef().headerClass){var classToUse;if(typeof this.column.getColDef().headerClass==='function'){var params={colDef:this.column.getColDef(),$scope:this.childScope,context:this.gridOptionsWrapper.getContext(),api:this.gridOptionsWrapper.getApi()};var headerClassFunc=this.column.getColDef().headerClass;classToUse=headerClassFunc(params);}else {classToUse=this.column.getColDef().headerClass;}if(typeof classToUse==='string'){_.addCssClass(this.eHeaderCell,classToUse);}else if(Array.isArray(classToUse)){classToUse.forEach(function(cssClassItem){_.addCssClass(_this.eHeaderCell,cssClassItem);});}}};RenderedHeaderCell.DEFAULT_SORTING_ORDER=[grid.Column.SORT_ASC,grid.Column.SORT_DESC,null];return RenderedHeaderCell;}(grid.RenderedHeaderElement);grid.RenderedHeaderCell=RenderedHeaderCell;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path='../utils.ts' />
	/// <reference path='renderedHeaderCell.ts' />
	/// <reference path='renderedHeaderElement.ts' />
	var ag;(function(ag){var grid;(function(grid){var _=grid.Utils;var constants=grid.Constants;var svgFactory=grid.SvgFactory.getInstance();var RenderedHeaderGroupCell=function(_super){__extends(RenderedHeaderGroupCell,_super);function RenderedHeaderGroupCell(columnGroup,gridOptionsWrapper,columnController,eRoot,angularGrid,parentScope,filterManager,$compile){_super.call(this,eRoot);this.columnController=columnController;this.columnGroup=columnGroup;this.gridOptionsWrapper=gridOptionsWrapper;this.parentScope=parentScope;this.filterManager=filterManager;this.$compile=$compile;this.angularGrid=angularGrid;this.setupComponents();}RenderedHeaderGroupCell.prototype.getGui=function(){return this.eHeaderGroupCell;};RenderedHeaderGroupCell.prototype.onIndividualColumnResized=function(column){if(this.columnGroup.isChildInThisGroupDeepSearch(column)){this.setWidthOfGroupHeaderCell();}};RenderedHeaderGroupCell.prototype.setupComponents=function(){var _this=this;this.eHeaderGroupCell=document.createElement('div');var classNames=['ag-header-group-cell']; // having different classes below allows the style to not have a bottom border
	// on the group header, if no group is specified
	if(this.columnGroup.getColGroupDef()){classNames.push('ag-header-group-cell-with-group');}else {classNames.push('ag-header-group-cell-no-group');}this.eHeaderGroupCell.className=classNames.join(' ');this.eHeaderGroupCell.style.height=this.gridOptionsWrapper.getHeaderHeight()+'px';if(this.gridOptionsWrapper.isEnableColResize()){this.eHeaderCellResize=document.createElement("div");this.eHeaderCellResize.className="ag-header-cell-resize";this.eHeaderGroupCell.appendChild(this.eHeaderCellResize);this.addDragHandler(this.eHeaderCellResize);if(!this.gridOptionsWrapper.isSuppressAutoSize()){this.eHeaderCellResize.addEventListener('dblclick',function(event){ // get list of all the column keys we are responsible for
	var keys=[];_this.columnGroup.getDisplayedLeafColumns().forEach(function(column){ // not all cols in the group may be participating with auto-resize
	if(!column.getColDef().suppressAutoSize){keys.push(column.getColId());}});if(keys.length>0){_this.columnController.autoSizeColumns(keys);}});}} // no renderer, default text render
	var groupName=this.columnGroup.getHeaderName();if(groupName&&groupName!==''){var eGroupCellLabel=document.createElement("div");eGroupCellLabel.className='ag-header-group-cell-label';this.eHeaderGroupCell.appendChild(eGroupCellLabel);var eInnerText=document.createElement("span");eInnerText.className='ag-header-group-text';eInnerText.innerHTML=groupName;eGroupCellLabel.appendChild(eInnerText);if(this.columnGroup.isExpandable()){this.addGroupExpandIcon(eGroupCellLabel);}}this.setWidthOfGroupHeaderCell();};RenderedHeaderGroupCell.prototype.setWidthOfGroupHeaderCell=function(){this.eHeaderGroupCell.style.width=_.formatWidth(this.columnGroup.getActualWidth());};RenderedHeaderGroupCell.prototype.addGroupExpandIcon=function(eGroupCellLabel){var eGroupIcon;if(this.columnGroup.isExpanded()){eGroupIcon=_.createIcon('columnGroupOpened',this.gridOptionsWrapper,null,svgFactory.createArrowLeftSvg);}else {eGroupIcon=_.createIcon('columnGroupClosed',this.gridOptionsWrapper,null,svgFactory.createArrowRightSvg);}eGroupIcon.className='ag-header-expand-icon';eGroupCellLabel.appendChild(eGroupIcon);var that=this;eGroupIcon.onclick=function(){var newExpandedValue=!that.columnGroup.isExpanded();that.columnController.setColumnGroupOpened(that.columnGroup,newExpandedValue);};};RenderedHeaderGroupCell.prototype.onDragStart=function(){var _this=this;this.groupWidthStart=this.columnGroup.getActualWidth();this.childrenWidthStarts=[];this.columnGroup.getDisplayedLeafColumns().forEach(function(column){_this.childrenWidthStarts.push(column.getActualWidth());});};RenderedHeaderGroupCell.prototype.onDragging=function(dragChange,finished){var _this=this;var newWidth=this.groupWidthStart+dragChange;var minWidth=this.columnGroup.getMinimumWidth();if(newWidth<minWidth){newWidth=minWidth;} // set the new width to the group header
	//var newWidthPx = newWidth + "px";
	//this.eHeaderGroupCell.style.width = newWidthPx;
	//this.columnGroup.actualWidth = newWidth;
	// distribute the new width to the child headers
	var changeRatio=newWidth/this.groupWidthStart; // keep track of pixels used, and last column gets the remaining,
	// to cater for rounding errors, and min width adjustments
	var pixelsToDistribute=newWidth;var displayedColumns=this.columnGroup.getDisplayedLeafColumns();displayedColumns.forEach(function(column,index){var notLastCol=index!==displayedColumns.length-1;var newChildSize;if(notLastCol){ // if not the last col, calculate the column width as normal
	var startChildSize=_this.childrenWidthStarts[index];newChildSize=startChildSize*changeRatio;if(newChildSize<column.getMinimumWidth()){newChildSize=column.getMinimumWidth();}pixelsToDistribute-=newChildSize;}else { // if last col, give it the remaining pixels
	newChildSize=pixelsToDistribute;}_this.columnController.setColumnWidth(column,newChildSize,finished);});};return RenderedHeaderGroupCell;}(grid.RenderedHeaderElement);grid.RenderedHeaderGroupCell=RenderedHeaderGroupCell;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path="../utils.ts" />
	/// <reference path="../constants.ts" />
	/// <reference path="../svgFactory.ts" />
	/// <reference path="../headerRendering/renderedHeaderElement.ts" />
	/// <reference path="../headerRendering/renderedHeaderCell.ts" />
	/// <reference path="../headerRendering/renderedHeaderGroupCell.ts" />
	var ag;(function(ag){var grid;(function(grid){var utils=grid.Utils;var HeaderRenderer=function(){function HeaderRenderer(){this.headerElements=[];}HeaderRenderer.prototype.init=function(gridOptionsWrapper,columnController,gridPanel,angularGrid,filterManager,$scope,$compile,headerTemplateLoader){this.gridOptionsWrapper=gridOptionsWrapper;this.columnController=columnController;this.angularGrid=angularGrid;this.filterManager=filterManager;this.$scope=$scope;this.$compile=$compile;this.headerTemplateLoader=headerTemplateLoader;this.findAllElements(gridPanel);};HeaderRenderer.prototype.findAllElements=function(gridPanel){this.ePinnedLeftHeader=gridPanel.getPinnedLeftHeader();this.ePinnedRightHeader=gridPanel.getPinnedRightHeader();this.eHeaderContainer=gridPanel.getHeaderContainer();this.eHeaderViewport=gridPanel.getHeaderViewport();this.eRoot=gridPanel.getRoot();};HeaderRenderer.prototype.refreshHeader=function(){utils.removeAllChildren(this.ePinnedLeftHeader);utils.removeAllChildren(this.ePinnedRightHeader);utils.removeAllChildren(this.eHeaderContainer);this.headerElements.forEach(function(headerElement){headerElement.destroy();});this.headerElements=[];this.insertHeaderRowsIntoContainer(this.columnController.getLeftDisplayedColumnGroups(),this.ePinnedLeftHeader);this.insertHeaderRowsIntoContainer(this.columnController.getRightDisplayedColumnGroups(),this.ePinnedRightHeader);this.insertHeaderRowsIntoContainer(this.columnController.getCenterDisplayedColumnGroups(),this.eHeaderContainer);};HeaderRenderer.prototype.addTreeNodesAtDept=function(cellTree,dept,result){var _this=this;cellTree.forEach(function(abstractColumn){if(dept===0){result.push(abstractColumn);}else if(abstractColumn instanceof grid.ColumnGroup){var columnGroup=abstractColumn;_this.addTreeNodesAtDept(columnGroup.getDisplayedChildren(),dept-1,result);}else {}});};HeaderRenderer.prototype.setPinnedColContainerWidth=function(){if(this.gridOptionsWrapper.isForPrint()){ // pinned col doesn't exist when doing forPrint
	return;}var pinnedLeftWidth=this.columnController.getPinnedLeftContainerWidth()+'px';this.eHeaderViewport.style.marginLeft=pinnedLeftWidth;var pinnedRightWidth=this.columnController.getPinnedRightContainerWidth()+'px';this.eHeaderViewport.style.marginRight=pinnedRightWidth;};HeaderRenderer.prototype.insertHeaderRowsIntoContainer=function(cellTree,eContainerToAddTo){var _this=this; // if we are displaying header groups, then we have many rows here.
	// go through each row of the header, one by one.
	for(var dept=0;;dept++){var nodesAtDept=[];this.addTreeNodesAtDept(cellTree,dept,nodesAtDept); // we want to break the for loop when we get to an empty set of cells,
	// that's how we know we have finished rendering the last row.
	if(nodesAtDept.length===0){break;}var eRow=document.createElement('div');eRow.className='ag-header-row';eRow.style.top=dept*this.gridOptionsWrapper.getHeaderHeight()+'px';eRow.style.height=this.gridOptionsWrapper.getHeaderHeight()+'px';nodesAtDept.forEach(function(child){var renderedHeaderElement=_this.createHeaderElement(child);_this.headerElements.push(renderedHeaderElement);eRow.appendChild(renderedHeaderElement.getGui());});eContainerToAddTo.appendChild(eRow);}};HeaderRenderer.prototype.createHeaderElement=function(columnGroupChild){if(columnGroupChild instanceof grid.ColumnGroup){return new grid.RenderedHeaderGroupCell(columnGroupChild,this.gridOptionsWrapper,this.columnController,this.eRoot,this.angularGrid,this.$scope,this.filterManager,this.$compile);}else {return new grid.RenderedHeaderCell(columnGroupChild,null,this.gridOptionsWrapper,this.$scope,this.filterManager,this.columnController,this.$compile,this.angularGrid,this.eRoot,this.headerTemplateLoader);}};HeaderRenderer.prototype.updateSortIcons=function(){this.headerElements.forEach(function(headerElement){headerElement.refreshSortIcon();});};HeaderRenderer.prototype.updateFilterIcons=function(){this.headerElements.forEach(function(headerElement){headerElement.refreshFilterIcon();});};HeaderRenderer.prototype.onIndividualColumnResized=function(column){this.headerElements.forEach(function(headerElement){headerElement.onIndividualColumnResized(column);});};return HeaderRenderer;}();grid.HeaderRenderer=HeaderRenderer;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={}));var ag;(function(ag){var grid;(function(grid){var GroupCreator=function(){function GroupCreator(){}GroupCreator.prototype.init=function(valueService,gridOptionsWrapper){this.valueService=valueService;this.gridOptionsWrapper=gridOptionsWrapper;};GroupCreator.prototype.group=function(rowNodes,groupedCols,expandByDefault){var topMostGroup={level:-1,children:[],_childrenMap:{}};var allGroups=[];allGroups.push(topMostGroup);var levelToInsertChild=groupedCols.length-1;var i;var currentLevel;var node;var data;var currentGroup;var groupKey;var nextGroup;var includeParents=!this.gridOptionsWrapper.isSuppressParentsInRowNodes(); // start at -1 and go backwards, as all the positive indexes
	// are already used by the nodes.
	var index=-1;for(i=0;i<rowNodes.length;i++){node=rowNodes[i];data=node.data; // all leaf nodes have the same level in this grouping, which is one level after the last group
	node.level=levelToInsertChild+1;for(currentLevel=0;currentLevel<groupedCols.length;currentLevel++){var groupColumn=groupedCols[currentLevel];groupKey=this.valueService.getValue(groupColumn.getColDef(),data,node);if(currentLevel===0){currentGroup=topMostGroup;} // if group doesn't exist yet, create it
	nextGroup=currentGroup._childrenMap[groupKey];if(!nextGroup){nextGroup={group:true,field:groupColumn.getColDef().field,id:index--,key:groupKey,expanded:this.isExpanded(expandByDefault,currentLevel),children:[], // for top most level, parent is null
	parent:null,allChildrenCount:0,level:currentGroup.level+1,_childrenMap:{} //this is a temporary map, we remove at the end of this method
	};if(includeParents){nextGroup.parent=currentGroup===topMostGroup?null:currentGroup;}currentGroup._childrenMap[groupKey]=nextGroup;currentGroup.children.push(nextGroup);allGroups.push(nextGroup);}nextGroup.allChildrenCount++;if(currentLevel==levelToInsertChild){if(includeParents){node.parent=nextGroup===topMostGroup?null:nextGroup;}nextGroup.children.push(node);}else {currentGroup=nextGroup;}}} //remove the temporary map
	for(i=0;i<allGroups.length;i++){delete allGroups[i]._childrenMap;}return topMostGroup.children;};GroupCreator.prototype.isExpanded=function(expandByDefault,level){if(typeof expandByDefault==='number'){if(expandByDefault===-1){return true;}else {return level<expandByDefault;}}else {return false;}};return GroupCreator;}();grid.GroupCreator=GroupCreator;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path="../utils.ts" />
	/// <reference path="../constants.ts" />
	/// <reference path="../groupCreator.ts" />
	/// <reference path="../entities/rowNode.ts" />
	var ag;(function(ag){var grid;(function(grid){var _=grid.Utils;var constants=grid.Constants;var RecursionType;(function(RecursionType){RecursionType[RecursionType["Normal"]=0]="Normal";RecursionType[RecursionType["AfterFilter"]=1]="AfterFilter";RecursionType[RecursionType["AfterFilterAndSort"]=2]="AfterFilterAndSort";})(RecursionType||(RecursionType={}));;var InMemoryRowController=function(){function InMemoryRowController(){this.createModel();}InMemoryRowController.prototype.init=function(gridOptionsWrapper,columnController,angularGrid,filterManager,$scope,groupCreator,valueService,eventService){this.gridOptionsWrapper=gridOptionsWrapper;this.columnController=columnController;this.angularGrid=angularGrid;this.filterManager=filterManager;this.$scope=$scope;this.groupCreator=groupCreator;this.valueService=valueService;this.eventService=eventService;this.allRows=null;this.rowsAfterGroup=null;this.rowsAfterFilter=null;this.rowsAfterSort=null;this.rowsToDisplay=null;};InMemoryRowController.prototype.createModel=function(){var that=this;this.model={ // this method is implemented by the inMemory model only,
	// it gives the top level of the selection. used by the selection
	// controller, when it needs to do a full traversal
	getTopLevelNodes:function getTopLevelNodes(){return that.rowsAfterGroup;},getVirtualRow:function getVirtualRow(index){return that.rowsToDisplay[index];},getVirtualRowCount:function getVirtualRowCount(){if(that.rowsToDisplay){return that.rowsToDisplay.length;}else {return 0;}},getRowAtPixel:function getRowAtPixel(pixel){return that.getRowAtPixel(pixel);},getVirtualRowCombinedHeight:function getVirtualRowCombinedHeight(){return that.getVirtualRowCombinedHeight();},forEachInMemory:function forEachInMemory(callback){that.forEachInMemory(callback);},forEachNode:function forEachNode(callback){that.forEachNode(callback);},forEachNodeAfterFilter:function forEachNodeAfterFilter(callback){that.forEachNodeAfterFilter(callback);},forEachNodeAfterFilterAndSort:function forEachNodeAfterFilterAndSort(callback){that.forEachNodeAfterFilterAndSort(callback);}};};InMemoryRowController.prototype.getRowAtPixel=function(pixelToMatch){ // do binary search of tree
	// http://oli.me.uk/2013/06/08/searching-javascript-arrays-with-a-binary-search/
	var bottomPointer=0;var topPointer=this.rowsToDisplay.length-1; // quick check, if the pixel is out of bounds, then return last row
	var lastNode=this.rowsToDisplay[this.rowsToDisplay.length-1];if(lastNode.rowTop<=pixelToMatch){return this.rowsToDisplay.length-1;}while(true){var midPointer=Math.floor((bottomPointer+topPointer)/2);var currentRowNode=this.rowsToDisplay[midPointer];if(this.isRowInPixel(currentRowNode,pixelToMatch)){return midPointer;}else if(currentRowNode.rowTop<pixelToMatch){bottomPointer=midPointer+1;}else if(currentRowNode.rowTop>pixelToMatch){topPointer=midPointer-1;}}};InMemoryRowController.prototype.isRowInPixel=function(rowNode,pixelToMatch){var topPixel=rowNode.rowTop;var bottomPixel=rowNode.rowTop+rowNode.rowHeight;var pixelInRow=topPixel<=pixelToMatch&&bottomPixel>pixelToMatch;return pixelInRow;};InMemoryRowController.prototype.getVirtualRowCombinedHeight=function(){if(this.rowsToDisplay&&this.rowsToDisplay.length>0){var lastRow=this.rowsToDisplay[this.rowsToDisplay.length-1];var lastPixel=lastRow.rowTop+lastRow.rowHeight;return lastPixel;}else {return 0;}};InMemoryRowController.prototype.getModel=function(){return this.model;};InMemoryRowController.prototype.forEachInMemory=function(callback){console.warn('ag-Grid: please use forEachNode instead of forEachInMemory, method is same, I just renamed it, forEachInMemory is deprecated');this.forEachNode(callback);};InMemoryRowController.prototype.forEachNode=function(callback){this.recursivelyWalkNodesAndCallback(this.rowsAfterGroup,callback,RecursionType.Normal,0);};InMemoryRowController.prototype.forEachNodeAfterFilter=function(callback){this.recursivelyWalkNodesAndCallback(this.rowsAfterFilter,callback,RecursionType.AfterFilter,0);};InMemoryRowController.prototype.forEachNodeAfterFilterAndSort=function(callback){this.recursivelyWalkNodesAndCallback(this.rowsAfterSort,callback,RecursionType.AfterFilterAndSort,0);}; // iterates through each item in memory, and calls the callback function
	// nodes - the rowNodes to traverse
	// callback - the user provided callback
	// recursion type - need this to know what child nodes to recurse, eg if looking at all nodes, or filtered notes etc
	// index - works similar to the index in forEach in javascripts array function
	InMemoryRowController.prototype.recursivelyWalkNodesAndCallback=function(nodes,callback,recursionType,index){if(nodes){for(var i=0;i<nodes.length;i++){var node=nodes[i];callback(node,index++); // go to the next level if it is a group
	if(node.group){ // depending on the recursion type, we pick a difference set of children
	var nodeChildren;switch(recursionType){case RecursionType.Normal:nodeChildren=node.children;break;case RecursionType.AfterFilter:nodeChildren=node.childrenAfterFilter;break;case RecursionType.AfterFilterAndSort:nodeChildren=node.childrenAfterSort;break;}if(nodeChildren){index=this.recursivelyWalkNodesAndCallback(nodeChildren,callback,recursionType,index);}}}}return index;};InMemoryRowController.prototype.updateModel=function(step){var _this=this; // fallthrough in below switch is on purpose
	switch(step){case constants.STEP_EVERYTHING:case constants.STEP_FILTER:this.doFilter();this.doAggregate();case constants.STEP_SORT:this.doSort();case constants.STEP_MAP:this.doRowsToDisplay();}this.eventService.dispatchEvent(grid.Events.EVENT_MODEL_UPDATED);if(this.$scope){setTimeout(function(){_this.$scope.$apply();},0);}};InMemoryRowController.prototype.ensureRowHasHeight=function(rowNode){};InMemoryRowController.prototype.defaultGroupAggFunctionFactory=function(valueColumns){ // make closure of variable, so is available for methods below
	var _valueService=this.valueService;return function groupAggFunction(rows){var result={};for(var j=0;j<valueColumns.length;j++){var valueColumn=valueColumns[j];var colKey=valueColumn.getColDef().field;if(!colKey){console.log('ag-Grid: you need to provide a field for all value columns so that '+'the grid knows what field to store the result in. so even if using a valueGetter, '+'the result will not be stored in a value getter.');} // at this point, if no values were numbers, the result is null (not zero)
	result[colKey]=aggregateColumn(rows,valueColumn.getAggFunc(),colKey,valueColumn.getColDef());}return result;}; // if colDef is passed in, we are working off a column value, if it is not passed in, we are
	// working off colKeys passed in to the gridOptions
	function aggregateColumn(rowNodes,aggFunc,colKey,colDef){var resultForColumn=null;for(var i=0;i<rowNodes.length;i++){var rowNode=rowNodes[i]; // if the row is a group, then it will only have an agg result value,
	// which means valueGetter is never used.
	var thisColumnValue;if(colDef&&!rowNode.group){thisColumnValue=_valueService.getValue(colDef,rowNode.data,rowNode);}else {thisColumnValue=rowNode.data[colKey];} // only include if the value is a number
	if(typeof thisColumnValue==='number'){switch(aggFunc){case grid.Column.AGG_SUM:resultForColumn+=thisColumnValue;break;case grid.Column.AGG_MIN:if(resultForColumn===null){resultForColumn=thisColumnValue;}else if(resultForColumn>thisColumnValue){resultForColumn=thisColumnValue;}break;case grid.Column.AGG_MAX:if(resultForColumn===null){resultForColumn=thisColumnValue;}else if(resultForColumn<thisColumnValue){resultForColumn=thisColumnValue;}break;}}}return resultForColumn;}}; // it's possible to recompute the aggregate without doing the other parts
	InMemoryRowController.prototype.doAggregate=function(){var groupAggFunction=this.gridOptionsWrapper.getGroupAggFunction();if(typeof groupAggFunction==='function'){this.recursivelyCreateAggData(this.rowsAfterFilter,groupAggFunction,0);return;}var valueColumns=this.columnController.getValueColumns();if(valueColumns&&valueColumns.length>0){var defaultAggFunction=this.defaultGroupAggFunctionFactory(valueColumns);this.recursivelyCreateAggData(this.rowsAfterFilter,defaultAggFunction,0);}else { // if no agg data, need to clear out any previous items, when can be left behind
	// if use is creating / removing columns using the tool panel.
	// one exception - don't do this if already grouped, as this breaks the File Explorer example!!
	// to fix another day - how to we reset when the user provided the data??
	if(!this.gridOptionsWrapper.isRowsAlreadyGrouped()){this.recursivelyClearAggData(this.rowsAfterFilter);}}};InMemoryRowController.prototype.expandOrCollapseAll=function(expand,rowNodes){var _this=this; // if first call in recursion, we set list to parent list
	if(rowNodes===null){rowNodes=this.rowsAfterGroup;}if(!rowNodes){return;}rowNodes.forEach(function(node){if(node.group){node.expanded=expand;_this.expandOrCollapseAll(expand,node.children);}});};InMemoryRowController.prototype.recursivelyClearAggData=function(nodes){for(var i=0,l=nodes.length;i<l;i++){var node=nodes[i];if(node.group){ // agg function needs to start at the bottom, so traverse first
	this.recursivelyClearAggData(node.childrenAfterFilter);node.data=null;}}};InMemoryRowController.prototype.recursivelyCreateAggData=function(nodes,groupAggFunction,level){for(var i=0,l=nodes.length;i<l;i++){var node=nodes[i];if(node.group){ // agg function needs to start at the bottom, so traverse first
	this.recursivelyCreateAggData(node.childrenAfterFilter,groupAggFunction,level++); // after traversal, we can now do the agg at this level
	var data=groupAggFunction(node.childrenAfterFilter,level);node.data=data; // if we are grouping, then it's possible there is a sibling footer
	// to the group, so update the data here also if there is one
	if(node.sibling){node.sibling.data=data;}}}};InMemoryRowController.prototype.doSort=function(){var sorting; // if the sorting is already done by the server, then we should not do it here
	if(this.gridOptionsWrapper.isEnableServerSideSorting()){sorting=false;}else { //see if there is a col we are sorting by
	var sortingOptions=[];this.columnController.getAllColumns().forEach(function(column){if(column.getSort()){var ascending=column.getSort()===grid.Column.SORT_ASC;sortingOptions.push({inverter:ascending?1:-1,sortedAt:column.getSortedAt(),column:column});}});if(sortingOptions.length>0){sorting=true;}}var rowNodesReadyForSorting=this.rowsAfterFilter?this.rowsAfterFilter.slice(0):null;if(sorting){ // The columns are to be sorted in the order that the user selected them:
	sortingOptions.sort(function(optionA,optionB){return optionA.sortedAt-optionB.sortedAt;});this.sortList(rowNodesReadyForSorting,sortingOptions);}else { // if no sorting, set all group children after sort to the original list.
	// note: it is important to do this, even if doing server side sorting,
	// to allow the rows to pass to the next stage (ie set the node value
	// childrenAfterSort)
	this.recursivelyResetSort(rowNodesReadyForSorting);}this.rowsAfterSort=rowNodesReadyForSorting;};InMemoryRowController.prototype.recursivelyResetSort=function(rowNodes){if(!rowNodes){return;}for(var i=0,l=rowNodes.length;i<l;i++){var item=rowNodes[i];if(item.group&&item.children){item.childrenAfterSort=item.childrenAfterFilter;this.recursivelyResetSort(item.children);}}this.updateChildIndexes(rowNodes);};InMemoryRowController.prototype.sortList=function(nodes,sortOptions){ // sort any groups recursively
	for(var i=0,l=nodes.length;i<l;i++){var node=nodes[i];if(node.group&&node.children){node.childrenAfterSort=node.childrenAfterFilter.slice(0);this.sortList(node.childrenAfterSort,sortOptions);}}var that=this;function compare(nodeA,nodeB,column,isInverted){var valueA=that.valueService.getValue(column.getColDef(),nodeA.data,nodeA);var valueB=that.valueService.getValue(column.getColDef(),nodeB.data,nodeB);if(column.getColDef().comparator){ //if comparator provided, use it
	return column.getColDef().comparator(valueA,valueB,nodeA,nodeB,isInverted);}else { //otherwise do our own comparison
	return _.defaultComparator(valueA,valueB);}}nodes.sort(function(nodeA,nodeB){ // Iterate columns, return the first that doesn't match
	for(var i=0,len=sortOptions.length;i<len;i++){var sortOption=sortOptions[i];var compared=compare(nodeA,nodeB,sortOption.column,sortOption.inverter===-1);if(compared!==0){return compared*sortOption.inverter;}} // All matched, these are identical as far as the sort is concerned:
	return 0;});this.updateChildIndexes(nodes);};InMemoryRowController.prototype.updateChildIndexes=function(nodes){for(var j=0;j<nodes.length;j++){var node=nodes[j];node.firstChild=j===0;node.lastChild=j===nodes.length-1;node.childIndex=j;}}; // called by grid when row group cols change
	InMemoryRowController.prototype.onRowGroupChanged=function(){this.doRowGrouping();this.updateModel(constants.STEP_EVERYTHING);};InMemoryRowController.prototype.doRowGrouping=function(){var rowsAfterGroup;var groupedCols=this.columnController.getRowGroupColumns();var rowsAlreadyGrouped=this.gridOptionsWrapper.isRowsAlreadyGrouped();var doingGrouping=!rowsAlreadyGrouped&&groupedCols.length>0;if(doingGrouping){var expandByDefault;if(this.gridOptionsWrapper.isGroupSuppressRow()){ // 99999 means 'expand everything'
	expandByDefault=-1;}else {expandByDefault=this.gridOptionsWrapper.getGroupDefaultExpanded();}rowsAfterGroup=this.groupCreator.group(this.allRows,groupedCols,expandByDefault);}else {rowsAfterGroup=this.allRows;}this.rowsAfterGroup=rowsAfterGroup;};InMemoryRowController.prototype.doFilter=function(){var doingFilter;if(this.gridOptionsWrapper.isEnableServerSideFilter()){doingFilter=false;}else {doingFilter=this.filterManager.isAnyFilterPresent();}var rowsAfterFilter;if(doingFilter){rowsAfterFilter=this.filterItems(this.rowsAfterGroup);}else { // do it here
	rowsAfterFilter=this.rowsAfterGroup;this.recursivelyResetFilter(this.rowsAfterGroup);}this.rowsAfterFilter=rowsAfterFilter;};InMemoryRowController.prototype.filterItems=function(rowNodes){var result=[];for(var i=0,l=rowNodes.length;i<l;i++){var node=rowNodes[i];if(node.group){ // deal with group
	node.childrenAfterFilter=this.filterItems(node.children);if(node.childrenAfterFilter.length>0){node.allChildrenCount=this.getTotalChildCount(node.childrenAfterFilter);result.push(node);}}else {if(this.filterManager.doesRowPassFilter(node)){result.push(node);}}}return result;};InMemoryRowController.prototype.recursivelyResetFilter=function(nodes){if(!nodes){return;}for(var i=0,l=nodes.length;i<l;i++){var node=nodes[i];if(node.group&&node.children){node.childrenAfterFilter=node.children;this.recursivelyResetFilter(node.children);node.allChildrenCount=this.getTotalChildCount(node.childrenAfterFilter);}}}; // rows: the rows to put into the model
	// firstId: the first id to use, used for paging, where we are not on the first page
	InMemoryRowController.prototype.setAllRows=function(rows,firstId){var nodes;if(this.gridOptionsWrapper.isRowsAlreadyGrouped()){nodes=rows;this.recursivelyCheckUserProvidedNodes(nodes,null,0);}else { // place each row into a wrapper
	var nodes=[];if(rows){for(var i=0;i<rows.length;i++){var node={};node.data=rows[i];nodes.push(node);}}} // if firstId provided, use it, otherwise start at 0
	var firstIdToUse=firstId?firstId:0;this.recursivelyAddIdToNodes(nodes,firstIdToUse);this.allRows=nodes; // group here, so filters have the agg data ready
	if(this.columnController.isSetupComplete()){this.doRowGrouping();}}; // add in index - this is used by the selectionController - so quick
	// to look up selected rows
	InMemoryRowController.prototype.recursivelyAddIdToNodes=function(nodes,index){if(!nodes){return;}for(var i=0;i<nodes.length;i++){var node=nodes[i];node.id=index++;if(node.group&&node.children){index=this.recursivelyAddIdToNodes(node.children,index);}}return index;}; // add in index - this is used by the selectionController - so quick
	// to look up selected rows
	InMemoryRowController.prototype.recursivelyCheckUserProvidedNodes=function(nodes,parent,level){if(!nodes){return;}for(var i=0;i<nodes.length;i++){var node=nodes[i];if(parent&&!this.gridOptionsWrapper.isSuppressParentsInRowNodes()){node.parent=parent;}node.level=level;if(node.group&&node.children){this.recursivelyCheckUserProvidedNodes(node.children,node,level+1);}}};InMemoryRowController.prototype.getTotalChildCount=function(rowNodes){var count=0;for(var i=0,l=rowNodes.length;i<l;i++){var item=rowNodes[i];if(item.group){count+=item.allChildrenCount;}else {count++;}}return count;};InMemoryRowController.prototype.doRowsToDisplay=function(){ // even if not doing grouping, we do the mapping, as the client might
	// of passed in data that already has a grouping in it somewhere
	this.rowsToDisplay=[];this.nextRowTop=0;this.recursivelyAddToRowsToDisplay(this.rowsAfterSort);};InMemoryRowController.prototype.recursivelyAddToRowsToDisplay=function(rowNodes){if(!rowNodes){return;}var groupSuppressRow=this.gridOptionsWrapper.isGroupSuppressRow();for(var i=0;i<rowNodes.length;i++){var rowNode=rowNodes[i];var skipGroupNode=groupSuppressRow&&rowNode.group;if(!skipGroupNode){this.addRowNodeToRowsToDisplay(rowNode);}if(rowNode.group&&rowNode.expanded){this.recursivelyAddToRowsToDisplay(rowNode.childrenAfterSort); // put a footer in if user is looking for it
	if(this.gridOptionsWrapper.isGroupIncludeFooter()){var footerNode=this.createFooterNode(rowNode);this.addRowNodeToRowsToDisplay(footerNode);}}}}; // duplicated method, it's also in floatingRowModel
	InMemoryRowController.prototype.addRowNodeToRowsToDisplay=function(rowNode){this.rowsToDisplay.push(rowNode);rowNode.rowHeight=this.gridOptionsWrapper.getRowHeightForNode(rowNode);rowNode.rowTop=this.nextRowTop;this.nextRowTop+=rowNode.rowHeight;};InMemoryRowController.prototype.createFooterNode=function(groupNode){var footerNode={};Object.keys(groupNode).forEach(function(key){footerNode[key]=groupNode[key];});footerNode.footer=true; // get both header and footer to reference each other as siblings. this is never undone,
	// only overwritten. so if a group is expanded, then contracted, it will have a ghost
	// sibling - but that's fine, as we can ignore this if the header is contracted.
	footerNode.sibling=groupNode;groupNode.sibling=footerNode;return footerNode;};return InMemoryRowController;}();grid.InMemoryRowController=InMemoryRowController;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path="../utils.ts" />
	/*
	 * This row controller is used for infinite scrolling only. For normal 'in memory' table,
	 * or standard pagination, the inMemoryRowController is used.
	 */var ag;(function(ag){var grid;(function(grid){var utils=grid.Utils;var logging=false;var VirtualPageRowController=function(){function VirtualPageRowController(){}VirtualPageRowController.prototype.init=function(rowRenderer,gridOptionsWrapper,angularGrid){this.rowRenderer=rowRenderer;this.datasourceVersion=0;this.gridOptionsWrapper=gridOptionsWrapper;this.angularGrid=angularGrid;};VirtualPageRowController.prototype.setDatasource=function(datasource){this.datasource=datasource;if(!datasource){ // only continue if we have a valid datasource to working with
	return;}this.reset();};VirtualPageRowController.prototype.reset=function(){ // see if datasource knows how many rows there are
	if(typeof this.datasource.rowCount==='number'&&this.datasource.rowCount>=0){this.virtualRowCount=this.datasource.rowCount;this.foundMaxRow=true;}else {this.virtualRowCount=0;this.foundMaxRow=false;} // in case any daemon requests coming from datasource, we know it ignore them
	this.datasourceVersion++; // map of page numbers to rows in that page
	this.pageCache={};this.pageCacheSize=0; // if a number is in this array, it means we are pending a load from it
	this.pageLoadsInProgress=[];this.pageLoadsQueued=[];this.pageAccessTimes={}; // keeps a record of when each page was last viewed, used for LRU cache
	this.accessTime=0; // rather than using the clock, we use this counter
	// the number of concurrent loads we are allowed to the server
	if(typeof this.datasource.maxConcurrentRequests==='number'&&this.datasource.maxConcurrentRequests>0){this.maxConcurrentDatasourceRequests=this.datasource.maxConcurrentRequests;}else {this.maxConcurrentDatasourceRequests=2;} // the number of pages to keep in browser cache
	if(typeof this.datasource.maxPagesInCache==='number'&&this.datasource.maxPagesInCache>0){this.maxPagesInCache=this.datasource.maxPagesInCache;}else { // null is default, means don't  have any max size on the cache
	this.maxPagesInCache=null;}this.pageSize=this.datasource.pageSize; // take a copy of page size, we don't want it changing
	this.overflowSize=this.datasource.overflowSize; // take a copy of page size, we don't want it changing
	this.doLoadOrQueue(0);};VirtualPageRowController.prototype.createNodesFromRows=function(pageNumber,rows){var nodes=[];if(rows){for(var i=0,j=rows.length;i<j;i++){var virtualRowIndex=pageNumber*this.pageSize+i;var node=this.createNode(rows[i],virtualRowIndex);nodes.push(node);}}return nodes;};VirtualPageRowController.prototype.createNode=function(data,virtualRowIndex){var rowHeight=this.getRowHeightAsNumber();var top=rowHeight*virtualRowIndex;var rowNode={data:data,id:virtualRowIndex,rowTop:top,rowHeight:rowHeight};return rowNode;};VirtualPageRowController.prototype.removeFromLoading=function(pageNumber){var index=this.pageLoadsInProgress.indexOf(pageNumber);this.pageLoadsInProgress.splice(index,1);};VirtualPageRowController.prototype.pageLoadFailed=function(pageNumber){this.removeFromLoading(pageNumber);this.checkQueueForNextLoad();};VirtualPageRowController.prototype.pageLoaded=function(pageNumber,rows,lastRow){this.putPageIntoCacheAndPurge(pageNumber,rows);this.checkMaxRowAndInformRowRenderer(pageNumber,lastRow);this.removeFromLoading(pageNumber);this.checkQueueForNextLoad();};VirtualPageRowController.prototype.putPageIntoCacheAndPurge=function(pageNumber,rows){this.pageCache[pageNumber]=this.createNodesFromRows(pageNumber,rows);this.pageCacheSize++;if(logging){console.log('adding page '+pageNumber);}var needToPurge=this.maxPagesInCache&&this.maxPagesInCache<this.pageCacheSize;if(needToPurge){ // find the LRU page
	var youngestPageIndex=this.findLeastRecentlyAccessedPage(Object.keys(this.pageCache));if(logging){console.log('purging page '+youngestPageIndex+' from cache '+Object.keys(this.pageCache));}delete this.pageCache[youngestPageIndex];this.pageCacheSize--;}};VirtualPageRowController.prototype.checkMaxRowAndInformRowRenderer=function(pageNumber,lastRow){if(!this.foundMaxRow){ // if we know the last row, use if
	if(typeof lastRow==='number'&&lastRow>=0){this.virtualRowCount=lastRow;this.foundMaxRow=true;}else { // otherwise, see if we need to add some virtual rows
	var thisPagePlusBuffer=(pageNumber+1)*this.pageSize+this.overflowSize;if(this.virtualRowCount<thisPagePlusBuffer){this.virtualRowCount=thisPagePlusBuffer;}} // if rowCount changes, refreshView, otherwise just refreshAllVirtualRows
	this.rowRenderer.refreshView();}else {this.rowRenderer.refreshAllVirtualRows();}};VirtualPageRowController.prototype.isPageAlreadyLoading=function(pageNumber){var result=this.pageLoadsInProgress.indexOf(pageNumber)>=0||this.pageLoadsQueued.indexOf(pageNumber)>=0;return result;};VirtualPageRowController.prototype.doLoadOrQueue=function(pageNumber){ // if we already tried to load this page, then ignore the request,
	// otherwise server would be hit 50 times just to display one page, the
	// first row to find the page missing is enough.
	if(this.isPageAlreadyLoading(pageNumber)){return;} // try the page load - if not already doing a load, then we can go ahead
	if(this.pageLoadsInProgress.length<this.maxConcurrentDatasourceRequests){ // go ahead, load the page
	this.loadPage(pageNumber);}else { // otherwise, queue the request
	this.addToQueueAndPurgeQueue(pageNumber);}};VirtualPageRowController.prototype.addToQueueAndPurgeQueue=function(pageNumber){if(logging){console.log('queueing '+pageNumber+' - '+this.pageLoadsQueued);}this.pageLoadsQueued.push(pageNumber); // see if there are more pages queued that are actually in our cache, if so there is
	// no point in loading them all as some will be purged as soon as loaded
	var needToPurge=this.maxPagesInCache&&this.maxPagesInCache<this.pageLoadsQueued.length;if(needToPurge){ // find the LRU page
	var youngestPageIndex=this.findLeastRecentlyAccessedPage(this.pageLoadsQueued);if(logging){console.log('de-queueing '+pageNumber+' - '+this.pageLoadsQueued);}var indexToRemove=this.pageLoadsQueued.indexOf(youngestPageIndex);this.pageLoadsQueued.splice(indexToRemove,1);}};VirtualPageRowController.prototype.findLeastRecentlyAccessedPage=function(pageIndexes){var youngestPageIndex=-1;var youngestPageAccessTime=Number.MAX_VALUE;var that=this;pageIndexes.forEach(function(pageIndex){var accessTimeThisPage=that.pageAccessTimes[pageIndex];if(accessTimeThisPage<youngestPageAccessTime){youngestPageAccessTime=accessTimeThisPage;youngestPageIndex=pageIndex;}});return youngestPageIndex;};VirtualPageRowController.prototype.checkQueueForNextLoad=function(){if(this.pageLoadsQueued.length>0){ // take from the front of the queue
	var pageToLoad=this.pageLoadsQueued[0];this.pageLoadsQueued.splice(0,1);if(logging){console.log('dequeueing '+pageToLoad+' - '+this.pageLoadsQueued);}this.loadPage(pageToLoad);}};VirtualPageRowController.prototype.loadPage=function(pageNumber){this.pageLoadsInProgress.push(pageNumber);var startRow=pageNumber*this.pageSize;var endRow=(pageNumber+1)*this.pageSize;var that=this;var datasourceVersionCopy=this.datasourceVersion;var sortModel;if(this.gridOptionsWrapper.isEnableServerSideSorting()){sortModel=this.angularGrid.getSortModel();}var filterModel;if(this.gridOptionsWrapper.isEnableServerSideFilter()){filterModel=this.angularGrid.getFilterModel();}var params={startRow:startRow,endRow:endRow,successCallback:successCallback,failCallback:failCallback,sortModel:sortModel,filterModel:filterModel}; // check if old version of datasource used
	var getRowsParams=utils.getFunctionParameters(this.datasource.getRows);if(getRowsParams.length>1){console.warn('ag-grid: It looks like your paging datasource is of the old type, taking more than one parameter.');console.warn('ag-grid: From ag-grid 1.9.0, now the getRows takes one parameter. See the documentation for details.');}this.datasource.getRows(params);function successCallback(rows,lastRowIndex){if(that.requestIsDaemon(datasourceVersionCopy)){return;}that.pageLoaded(pageNumber,rows,lastRowIndex);}function failCallback(){if(that.requestIsDaemon(datasourceVersionCopy)){return;}that.pageLoadFailed(pageNumber);}}; // check that the datasource has not changed since the lats time we did a request
	VirtualPageRowController.prototype.requestIsDaemon=function(datasourceVersionCopy){return this.datasourceVersion!==datasourceVersionCopy;};VirtualPageRowController.prototype.getVirtualRow=function(rowIndex){if(rowIndex>this.virtualRowCount){return null;}var pageNumber=Math.floor(rowIndex/this.pageSize);var page=this.pageCache[pageNumber]; // for LRU cache, track when this page was last hit
	this.pageAccessTimes[pageNumber]=this.accessTime++;if(!page){this.doLoadOrQueue(pageNumber); // return back an empty row, so table can at least render empty cells
	var dummyNode=this.createNode({},rowIndex);return dummyNode;}else {var indexInThisPage=rowIndex%this.pageSize;return page[indexInThisPage];}};VirtualPageRowController.prototype.forEachNode=function(callback){var pageKeys=Object.keys(this.pageCache);for(var i=0;i<pageKeys.length;i++){var pageKey=pageKeys[i];var page=this.pageCache[pageKey];for(var j=0;j<page.length;j++){var node=page[j];callback(node);}}};VirtualPageRowController.prototype.getRowHeightAsNumber=function(){var rowHeight=this.gridOptionsWrapper.getRowHeightForVirtualPagiation();if(typeof rowHeight==='number'){return rowHeight;}else {console.warn('ag-Grid row height must be a number when doing virtual paging');return 25;}};VirtualPageRowController.prototype.getVirtualRowCombinedHeight=function(){return this.virtualRowCount*this.getRowHeightAsNumber();};VirtualPageRowController.prototype.getRowAtPixel=function(pixel){var rowHeight=this.getRowHeightAsNumber();if(rowHeight!==0){return Math.floor(pixel/rowHeight);}else {return 0;}};VirtualPageRowController.prototype.getModel=function(){var that=this;return {getRowAtPixel:function getRowAtPixel(pixel){return that.getRowAtPixel(pixel);},getVirtualRowCombinedHeight:function getVirtualRowCombinedHeight(){return that.getVirtualRowCombinedHeight();},getVirtualRow:function getVirtualRow(index){return that.getVirtualRow(index);},getVirtualRowCount:function getVirtualRowCount(){return that.virtualRowCount;},forEachInMemory:function forEachInMemory(callback){that.forEachNode(callback);},forEachNode:function forEachNode(callback){that.forEachNode(callback);},forEachNodeAfterFilter:function forEachNodeAfterFilter(callback){console.warn('forEachNodeAfterFilter - does not work with virtual pagination');},forEachNodeAfterFilterAndSort:function forEachNodeAfterFilterAndSort(callback){console.warn('forEachNodeAfterFilterAndSort - does not work with virtual pagination');}};};return VirtualPageRowController;}();grid.VirtualPageRowController=VirtualPageRowController;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path="../utils.ts" />
	var ag;(function(ag){var grid;(function(grid){var utils=grid.Utils;var template='<div class="ag-paging-panel">'+'<span id="pageRowSummaryPanel" class="ag-paging-row-summary-panel">'+'<span id="firstRowOnPage"></span>'+' [TO] '+'<span id="lastRowOnPage"></span>'+' [OF] '+'<span id="recordCount"></span>'+'</span>'+'<span class="ag-paging-page-summary-panel">'+'<button type="button" class="ag-paging-button" id="btFirst">[FIRST]</button>'+'<button type="button" class="ag-paging-button" id="btPrevious">[PREVIOUS]</button>'+'[PAGE] '+'<span id="current"></span>'+' [OF] '+'<span id="total"></span>'+'<button type="button" class="ag-paging-button" id="btNext">[NEXT]</button>'+'<button type="button" class="ag-paging-button" id="btLast">[LAST]</button>'+'</span>'+'</div>';var PaginationController=function(){function PaginationController(){}PaginationController.prototype.init=function(angularGrid,gridOptionsWrapper){this.gridOptionsWrapper=gridOptionsWrapper;this.angularGrid=angularGrid;this.setupComponents();this.callVersion=0;};PaginationController.prototype.setDatasource=function(datasource){this.datasource=datasource;if(!datasource){ // only continue if we have a valid datasource to work with
	return;}this.reset();};PaginationController.prototype.reset=function(){ // copy pageSize, to guard against it changing the the datasource between calls
	if(this.datasource.pageSize&&typeof this.datasource.pageSize!=='number'){console.warn('datasource.pageSize should be a number');}this.pageSize=this.datasource.pageSize; // see if we know the total number of pages, or if it's 'to be decided'
	if(typeof this.datasource.rowCount==='number'&&this.datasource.rowCount>=0){this.rowCount=this.datasource.rowCount;this.foundMaxRow=true;this.calculateTotalPages();}else {this.rowCount=0;this.foundMaxRow=false;this.totalPages=null;}this.currentPage=0; // hide the summary panel until something is loaded
	this.ePageRowSummaryPanel.style.visibility='hidden';this.setTotalLabels();this.loadPage();}; // the native method number.toLocaleString(undefined, {minimumFractionDigits: 0}) puts in decimal places in IE
	PaginationController.prototype.myToLocaleString=function(input){if(typeof input!=='number'){return '';}else { // took this from: http://blog.tompawlak.org/number-currency-formatting-javascript
	return input.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g,"$1,");}};PaginationController.prototype.setTotalLabels=function(){if(this.foundMaxRow){this.lbTotal.innerHTML=this.myToLocaleString(this.totalPages);this.lbRecordCount.innerHTML=this.myToLocaleString(this.rowCount);}else {var moreText=this.gridOptionsWrapper.getLocaleTextFunc()('more','more');this.lbTotal.innerHTML=moreText;this.lbRecordCount.innerHTML=moreText;}};PaginationController.prototype.calculateTotalPages=function(){this.totalPages=Math.floor((this.rowCount-1)/this.pageSize)+1;};PaginationController.prototype.pageLoaded=function(rows,lastRowIndex){var firstId=this.currentPage*this.pageSize;this.angularGrid.setRowData(rows,firstId); // see if we hit the last row
	if(!this.foundMaxRow&&typeof lastRowIndex==='number'&&lastRowIndex>=0){this.foundMaxRow=true;this.rowCount=lastRowIndex;this.calculateTotalPages();this.setTotalLabels(); // if overshot pages, go back
	if(this.currentPage>this.totalPages){this.currentPage=this.totalPages-1;this.loadPage();}}this.enableOrDisableButtons();this.updateRowLabels();};PaginationController.prototype.updateRowLabels=function(){var startRow;var endRow;if(this.isZeroPagesToDisplay()){startRow=0;endRow=0;}else {startRow=this.pageSize*this.currentPage+1;endRow=startRow+this.pageSize-1;if(this.foundMaxRow&&endRow>this.rowCount){endRow=this.rowCount;}}this.lbFirstRowOnPage.innerHTML=this.myToLocaleString(startRow);this.lbLastRowOnPage.innerHTML=this.myToLocaleString(endRow); // show the summary panel, when first shown, this is blank
	this.ePageRowSummaryPanel.style.visibility="";};PaginationController.prototype.loadPage=function(){this.enableOrDisableButtons();var startRow=this.currentPage*this.datasource.pageSize;var endRow=(this.currentPage+1)*this.datasource.pageSize;this.lbCurrent.innerHTML=this.myToLocaleString(this.currentPage+1);this.callVersion++;var callVersionCopy=this.callVersion;var that=this;this.angularGrid.showLoadingOverlay();var sortModel;if(this.gridOptionsWrapper.isEnableServerSideSorting()){sortModel=this.angularGrid.getSortModel();}var filterModel;if(this.gridOptionsWrapper.isEnableServerSideFilter()){filterModel=this.angularGrid.getFilterModel();}var params={startRow:startRow,endRow:endRow,successCallback:successCallback,failCallback:failCallback,sortModel:sortModel,filterModel:filterModel}; // check if old version of datasource used
	var getRowsParams=utils.getFunctionParameters(this.datasource.getRows);if(getRowsParams.length>1){console.warn('ag-grid: It looks like your paging datasource is of the old type, taking more than one parameter.');console.warn('ag-grid: From ag-grid 1.9.0, now the getRows takes one parameter. See the documentation for details.');}this.datasource.getRows(params);function successCallback(rows,lastRowIndex){if(that.isCallDaemon(callVersionCopy)){return;}that.pageLoaded(rows,lastRowIndex);}function failCallback(){if(that.isCallDaemon(callVersionCopy)){return;} // set in an empty set of rows, this will at
	// least get rid of the loading panel, and
	// stop blocking things
	that.angularGrid.setRowData([]);}};PaginationController.prototype.isCallDaemon=function(versionCopy){return versionCopy!==this.callVersion;};PaginationController.prototype.onBtNext=function(){this.currentPage++;this.loadPage();};PaginationController.prototype.onBtPrevious=function(){this.currentPage--;this.loadPage();};PaginationController.prototype.onBtFirst=function(){this.currentPage=0;this.loadPage();};PaginationController.prototype.onBtLast=function(){this.currentPage=this.totalPages-1;this.loadPage();};PaginationController.prototype.isZeroPagesToDisplay=function(){return this.foundMaxRow&&this.totalPages===0;};PaginationController.prototype.enableOrDisableButtons=function(){var disablePreviousAndFirst=this.currentPage===0;this.btPrevious.disabled=disablePreviousAndFirst;this.btFirst.disabled=disablePreviousAndFirst;var zeroPagesToDisplay=this.isZeroPagesToDisplay();var onLastPage=this.foundMaxRow&&this.currentPage===this.totalPages-1;var disableNext=onLastPage||zeroPagesToDisplay;this.btNext.disabled=disableNext;var disableLast=!this.foundMaxRow||zeroPagesToDisplay||this.currentPage===this.totalPages-1;this.btLast.disabled=disableLast;};PaginationController.prototype.createTemplate=function(){var localeTextFunc=this.gridOptionsWrapper.getLocaleTextFunc();return template.replace('[PAGE]',localeTextFunc('page','Page')).replace('[TO]',localeTextFunc('to','to')).replace('[OF]',localeTextFunc('of','of')).replace('[OF]',localeTextFunc('of','of')).replace('[FIRST]',localeTextFunc('first','First')).replace('[PREVIOUS]',localeTextFunc('previous','Previous')).replace('[NEXT]',localeTextFunc('next','Next')).replace('[LAST]',localeTextFunc('last','Last'));};PaginationController.prototype.getGui=function(){return this.eGui;};PaginationController.prototype.setupComponents=function(){this.eGui=utils.loadTemplate(this.createTemplate());this.btNext=this.eGui.querySelector('#btNext');this.btPrevious=this.eGui.querySelector('#btPrevious');this.btFirst=this.eGui.querySelector('#btFirst');this.btLast=this.eGui.querySelector('#btLast');this.lbCurrent=this.eGui.querySelector('#current');this.lbTotal=this.eGui.querySelector('#total');this.lbRecordCount=this.eGui.querySelector('#recordCount');this.lbFirstRowOnPage=this.eGui.querySelector('#firstRowOnPage');this.lbLastRowOnPage=this.eGui.querySelector('#lastRowOnPage');this.ePageRowSummaryPanel=this.eGui.querySelector('#pageRowSummaryPanel');var that=this;this.btNext.addEventListener('click',function(){that.onBtNext();});this.btPrevious.addEventListener('click',function(){that.onBtPrevious();});this.btFirst.addEventListener('click',function(){that.onBtFirst();});this.btLast.addEventListener('click',function(){that.onBtLast();});};return PaginationController;}();grid.PaginationController=PaginationController;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path="../utils.ts" />
	var ag;(function(ag){var grid;(function(grid){var _=grid.Utils;var BorderLayout=function(){function BorderLayout(params){this.sizeChangeListeners=[];this.isLayoutPanel=true;this.fullHeight=!params.north&&!params.south;var template;if(!params.dontFill){if(this.fullHeight){template='<div style="height: 100%; overflow: auto; position: relative;">'+'<div id="west" style="height: 100%; float: left;"></div>'+'<div id="east" style="height: 100%; float: right;"></div>'+'<div id="center" style="height: 100%;"></div>'+'<div id="overlay" style="pointer-events: none; position: absolute; height: 100%; width: 100%; top: 0px; left: 0px;"></div>'+'</div>';}else {template='<div style="height: 100%; position: relative;">'+'<div id="north"></div>'+'<div id="centerRow" style="height: 100%; overflow: hidden;">'+'<div id="west" style="height: 100%; float: left;"></div>'+'<div id="east" style="height: 100%; float: right;"></div>'+'<div id="center" style="height: 100%;"></div>'+'</div>'+'<div id="south"></div>'+'<div id="overlay" style="pointer-events: none; position: absolute; height: 100%; width: 100%; top: 0px; left: 0px;"></div>'+'</div>';}this.layoutActive=true;}else {template='<div style="position: relative;">'+'<div id="north"></div>'+'<div id="centerRow">'+'<div id="west"></div>'+'<div id="east"></div>'+'<div id="center"></div>'+'</div>'+'<div id="south"></div>'+'<div id="overlay" style="pointer-events: none; position: absolute; height: 100%; width: 100%; top: 0px; left: 0px;"></div>'+'</div>';this.layoutActive=false;}this.eGui=_.loadTemplate(template);this.id='borderLayout';if(params.name){this.id+='_'+params.name;}this.eGui.setAttribute('id',this.id);this.childPanels=[];if(params){this.setupPanels(params);}this.overlays=params.overlays;this.setupOverlays();}BorderLayout.prototype.addSizeChangeListener=function(listener){this.sizeChangeListeners.push(listener);};BorderLayout.prototype.fireSizeChanged=function(){this.sizeChangeListeners.forEach(function(listener){listener();});};BorderLayout.prototype.setupPanels=function(params){this.eNorthWrapper=this.eGui.querySelector('#north');this.eSouthWrapper=this.eGui.querySelector('#south');this.eEastWrapper=this.eGui.querySelector('#east');this.eWestWrapper=this.eGui.querySelector('#west');this.eCenterWrapper=this.eGui.querySelector('#center');this.eOverlayWrapper=this.eGui.querySelector('#overlay');this.eCenterRow=this.eGui.querySelector('#centerRow');this.eNorthChildLayout=this.setupPanel(params.north,this.eNorthWrapper);this.eSouthChildLayout=this.setupPanel(params.south,this.eSouthWrapper);this.eEastChildLayout=this.setupPanel(params.east,this.eEastWrapper);this.eWestChildLayout=this.setupPanel(params.west,this.eWestWrapper);this.eCenterChildLayout=this.setupPanel(params.center,this.eCenterWrapper);};BorderLayout.prototype.setupPanel=function(content,ePanel){if(!ePanel){return;}if(content){if(content.isLayoutPanel){this.childPanels.push(content);ePanel.appendChild(content.getGui());return content;}else {ePanel.appendChild(content);return null;}}else {ePanel.parentNode.removeChild(ePanel);return null;}};BorderLayout.prototype.getGui=function(){return this.eGui;}; // returns true if any item changed size, otherwise returns false
	BorderLayout.prototype.doLayout=function(){if(!_.isVisible(this.eGui)){return false;}var atLeastOneChanged=false;var childLayouts=[this.eNorthChildLayout,this.eSouthChildLayout,this.eEastChildLayout,this.eWestChildLayout];var that=this;_.forEach(childLayouts,function(childLayout){var childChangedSize=that.layoutChild(childLayout);if(childChangedSize){atLeastOneChanged=true;}});if(this.layoutActive){var ourHeightChanged=this.layoutHeight();var ourWidthChanged=this.layoutWidth();if(ourHeightChanged||ourWidthChanged){atLeastOneChanged=true;}}var centerChanged=this.layoutChild(this.eCenterChildLayout);if(centerChanged){atLeastOneChanged=true;}if(atLeastOneChanged){this.fireSizeChanged();}return atLeastOneChanged;};BorderLayout.prototype.layoutChild=function(childPanel){if(childPanel){return childPanel.doLayout();}else {return false;}};BorderLayout.prototype.layoutHeight=function(){if(this.fullHeight){return this.layoutHeightFullHeight();}else {return this.layoutHeightNormal();}}; // full height never changes the height, because the center is always 100%,
	// however we do check for change, to inform the listeners
	BorderLayout.prototype.layoutHeightFullHeight=function(){var centerHeight=_.offsetHeight(this.eGui);if(centerHeight<0){centerHeight=0;}if(this.centerHeightLastTime!==centerHeight){this.centerHeightLastTime=centerHeight;return true;}else {return false;}};BorderLayout.prototype.layoutHeightNormal=function(){var totalHeight=_.offsetHeight(this.eGui);var northHeight=_.offsetHeight(this.eNorthWrapper);var southHeight=_.offsetHeight(this.eSouthWrapper);var centerHeight=totalHeight-northHeight-southHeight;if(centerHeight<0){centerHeight=0;}if(this.centerHeightLastTime!==centerHeight){this.eCenterRow.style.height=centerHeight+'px';this.centerHeightLastTime=centerHeight;return true; // return true because there was a change
	}else {return false;}};BorderLayout.prototype.getCentreHeight=function(){return this.centerHeightLastTime;};BorderLayout.prototype.layoutWidth=function(){var totalWidth=_.offsetWidth(this.eGui);var eastWidth=_.offsetWidth(this.eEastWrapper);var westWidth=_.offsetWidth(this.eWestWrapper);var centerWidth=totalWidth-eastWidth-westWidth;if(centerWidth<0){centerWidth=0;}this.eCenterWrapper.style.width=centerWidth+'px';};BorderLayout.prototype.setEastVisible=function(visible){if(this.eEastWrapper){this.eEastWrapper.style.display=visible?'':'none';}this.doLayout();};BorderLayout.prototype.setupOverlays=function(){ // if no overlays, just remove the panel
	if(!this.overlays){this.eOverlayWrapper.parentNode.removeChild(this.eOverlayWrapper);return;}this.hideOverlay(); //
	//this.setOverlayVisible(false);
	};BorderLayout.prototype.hideOverlay=function(){_.removeAllChildren(this.eOverlayWrapper);this.eOverlayWrapper.style.display='none';};BorderLayout.prototype.showOverlay=function(key){var overlay=this.overlays?this.overlays[key]:null;if(overlay){_.removeAllChildren(this.eOverlayWrapper);this.eOverlayWrapper.style.display='';this.eOverlayWrapper.appendChild(overlay);}else {console.log('ag-Grid: unknown overlay');this.hideOverlay();}};BorderLayout.prototype.setSouthVisible=function(visible){if(this.eSouthWrapper){this.eSouthWrapper.style.display=visible?'':'none';}this.doLayout();};return BorderLayout;}();grid.BorderLayout=BorderLayout;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path="../utils.ts" />
	/// <reference path="../layout/borderLayout.ts" />
	var ag;(function(ag){var grid;(function(grid){ // the long lines below are on purpose, otherwise there is while space between some of the dives that
	// we do not want to have, and this white space ends up as gaps in some of the browsers
	var gridHtml="<div>\n                <!-- header -->\n                <div class=\"ag-header\">\n                    <div class=\"ag-pinned-left-header\"></div><div class=\"ag-pinned-right-header\"></div><div class=\"ag-header-viewport\"><div class=\"ag-header-container\"></div></div>\n                </div>\n                <!-- floating top -->\n                <div class=\"ag-floating-top\">\n                    <div class=\"ag-pinned-left-floating-top\"></div><div class=\"ag-pinned-right-floating-top\"></div><div class=\"ag-floating-top-viewport\"><div class=\"ag-floating-top-container\"></div></div>\n                </div>\n                <!-- floating bottom -->\n                <div class=\"ag-floating-bottom\">\n                    <div class=\"ag-pinned-left-floating-bottom\"></div><div class=\"ag-pinned-right-floating-bottom\"></div><div class=\"ag-floating-bottom-viewport\"><div class=\"ag-floating-bottom-container\"></div></div>\n                </div>\n                <!-- body -->\n                <div class=\"ag-body\">\n                    <div class=\"ag-pinned-left-cols-viewport\">\n                        <div class=\"ag-pinned-left-cols-container\"></div>\n                    </div>\n                    <div class=\"ag-pinned-right-cols-viewport\">\n                        <div class=\"ag-pinned-right-cols-container\"></div>\n                    </div>\n                    <div class=\"ag-body-viewport-wrapper\">\n                        <div class=\"ag-body-viewport\">\n                            <div class=\"ag-body-container\"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>";var gridForPrintHtml="<div>\n                <!-- header -->\n                <div class=\"ag-header-container\"></div>\n                <!-- floating top -->\n                <div class=\"ag-floating-top-container\"></div>\n                <!-- body -->\n                <div class=\"ag-body-container\"></div>\n                <!-- floating bottom -->\n                <div class=\"ag-floating-bottom-container\"></div>\n            </div>"; // wrapping in outer div, and wrapper, is needed to center the loading icon
	// The idea for centering came from here: http://www.vanseodesign.com/css/vertical-centering/
	var mainOverlayTemplate='<div class="ag-overlay-panel">'+'<div class="ag-overlay-wrapper ag-overlay-[OVERLAY_NAME]-wrapper">[OVERLAY_TEMPLATE]</div>'+'</div>';var defaultLoadingOverlayTemplate='<span class="ag-overlay-loading-center">[LOADING...]</span>';var defaultNoRowsOverlayTemplate='<span class="ag-overlay-no-rows-center">[NO_ROWS_TO_SHOW]</span>';var _=grid.Utils;var GridPanel=function(){function GridPanel(){this.scrollLagCounter=0;this.lastLeftPosition=-1;this.lastTopPosition=-1;}GridPanel.prototype.init=function(gridOptionsWrapper,columnModel,rowRenderer,masterSlaveService,loggerFactory,floatingRowModel){this.gridOptionsWrapper=gridOptionsWrapper; // makes code below more readable if we pull 'forPrint' out
	this.forPrint=this.gridOptionsWrapper.isForPrint();this.setupComponents();this.scrollWidth=_.getScrollbarWidth();this.columnModel=columnModel;this.rowRenderer=rowRenderer;this.masterSlaveService=masterSlaveService;this.floatingRowModel=floatingRowModel;this.logger=loggerFactory.create('GridPanel');};GridPanel.prototype.getLayout=function(){return this.layout;};GridPanel.prototype.setupComponents=function(){if(this.forPrint){this.eRoot=_.loadTemplate(gridForPrintHtml);_.addCssClass(this.eRoot,'ag-root ag-no-scrolls');}else {this.eRoot=_.loadTemplate(gridHtml);_.addCssClass(this.eRoot,'ag-root ag-scrolls');}this.findElements();this.layout=new grid.BorderLayout({overlays:{loading:_.loadTemplate(this.createLoadingOverlayTemplate()),noRows:_.loadTemplate(this.createNoRowsOverlayTemplate())},center:this.eRoot,dontFill:this.forPrint,name:'eGridPanel'});this.layout.addSizeChangeListener(this.onBodyHeightChange.bind(this));this.addScrollListener();if(this.gridOptionsWrapper.isSuppressHorizontalScroll()){this.eBodyViewport.style.overflowX='hidden';}};GridPanel.prototype.getPinnedLeftFloatingTop=function(){return this.ePinnedLeftFloatingTop;};GridPanel.prototype.getPinnedRightFloatingTop=function(){return this.ePinnedRightFloatingTop;};GridPanel.prototype.getFloatingTopContainer=function(){return this.eFloatingTopContainer;};GridPanel.prototype.getPinnedLeftFloatingBottom=function(){return this.ePinnedLeftFloatingBottom;};GridPanel.prototype.getPinnedRightFloatingBottom=function(){return this.ePinnedRightFloatingBottom;};GridPanel.prototype.getFloatingBottomContainer=function(){return this.eFloatingBottomContainer;};GridPanel.prototype.createOverlayTemplate=function(name,defaultTemplate,userProvidedTemplate){var template=mainOverlayTemplate.replace('[OVERLAY_NAME]',name);if(userProvidedTemplate){template=template.replace('[OVERLAY_TEMPLATE]',userProvidedTemplate);}else {template=template.replace('[OVERLAY_TEMPLATE]',defaultTemplate);}return template;};GridPanel.prototype.createLoadingOverlayTemplate=function(){var userProvidedTemplate=this.gridOptionsWrapper.getOverlayLoadingTemplate();var templateNotLocalised=this.createOverlayTemplate('loading',defaultLoadingOverlayTemplate,userProvidedTemplate);var localeTextFunc=this.gridOptionsWrapper.getLocaleTextFunc();var templateLocalised=templateNotLocalised.replace('[LOADING...]',localeTextFunc('loadingOoo','Loading...'));return templateLocalised;};GridPanel.prototype.createNoRowsOverlayTemplate=function(){var userProvidedTemplate=this.gridOptionsWrapper.getOverlayNoRowsTemplate();var templateNotLocalised=this.createOverlayTemplate('no-rows',defaultNoRowsOverlayTemplate,userProvidedTemplate);var localeTextFunc=this.gridOptionsWrapper.getLocaleTextFunc();var templateLocalised=templateNotLocalised.replace('[NO_ROWS_TO_SHOW]',localeTextFunc('noRowsToShow','No Rows To Show'));return templateLocalised;};GridPanel.prototype.ensureIndexVisible=function(index){this.logger.log('ensureIndexVisible: '+index);var lastRow=this.rowModel.getVirtualRowCount();if(typeof index!=='number'||index<0||index>=lastRow){console.warn('invalid row index for ensureIndexVisible: '+index);return;}var nodeAtIndex=this.rowModel.getVirtualRow(index);var rowTopPixel=nodeAtIndex.rowTop;var rowBottomPixel=rowTopPixel+nodeAtIndex.rowHeight;var viewportTopPixel=this.eBodyViewport.scrollTop;var viewportHeight=this.eBodyViewport.offsetHeight;var scrollShowing=this.isHorizontalScrollShowing();if(scrollShowing){viewportHeight-=this.scrollWidth;}var viewportBottomPixel=viewportTopPixel+viewportHeight;var viewportScrolledPastRow=viewportTopPixel>rowTopPixel;var viewportScrolledBeforeRow=viewportBottomPixel<rowBottomPixel;var eViewportToScroll=this.columnModel.isPinningRight()?this.ePinnedRightColsViewport:this.eBodyViewport;if(viewportScrolledPastRow){ // if row is before, scroll up with row at top
	eViewportToScroll.scrollTop=rowTopPixel;}else if(viewportScrolledBeforeRow){ // if row is below, scroll down with row at bottom
	var newScrollPosition=rowBottomPixel-viewportHeight;eViewportToScroll.scrollTop=newScrollPosition;} // otherwise, row is already in view, so do nothing
	};GridPanel.prototype.isHorizontalScrollShowing=function(){var result=this.eBodyViewport.clientWidth<this.eBodyViewport.scrollWidth;return result;};GridPanel.prototype.isVerticalScrollShowing=function(){if(this.columnModel.isPinningRight()){ // if pinning right, then the scroll bar can show, however for some reason
	// it overlays the grid and doesn't take space.
	return false;}else {return this.eBodyViewport.clientHeight<this.eBodyViewport.scrollHeight;}}; // gets called every 500 ms. we use this to set padding on right pinned column
	GridPanel.prototype.periodicallyCheck=function(){if(this.columnModel.isPinningRight()){var bodyHorizontalScrollShowing=this.eBodyViewport.clientWidth<this.eBodyViewport.scrollWidth;if(bodyHorizontalScrollShowing){this.ePinnedRightColsContainer.style.marginBottom=this.scrollWidth+'px';}else {this.ePinnedRightColsContainer.style.marginBottom='';}}};GridPanel.prototype.ensureColIndexVisible=function(index){var leftColumns=this.columnModel.getDisplayedLeftColumns();var centerColumns=this.columnModel.getDisplayedCenterColumns();var minAllowedIndex=leftColumns.length;var maxAllowedIndex=minAllowedIndex+centerColumns.length-1;var indexIsInRange=index>=minAllowedIndex&&index<=maxAllowedIndex;if(!indexIsInRange){console.warn('index is not in range, should be between '+minAllowedIndex+' and '+maxAllowedIndex);console.warn('Remember it makes no sense to scroll to a pinned column');return;}var centerIndex=index-leftColumns.length;var column=centerColumns[centerIndex]; // sum up all col width to the let to get the start pixel
	var colLeftPixel=0;for(var i=0;i<centerIndex;i++){colLeftPixel+=centerColumns[i].getActualWidth();}var colRightPixel=colLeftPixel+column.getActualWidth();var viewportLeftPixel=this.eBodyViewport.scrollLeft;var viewportWidth=this.eBodyViewport.offsetWidth;var scrollShowing=this.eBodyViewport.clientHeight<this.eBodyViewport.scrollHeight;if(scrollShowing){viewportWidth-=this.scrollWidth;}var viewportRightPixel=viewportLeftPixel+viewportWidth;var viewportScrolledPastCol=viewportLeftPixel>colLeftPixel;var viewportScrolledBeforeCol=viewportRightPixel<colRightPixel;if(viewportScrolledPastCol){ // if viewport's left side is after col's left side, scroll right to pull col into viewport at left
	this.eBodyViewport.scrollLeft=colLeftPixel;}else if(viewportScrolledBeforeCol){ // if viewport's right side is before col's right side, scroll left to pull col into viewport at right
	var newScrollPosition=colRightPixel-viewportWidth;this.eBodyViewport.scrollLeft=newScrollPosition;} // otherwise, col is already in view, so do nothing
	};GridPanel.prototype.showLoadingOverlay=function(){if(!this.gridOptionsWrapper.isSuppressLoadingOverlay()){this.layout.showOverlay('loading');}};GridPanel.prototype.showNoRowsOverlay=function(){if(!this.gridOptionsWrapper.isSuppressNoRowsOverlay()){this.layout.showOverlay('noRows');}};GridPanel.prototype.hideOverlay=function(){this.layout.hideOverlay();};GridPanel.prototype.getWidthForSizeColsToFit=function(){var availableWidth=this.eBody.clientWidth;var scrollShowing=this.isVerticalScrollShowing();if(scrollShowing){availableWidth-=this.scrollWidth;}return availableWidth;}; // method will call itself if no available width. this covers if the grid
	// isn't visible, but is just about to be visible.
	GridPanel.prototype.sizeColumnsToFit=function(nextTimeout){var _this=this;var availableWidth=this.getWidthForSizeColsToFit();if(availableWidth>0){this.columnModel.sizeColumnsToFit(availableWidth);}else {if(nextTimeout===undefined){setTimeout(function(){_this.sizeColumnsToFit(100);},0);}else if(nextTimeout===100){setTimeout(function(){_this.sizeColumnsToFit(-1);},100);}else {console.log('ag-Grid: tried to call sizeColumnsToFit() but the grid is coming back with zero width, mabye the grid is not visible yet on the screen?');}}};GridPanel.prototype.setRowModel=function(rowModel){this.rowModel=rowModel;};GridPanel.prototype.getBodyContainer=function(){return this.eBodyContainer;};GridPanel.prototype.getBodyViewport=function(){return this.eBodyViewport;};GridPanel.prototype.getPinnedLeftColsContainer=function(){return this.ePinnedLeftColsContainer;};GridPanel.prototype.getPinnedRightColsContainer=function(){return this.ePinnedRightColsContainer;};GridPanel.prototype.getHeaderContainer=function(){return this.eHeaderContainer;};GridPanel.prototype.getRoot=function(){return this.eRoot;};GridPanel.prototype.getPinnedLeftHeader=function(){return this.ePinnedLeftHeader;};GridPanel.prototype.getPinnedRightHeader=function(){return this.ePinnedRightHeader;};GridPanel.prototype.getRowsParent=function(){return this.eParentsOfRows;};GridPanel.prototype.queryHtmlElement=function(selector){return this.eRoot.querySelector(selector);};GridPanel.prototype.findElements=function(){if(this.forPrint){this.eHeaderContainer=this.queryHtmlElement('.ag-header-container');this.eBodyContainer=this.queryHtmlElement('.ag-body-container');this.eFloatingTopContainer=this.queryHtmlElement('.ag-floating-top-container');this.eFloatingBottomContainer=this.queryHtmlElement('.ag-floating-bottom-container');this.eParentsOfRows=[this.eBodyContainer,this.eFloatingTopContainer,this.eFloatingBottomContainer];}else {this.eBody=this.queryHtmlElement('.ag-body');this.eBodyContainer=this.queryHtmlElement('.ag-body-container');this.eBodyViewport=this.queryHtmlElement('.ag-body-viewport');this.eBodyViewportWrapper=this.queryHtmlElement('.ag-body-viewport-wrapper');this.ePinnedLeftColsContainer=this.queryHtmlElement('.ag-pinned-left-cols-container');this.ePinnedRightColsContainer=this.queryHtmlElement('.ag-pinned-right-cols-container');this.ePinnedLeftColsViewport=this.queryHtmlElement('.ag-pinned-left-cols-viewport');this.ePinnedRightColsViewport=this.queryHtmlElement('.ag-pinned-right-cols-viewport');this.ePinnedLeftHeader=this.queryHtmlElement('.ag-pinned-left-header');this.ePinnedRightHeader=this.queryHtmlElement('.ag-pinned-right-header');this.eHeader=this.queryHtmlElement('.ag-header');this.eHeaderContainer=this.queryHtmlElement('.ag-header-container');this.eHeaderViewport=this.queryHtmlElement('.ag-header-viewport');this.eFloatingTop=this.queryHtmlElement('.ag-floating-top');this.ePinnedLeftFloatingTop=this.queryHtmlElement('.ag-pinned-left-floating-top');this.ePinnedRightFloatingTop=this.queryHtmlElement('.ag-pinned-right-floating-top');this.eFloatingTopContainer=this.queryHtmlElement('.ag-floating-top-container');this.eFloatingBottom=this.queryHtmlElement('.ag-floating-bottom');this.ePinnedLeftFloatingBottom=this.queryHtmlElement('.ag-pinned-left-floating-bottom');this.ePinnedRightFloatingBottom=this.queryHtmlElement('.ag-pinned-right-floating-bottom');this.eFloatingBottomContainer=this.queryHtmlElement('.ag-floating-bottom-container'); // for scrolls, all rows live in eBody (containing pinned and normal body)
	this.eParentsOfRows=[this.eBody,this.eFloatingTop,this.eFloatingBottom]; // IE9, Chrome, Safari, Opera
	this.ePinnedLeftColsViewport.addEventListener('mousewheel',this.pinnedLeftMouseWheelListener.bind(this));this.eBodyViewport.addEventListener('mousewheel',this.centerMouseWheelListener.bind(this)); // Firefox
	this.ePinnedLeftColsViewport.addEventListener('DOMMouseScroll',this.pinnedLeftMouseWheelListener.bind(this));this.eBodyViewport.addEventListener('DOMMouseScroll',this.centerMouseWheelListener.bind(this));}};GridPanel.prototype.getHeaderViewport=function(){return this.eHeaderViewport;};GridPanel.prototype.centerMouseWheelListener=function(event){ // we are only interested in mimicking the mouse wheel if we are pinning on the right,
	// as if we are not pinning on the right, then we have scrollbars in the center body, and
	// as such we just use the default browser wheel behaviour.
	if(this.columnModel.isPinningRight()){return this.generalMouseWheelListener(event,this.ePinnedRightColsViewport);}};GridPanel.prototype.pinnedLeftMouseWheelListener=function(event){var targetPanel;if(this.columnModel.isPinningRight()){targetPanel=this.ePinnedRightColsViewport;}else {targetPanel=this.eBodyViewport;}return this.generalMouseWheelListener(event,targetPanel);};GridPanel.prototype.generalMouseWheelListener=function(event,targetPanel){var delta;if(event.deltaY&&event.deltaX!=0){ // tested on chrome
	delta=event.deltaY;}else if(event.wheelDelta&&event.wheelDelta!=0){ // tested on IE
	delta=-event.wheelDelta;}else if(event.detail&&event.detail!=0){ // tested on Firefox. Firefox appears to be slower, 20px rather than the 100px in Chrome and IE
	delta=event.detail*20;}else { // couldn't find delta
	return;}var newTopPosition=this.eBodyViewport.scrollTop+delta;targetPanel.scrollTop=newTopPosition; // if we don't prevent default, then the whole browser will scroll also as well as the grid
	event.preventDefault();return false;};GridPanel.prototype.setBodyContainerWidth=function(){var mainRowWidth=this.columnModel.getBodyContainerWidth()+'px';this.eBodyContainer.style.width=mainRowWidth;if(!this.forPrint){this.eFloatingBottomContainer.style.width=mainRowWidth;this.eFloatingTopContainer.style.width=mainRowWidth;}};GridPanel.prototype.setPinnedColContainerWidth=function(){if(this.forPrint){ // pinned col doesn't exist when doing forPrint
	return;}var pinnedLeftWidth=this.columnModel.getPinnedLeftContainerWidth()+'px';this.ePinnedLeftColsContainer.style.width=pinnedLeftWidth;this.ePinnedLeftFloatingBottom.style.width=pinnedLeftWidth;this.ePinnedLeftFloatingTop.style.width=pinnedLeftWidth;this.eBodyViewportWrapper.style.marginLeft=pinnedLeftWidth;var pinnedRightWidth=this.columnModel.getPinnedRightContainerWidth()+'px';this.ePinnedRightColsContainer.style.width=pinnedRightWidth;this.ePinnedRightFloatingBottom.style.width=pinnedRightWidth;this.ePinnedRightFloatingTop.style.width=pinnedRightWidth;this.eBodyViewportWrapper.style.marginRight=pinnedRightWidth;};GridPanel.prototype.showPinnedColContainersIfNeeded=function(){ // no need to do this if not using scrolls
	if(this.forPrint){return;} //some browsers had layout issues with the blank divs, so if blank,
	//we don't display them
	if(this.columnModel.isPinningLeft()){this.ePinnedLeftHeader.style.display='inline-block';this.ePinnedLeftColsViewport.style.display='inline';}else {this.ePinnedLeftHeader.style.display='none';this.ePinnedLeftColsViewport.style.display='none';}if(this.columnModel.isPinningRight()){this.ePinnedRightHeader.style.display='inline-block';this.ePinnedRightColsViewport.style.display='inline';this.eBodyViewport.style.overflowY='hidden';}else {this.ePinnedRightHeader.style.display='none';this.ePinnedRightColsViewport.style.display='none';this.eBodyViewport.style.overflowY='auto';}};GridPanel.prototype.onBodyHeightChange=function(){this.sizeHeaderAndBody();};GridPanel.prototype.sizeHeaderAndBody=function(){if(this.forPrint){this.sizeHeaderAndBodyForPrint();}else {this.sizeHeaderAndBodyNormal();}};GridPanel.prototype.sizeHeaderAndBodyNormal=function(){var heightOfContainer=this.layout.getCentreHeight();if(!heightOfContainer){return;}var headerHeight=this.gridOptionsWrapper.getHeaderHeight();var numberOfRowsInHeader=this.columnModel.getHeaderRowCount();var totalHeaderHeight=headerHeight*numberOfRowsInHeader;this.eHeader.style['height']=totalHeaderHeight+'px'; // padding top covers the header and the floating rows on top
	var floatingTopHeight=this.floatingRowModel.getFloatingTopTotalHeight();var paddingTop=totalHeaderHeight+floatingTopHeight; // bottom is just the bottom floating rows
	var floatingBottomHeight=this.floatingRowModel.getFloatingBottomTotalHeight();var floatingBottomTop=heightOfContainer-floatingBottomHeight;var heightOfCentreRows=heightOfContainer-totalHeaderHeight-floatingBottomHeight-floatingTopHeight;this.eBody.style.paddingTop=paddingTop+'px';this.eBody.style.paddingBottom=floatingBottomHeight+'px';this.eFloatingTop.style.top=totalHeaderHeight+'px';this.eFloatingTop.style.height=floatingTopHeight+'px';this.eFloatingBottom.style.height=floatingBottomHeight+'px';this.eFloatingBottom.style.top=floatingBottomTop+'px';this.ePinnedLeftColsViewport.style.height=heightOfCentreRows+'px';this.ePinnedRightColsViewport.style.height=heightOfCentreRows+'px';};GridPanel.prototype.sizeHeaderAndBodyForPrint=function(){var headerHeightPixels=this.gridOptionsWrapper.getHeaderHeight()+'px';this.eHeaderContainer.style['height']=headerHeightPixels;};GridPanel.prototype.setHorizontalScrollPosition=function(hScrollPosition){this.eBodyViewport.scrollLeft=hScrollPosition;};GridPanel.prototype.addScrollListener=function(){var _this=this; // if printing, then no scrolling, so no point in listening for scroll events
	if(this.forPrint){return;}this.eBodyViewport.addEventListener('scroll',function(){ // we are always interested in horizontal scrolls of the body
	var newLeftPosition=_this.eBodyViewport.scrollLeft;if(newLeftPosition!==_this.lastLeftPosition){_this.lastLeftPosition=newLeftPosition;_this.horizontallyScrollHeaderCenterAndFloatingCenter(newLeftPosition);_this.masterSlaveService.fireHorizontalScrollEvent(newLeftPosition);} // if we are pinning to the right, then it's the right pinned container
	// that has the scroll.
	if(!_this.columnModel.isPinningRight()){var newTopPosition=_this.eBodyViewport.scrollTop;if(newTopPosition!==_this.lastTopPosition){_this.lastTopPosition=newTopPosition;_this.verticallyScrollLeftPinned(newTopPosition);_this.requestDrawVirtualRows();}}});this.ePinnedRightColsViewport.addEventListener('scroll',function(){var newTopPosition=_this.ePinnedRightColsViewport.scrollTop;if(newTopPosition!==_this.lastTopPosition){_this.lastTopPosition=newTopPosition;_this.verticallyScrollLeftPinned(newTopPosition);_this.verticallyScrollBody(newTopPosition);_this.requestDrawVirtualRows();}}); // this means the pinned panel was moved, which can only
	// happen when the user is navigating in the pinned container
	// as the pinned col should never scroll. so we rollback
	// the scroll on the pinned.
	this.ePinnedLeftColsViewport.addEventListener('scroll',function(){_this.ePinnedLeftColsViewport.scrollTop=0;});};GridPanel.prototype.requestDrawVirtualRows=function(){var _this=this; // if we are in IE or Safari, then we only redraw if there was no scroll event
	// in the 50ms following this scroll event. without this, these browsers have
	// a bad scrolling feel, where the redraws clog the scroll experience
	// (makes the scroll clunky and sticky). this method is like throttling
	// the scroll events.
	var useScrollLag; // let the user override scroll lag option
	if(this.gridOptionsWrapper.isSuppressScrollLag()){useScrollLag=false;}else if(this.gridOptionsWrapper.getIsScrollLag()){useScrollLag=this.gridOptionsWrapper.getIsScrollLag()();}else {useScrollLag=_.isBrowserIE()||_.isBrowserSafari();}if(useScrollLag){this.scrollLagCounter++;var scrollLagCounterCopy=this.scrollLagCounter;setTimeout(function(){if(_this.scrollLagCounter===scrollLagCounterCopy){_this.rowRenderer.drawVirtualRows();}},50);}else {this.rowRenderer.drawVirtualRows();}};GridPanel.prototype.horizontallyScrollHeaderCenterAndFloatingCenter=function(bodyLeftPosition){ // this.eHeaderContainer.style.transform = 'translate3d(' + -bodyLeftPosition + 'px,0,0)';
	this.eHeaderContainer.style.left=-bodyLeftPosition+'px';this.eFloatingBottomContainer.style.left=-bodyLeftPosition+'px';this.eFloatingTopContainer.style.left=-bodyLeftPosition+'px';};GridPanel.prototype.verticallyScrollLeftPinned=function(bodyTopPosition){ // this.ePinnedColsContainer.style.transform = 'translate3d(0,' + -bodyTopPosition + 'px,0)';
	this.ePinnedLeftColsContainer.style.top=-bodyTopPosition+'px';};GridPanel.prototype.verticallyScrollBody=function(position){this.eBodyViewport.scrollTop=position;};return GridPanel;}();grid.GridPanel=GridPanel;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path="../utils.ts" />
	var ag;(function(ag){var grid;(function(grid){var _=grid.Utils;var DragAndDropService=function(){function DragAndDropService(){}DragAndDropService.prototype.init=function(loggerFactory){this.logger=loggerFactory.create('DragAndDropService'); // need to clean this up, add to 'finished' logic in grid
	var that=this;this.mouseUpEventListener=function listener(){that.stopDragging();};document.addEventListener('mouseup',this.mouseUpEventListener);this.logger.log('initialised');};DragAndDropService.prototype.destroy=function(){document.removeEventListener('mouseup',this.mouseUpEventListener);this.logger.log('destroyed');};DragAndDropService.prototype.stopDragging=function(){if(this.dragItem){this.setDragCssClasses(this.dragItem.eDragSource,false);this.dragItem=null;}};DragAndDropService.prototype.setDragCssClasses=function(eListItem,dragging){_.addOrRemoveCssClass(eListItem,'ag-dragging',dragging);_.addOrRemoveCssClass(eListItem,'ag-not-dragging',!dragging);};DragAndDropService.prototype.addDragSource=function(eDragSource,dragSourceCallback){this.setDragCssClasses(eDragSource,false);eDragSource.addEventListener('mousedown',this.onMouseDownDragSource.bind(this,eDragSource,dragSourceCallback));};DragAndDropService.prototype.onMouseDownDragSource=function(eDragSource,dragSourceCallback){if(this.dragItem){this.stopDragging();}var data;if(dragSourceCallback.getData){data=dragSourceCallback.getData();}var containerId;if(dragSourceCallback.getContainerId){containerId=dragSourceCallback.getContainerId();}this.dragItem={eDragSource:eDragSource,data:data,containerId:containerId};this.setDragCssClasses(this.dragItem.eDragSource,true);};DragAndDropService.prototype.addDropTarget=function(eDropTarget,dropTargetCallback){var mouseIn=false;var acceptDrag=false;var that=this;eDropTarget.addEventListener('mouseover',function(){if(!mouseIn){mouseIn=true;if(that.dragItem){acceptDrag=dropTargetCallback.acceptDrag(that.dragItem);}else {acceptDrag=false;}}});eDropTarget.addEventListener('mouseout',function(){if(acceptDrag){dropTargetCallback.noDrop();}mouseIn=false;acceptDrag=false;});eDropTarget.addEventListener('mouseup',function(){ // dragItem should never be null, checking just in case
	if(acceptDrag&&that.dragItem){dropTargetCallback.drop(that.dragItem);}});};return DragAndDropService;}();grid.DragAndDropService=DragAndDropService;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path="../utils.ts" />
	/// <reference path="../dragAndDrop/dragAndDropService" />
	/// <amd-dependency path="text!agList.html"/>
	var ag;(function(ag){var grid;(function(grid){var utils=grid.Utils;var template='<div class="ag-list-selection">'+'<div>'+'<div ag-repeat class="ag-list-item">'+'</div>'+'</div>'+'</div>';var DropTargetLocation;(function(DropTargetLocation){DropTargetLocation[DropTargetLocation["NOT_DROP_TARGET"]=0]="NOT_DROP_TARGET";DropTargetLocation[DropTargetLocation["DROP_TARGET_ABOVE"]=1]="DROP_TARGET_ABOVE";DropTargetLocation[DropTargetLocation["DROP_TARGET_BELOW"]=2]="DROP_TARGET_BELOW";})(DropTargetLocation||(DropTargetLocation={}));;var AgList=function(){function AgList(dragAndDropService){this.readOnly=false;this.dragAndDropService=dragAndDropService;this.setupComponents();this.uniqueId='CheckboxSelection-'+Math.random();this.modelChangedListeners=[];this.itemSelectedListeners=[];this.itemMovedListeners=[];this.beforeDropListeners=[];this.dragSources=[];this.setupAsDropTarget();}AgList.prototype.setReadOnly=function(readOnly){this.readOnly=readOnly;};AgList.prototype.setEmptyMessage=function(emptyMessage){this.emptyMessage=emptyMessage;this.refreshView();};AgList.prototype.getUniqueId=function(){return this.uniqueId;};AgList.prototype.addStyles=function(styles){utils.addStylesToElement(this.eGui,styles);};AgList.prototype.addCssClass=function(cssClass){utils.addCssClass(this.eGui,cssClass);};AgList.prototype.addDragSource=function(dragSource){this.dragSources.push(dragSource);};AgList.prototype.addModelChangedListener=function(listener){this.modelChangedListeners.push(listener);};AgList.prototype.addItemSelectedListener=function(listener){this.itemSelectedListeners.push(listener);};AgList.prototype.addItemMovedListener=function(listener){this.itemMovedListeners.push(listener);};AgList.prototype.addBeforeDropListener=function(listener){this.beforeDropListeners.push(listener);};AgList.prototype.fireItemMoved=function(fromIndex,toIndex){for(var i=0;i<this.itemMovedListeners.length;i++){this.itemMovedListeners[i](fromIndex,toIndex);}};AgList.prototype.fireModelChanged=function(){for(var i=0;i<this.modelChangedListeners.length;i++){this.modelChangedListeners[i](this.model);}};AgList.prototype.fireItemSelected=function(item){for(var i=0;i<this.itemSelectedListeners.length;i++){this.itemSelectedListeners[i](item);}};AgList.prototype.fireBeforeDrop=function(item){for(var i=0;i<this.beforeDropListeners.length;i++){this.beforeDropListeners[i](item);}};AgList.prototype.setupComponents=function(){this.eGui=utils.loadTemplate(template);this.eFilterValueTemplate=this.eGui.querySelector("[ag-repeat]");this.eListParent=this.eFilterValueTemplate.parentNode;utils.removeAllChildren(this.eListParent);};AgList.prototype.setModel=function(model){this.model=model;this.refreshView();};AgList.prototype.getModel=function(){return this.model;};AgList.prototype.setCellRenderer=function(cellRenderer){this.cellRenderer=cellRenderer;};AgList.prototype.refreshView=function(){utils.removeAllChildren(this.eListParent);if(this.model&&this.model.length>0){this.insertRows();}else {this.insertBlankMessage();}};AgList.prototype.insertRows=function(){for(var i=0;i<this.model.length;i++){var item=this.model[i]; //var text = this.getText(item);
	//var selected = this.isSelected(item);
	var eListItem=this.eFilterValueTemplate.cloneNode(true);if(this.cellRenderer){var params={value:item};utils.useRenderer(eListItem,this.cellRenderer,params);}else {eListItem.innerHTML=item;}eListItem.addEventListener('click',this.fireItemSelected.bind(this,item));this.addDragAndDropToListItem(eListItem,item);this.eListParent.appendChild(eListItem);}};AgList.prototype.insertBlankMessage=function(){if(this.emptyMessage){var eMessage=document.createElement('div');eMessage.style.color='grey';eMessage.style.padding='4px';eMessage.style.textAlign='center';eMessage.innerHTML=this.emptyMessage;this.eListParent.appendChild(eMessage);}};AgList.prototype.setupAsDropTarget=function(){this.dragAndDropService.addDropTarget(this.eGui,{acceptDrag:this.externalAcceptDrag.bind(this),drop:this.externalDrop.bind(this),noDrop:this.externalNoDrop.bind(this)});};AgList.prototype.externalAcceptDrag=function(dragEvent){var allowedSource=this.dragSources.indexOf(dragEvent.containerId)>=0;if(!allowedSource){return false;}var alreadyHaveCol=this.model.indexOf(dragEvent.data)>=0;if(alreadyHaveCol){return false;}this.eGui.style.backgroundColor='lightgreen';return true;};AgList.prototype.externalDrop=function(dragEvent){var newListItem=dragEvent.data;this.fireBeforeDrop(newListItem);if(!this.readOnly){this.addItemToList(newListItem);}this.eGui.style.backgroundColor='';};AgList.prototype.externalNoDrop=function(){this.eGui.style.backgroundColor='';};AgList.prototype.addItemToList=function(newItem){this.model.push(newItem);this.refreshView();this.fireModelChanged();};AgList.prototype.addDragAndDropToListItem=function(eListItem,item){var that=this;this.dragAndDropService.addDragSource(eListItem,{getData:function getData(){return item;},getContainerId:function getContainerId(){return that.uniqueId;}});this.dragAndDropService.addDropTarget(eListItem,{acceptDrag:function acceptDrag(dragItem){return that.internalAcceptDrag(item,dragItem,eListItem);},drop:function drop(dragItem){that.internalDrop(item,dragItem.data);},noDrop:function noDrop(){that.internalNoDrop(eListItem);}});};AgList.prototype.internalAcceptDrag=function(targetColumn,dragItem,eListItem){var result=dragItem.data!==targetColumn&&dragItem.containerId===this.uniqueId;if(result){if(this.dragAfterThisItem(targetColumn,dragItem.data)){this.setDropCssClasses(eListItem,DropTargetLocation.DROP_TARGET_ABOVE);}else {this.setDropCssClasses(eListItem,DropTargetLocation.DROP_TARGET_BELOW);}}return result;};AgList.prototype.internalDrop=function(targetColumn,draggedColumn){var oldIndex=this.model.indexOf(draggedColumn);var newIndex=this.model.indexOf(targetColumn);if(this.readOnly){this.fireItemMoved(oldIndex,newIndex);}else {this.model.splice(oldIndex,1);this.model.splice(newIndex,0,draggedColumn);this.refreshView();this.fireModelChanged();}};AgList.prototype.internalNoDrop=function(eListItem){this.setDropCssClasses(eListItem,DropTargetLocation.NOT_DROP_TARGET);};AgList.prototype.dragAfterThisItem=function(targetColumn,draggedColumn){return this.model.indexOf(targetColumn)<this.model.indexOf(draggedColumn);};AgList.prototype.setDropCssClasses=function(eListItem,state){utils.addOrRemoveCssClass(eListItem,'ag-not-drop-target',state===DropTargetLocation.NOT_DROP_TARGET);utils.addOrRemoveCssClass(eListItem,'ag-drop-target-above',state===DropTargetLocation.DROP_TARGET_ABOVE);utils.addOrRemoveCssClass(eListItem,'ag-drop-target-below',state===DropTargetLocation.DROP_TARGET_BELOW);};AgList.prototype.getGui=function(){return this.eGui;};return AgList;}();grid.AgList=AgList;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path="../widgets/agList.ts" />
	/// <reference path="../utils.ts" />
	/// <reference path="../svgFactory.ts" />
	/// <reference path="../constants.ts" />
	/// <reference path="../layout/BorderLayout.ts" />
	var ag;(function(ag){var grid;(function(grid){var utils=grid.Utils;var svgFactory=grid.SvgFactory.getInstance();var ColumnSelectionPanel=function(){function ColumnSelectionPanel(columnController,gridOptionsWrapper,eventService,dragAndDropService){this.dragAndDropService=dragAndDropService;this.gridOptionsWrapper=gridOptionsWrapper;this.columnController=columnController;this.setupComponents();eventService.addEventListener(grid.Events.EVENT_COLUMN_EVERYTHING_CHANGED,this.columnsChanged.bind(this));eventService.addEventListener(grid.Events.EVENT_COLUMN_MOVED,this.columnsChanged.bind(this));eventService.addEventListener(grid.Events.EVENT_COLUMN_VISIBLE,this.columnsChanged.bind(this));}ColumnSelectionPanel.prototype.columnsChanged=function(){this.cColumnList.setModel(this.columnController.getAllColumns());};ColumnSelectionPanel.prototype.getDragSource=function(){return this.cColumnList.getUniqueId();};ColumnSelectionPanel.prototype.columnCellRenderer=function(params){var column=params.value;var colDisplayName=this.columnController.getDisplayNameForCol(column);var eResult=document.createElement('span');var eVisibleIcons=document.createElement('span');utils.addCssClass(eVisibleIcons,'ag-visible-icons');var eShowing=utils.createIcon('columnVisible',this.gridOptionsWrapper,column,svgFactory.createColumnShowingSvg);var eHidden=utils.createIcon('columnHidden',this.gridOptionsWrapper,column,svgFactory.createColumnHiddenSvg);eVisibleIcons.appendChild(eShowing);eVisibleIcons.appendChild(eHidden);eShowing.style.display=column.visible?'':'none';eHidden.style.display=column.visible?'none':'';eResult.appendChild(eVisibleIcons);var eValue=document.createElement('span');eValue.innerHTML=colDisplayName;eResult.appendChild(eValue);if(!column.visible){utils.addCssClass(eResult,'ag-column-not-visible');} // change visible if use clicks the visible icon, or if row is double clicked
	eVisibleIcons.addEventListener('click',showEventListener);var that=this;function showEventListener(){that.columnController.setColumnVisible(column,!column.visible);}return eResult;};ColumnSelectionPanel.prototype.setupComponents=function(){this.cColumnList=new grid.AgList(this.dragAndDropService);this.cColumnList.setCellRenderer(this.columnCellRenderer.bind(this));this.cColumnList.addStyles({height:'100%',overflow:'auto'});this.cColumnList.addItemMovedListener(this.onItemMoved.bind(this));this.cColumnList.setReadOnly(true);var localeTextFunc=this.gridOptionsWrapper.getLocaleTextFunc();var columnsLocalText=localeTextFunc('columns','Columns');var eNorthPanel=document.createElement('div');eNorthPanel.innerHTML='<div style="text-align: center;">'+columnsLocalText+'</div>';this.layout=new grid.BorderLayout({center:this.cColumnList.getGui(),north:eNorthPanel});};ColumnSelectionPanel.prototype.onItemMoved=function(fromIndex,toIndex){this.columnController.moveColumn(fromIndex,toIndex);};ColumnSelectionPanel.prototype.getGui=function(){return this.eRootPanel.getGui();};return ColumnSelectionPanel;}();grid.ColumnSelectionPanel=ColumnSelectionPanel;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path="../widgets/agList.ts" />
	/// <reference path="../utils.ts" />
	/// <reference path="../svgFactory.ts" />
	/// <reference path="../layout/BorderLayout.ts" />
	/// <reference path="../constants.ts" />
	var ag;(function(ag){var grid;(function(grid){var _=grid.Utils;var svgFactory=grid.SvgFactory.getInstance();var GroupSelectionPanel=function(){function GroupSelectionPanel(columnController,inMemoryRowController,gridOptionsWrapper,eventService,dragAndDropService){this.dragAndDropService=dragAndDropService;this.gridOptionsWrapper=gridOptionsWrapper;this.setupComponents();this.columnController=columnController;this.inMemoryRowController=inMemoryRowController;eventService.addEventListener(grid.Events.EVENT_COLUMN_EVERYTHING_CHANGED,this.columnsChanged.bind(this));eventService.addEventListener(grid.Events.EVENT_COLUMN_ROW_GROUP_CHANGE,this.columnsChanged.bind(this));}GroupSelectionPanel.prototype.columnsChanged=function(){this.cColumnList.setModel(this.columnController.getRowGroupColumns());};GroupSelectionPanel.prototype.addDragSource=function(dragSource){this.cColumnList.addDragSource(dragSource);};GroupSelectionPanel.prototype.columnCellRenderer=function(params){var column=params.value;var colDisplayName=this.columnController.getDisplayNameForCol(column);var eResult=document.createElement('span');var eRemove=_.createIcon('columnRemoveFromGroup',this.gridOptionsWrapper,column,svgFactory.createArrowUpSvg);_.addCssClass(eRemove,'ag-visible-icons');eResult.appendChild(eRemove);var that=this;eRemove.addEventListener('click',function(){that.columnController.removeRowGroupColumn(column);});var eValue=document.createElement('span');eValue.innerHTML=colDisplayName;eResult.appendChild(eValue);return eResult;};GroupSelectionPanel.prototype.setupComponents=function(){var localeTextFunc=this.gridOptionsWrapper.getLocaleTextFunc();var columnsLocalText=localeTextFunc('rowGroupColumns','Row Groupings');var rowGroupColumnsEmptyMessage=localeTextFunc('rowGroupColumnsEmptyMessage','Drag columns from above to group rows');this.cColumnList=new grid.AgList(this.dragAndDropService);this.cColumnList.setCellRenderer(this.columnCellRenderer.bind(this));this.cColumnList.addBeforeDropListener(this.onBeforeDrop.bind(this));this.cColumnList.addItemMovedListener(this.onItemMoved.bind(this));this.cColumnList.setEmptyMessage(rowGroupColumnsEmptyMessage);this.cColumnList.addStyles({height:'100%',overflow:'auto'});this.cColumnList.setReadOnly(true);var eNorthPanel=document.createElement('div');eNorthPanel.style.paddingTop='10px';eNorthPanel.innerHTML='<div style="text-align: center;">'+columnsLocalText+'</div>';this.layout=new grid.BorderLayout({center:this.cColumnList.getGui(),north:eNorthPanel});};GroupSelectionPanel.prototype.onBeforeDrop=function(newItem){this.columnController.addRowGroupColumn(newItem);};GroupSelectionPanel.prototype.onItemMoved=function(fromIndex,toIndex){this.columnController.moveRowGroupColumn(fromIndex,toIndex);};return GroupSelectionPanel;}();grid.GroupSelectionPanel=GroupSelectionPanel;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path="../utils.ts" />
	/// <reference path="./agList.ts" />
	/// <reference path="../svgFactory.ts" />
	/// <reference path="../widgets/agPopupService.ts" />
	var ag;(function(ag){var grid;(function(grid){var utils=grid.Utils;var svgFactory=grid.SvgFactory.getInstance();var AgDropdownList=function(){function AgDropdownList(popupService,dragAndDropService){this.popupService=popupService;this.setupComponents(dragAndDropService);this.itemSelectedListeners=[];}AgDropdownList.prototype.setWidth=function(width){this.eValue.style.width=width+'px';this.agList.addStyles({width:width+'px'});};AgDropdownList.prototype.addItemSelectedListener=function(listener){this.itemSelectedListeners.push(listener);};AgDropdownList.prototype.fireItemSelected=function(item){for(var i=0;i<this.itemSelectedListeners.length;i++){this.itemSelectedListeners[i](item);}};AgDropdownList.prototype.setupComponents=function(dragAndDropService){this.eGui=document.createElement('span');this.eValue=document.createElement('span');this.eGui.appendChild(this.eValue);this.agList=new grid.AgList(dragAndDropService);this.eValue.addEventListener('click',this.onClick.bind(this));this.agList.addItemSelectedListener(this.itemSelected.bind(this));this.agList.addCssClass('ag-popup-list');utils.addStylesToElement(this.eValue,{border:'1px solid darkgrey',display:'inline-block',paddingLeft:2});utils.addStylesToElement(this.eGui,{position:'relative'});this.agList.addStyles({display:'inline-block',position:'absolute',top:0,left:0,backgroudColor:'white'});};AgDropdownList.prototype.itemSelected=function(item){this.setSelected(item);if(this.hidePopupCallback){this.hidePopupCallback();}this.fireItemSelected(item);};AgDropdownList.prototype.onClick=function(){var agListGui=this.agList.getGui();this.popupService.positionPopup(this.eGui,agListGui,false);this.hidePopupCallback=this.popupService.addAsModalPopup(agListGui,true);};AgDropdownList.prototype.getGui=function(){return this.eGui;};AgDropdownList.prototype.setSelected=function(item){this.selectedItem=item;this.refreshView();};AgDropdownList.prototype.setCellRenderer=function(cellRenderer){this.agList.setCellRenderer(cellRenderer);this.cellRenderer=cellRenderer;};AgDropdownList.prototype.refreshView=function(){utils.removeAllChildren(this.eValue);if(this.selectedItem){if(this.cellRenderer){var params={value:this.selectedItem};utils.useRenderer(this.eValue,this.cellRenderer,params);}else {this.eValue.appendChild(document.createTextNode(this.selectedItem));}}var eDownIcon=svgFactory.createSmallArrowDownSvg();eDownIcon.style.float='right';eDownIcon.style.marginTop='6';eDownIcon.style.marginRight='2';this.eValue.appendChild(eDownIcon);};AgDropdownList.prototype.setModel=function(model){this.agList.setModel(model);};return AgDropdownList;}();grid.AgDropdownList=AgDropdownList;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path="../widgets/agList.ts" />
	/// <reference path="../constants.ts" />
	/// <reference path="../utils.ts" />
	/// <reference path="../layout/borderLayout.ts" />
	/// <reference path="../svgFactory.ts" />
	/// <reference path="../widgets/agDropdownList.ts" />
	var ag;(function(ag){var grid;(function(grid){var svgFactory=grid.SvgFactory.getInstance();var constants=grid.Constants;var utils=grid.Utils;var ValuesSelectionPanel=function(){function ValuesSelectionPanel(columnController,gridOptionsWrapper,popupService,eventService,dragAndDropService){this.dragAndDropService=dragAndDropService;this.popupService=popupService;this.gridOptionsWrapper=gridOptionsWrapper;this.setupComponents();this.columnController=columnController;eventService.addEventListener(grid.Events.EVENT_COLUMN_EVERYTHING_CHANGED,this.columnsChanged.bind(this));eventService.addEventListener(grid.Events.EVENT_COLUMN_VALUE_CHANGE,this.columnsChanged.bind(this));}ValuesSelectionPanel.prototype.getLayout=function(){return this.layout;};ValuesSelectionPanel.prototype.columnsChanged=function(){this.cColumnList.setModel(this.columnController.getValueColumns());};ValuesSelectionPanel.prototype.addDragSource=function(dragSource){this.cColumnList.addDragSource(dragSource);};ValuesSelectionPanel.prototype.cellRenderer=function(params){var column=params.value;var colDisplayName=this.columnController.getDisplayNameForCol(column);var eResult=document.createElement('span');var eRemove=utils.createIcon('columnRemoveFromGroup',this.gridOptionsWrapper,column,svgFactory.createArrowUpSvg);utils.addCssClass(eRemove,'ag-visible-icons');eResult.appendChild(eRemove);var that=this;eRemove.addEventListener('click',function(){that.columnController.removeValueColumn(column);});var agValueType=new grid.AgDropdownList(this.popupService,this.dragAndDropService);agValueType.setModel([grid.Column.AGG_SUM,grid.Column.AGG_MIN,grid.Column.AGG_MAX]);agValueType.setSelected(column.aggFunc);agValueType.setWidth(45);agValueType.addItemSelectedListener(function(item){that.columnController.setColumnAggFunction(column,item);});eResult.appendChild(agValueType.getGui());var eValue=document.createElement('span');eValue.innerHTML=colDisplayName;eValue.style.paddingLeft='2px';eResult.appendChild(eValue);return eResult;};ValuesSelectionPanel.prototype.setupComponents=function(){var localeTextFunc=this.gridOptionsWrapper.getLocaleTextFunc();var columnsLocalText=localeTextFunc('valueColumns','Aggregations');var emptyMessage=localeTextFunc('valueColumnsEmptyMessage','Drag columns from above to aggregate values');this.cColumnList=new grid.AgList(this.dragAndDropService);this.cColumnList.setCellRenderer(this.cellRenderer.bind(this));this.cColumnList.setEmptyMessage(emptyMessage);this.cColumnList.addStyles({height:'100%',overflow:'auto'});this.cColumnList.addBeforeDropListener(this.beforeDropListener.bind(this));this.cColumnList.setReadOnly(true);var eNorthPanel=document.createElement('div');eNorthPanel.style.paddingTop='10px';eNorthPanel.innerHTML='<div style="text-align: center;">'+columnsLocalText+'</div>';this.layout=new grid.BorderLayout({center:this.cColumnList.getGui(),north:eNorthPanel});};ValuesSelectionPanel.prototype.beforeDropListener=function(newItem){this.columnController.addValueColumn(newItem);};return ValuesSelectionPanel;}();grid.ValuesSelectionPanel=ValuesSelectionPanel;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={}));var ag;(function(ag){var grid;(function(grid){var VerticalStack=function(){function VerticalStack(){this.isLayoutPanel=true;this.childPanels=[];this.eGui=document.createElement('div');this.eGui.style.height='100%';}VerticalStack.prototype.addPanel=function(panel,height){var component;if(panel.isLayoutPanel){this.childPanels.push(panel);component=panel.getGui();}else {component=panel;}if(height){component.style.height=height;}this.eGui.appendChild(component);};VerticalStack.prototype.getGui=function(){return this.eGui;};VerticalStack.prototype.doLayout=function(){for(var i=0;i<this.childPanels.length;i++){this.childPanels[i].doLayout();}};return VerticalStack;}();grid.VerticalStack=VerticalStack;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path="../utils.ts" />
	/// <reference path="./columnSelectionPanel.ts" />
	/// <reference path="./groupSelectionPanel.ts" />
	/// <reference path="./valuesSelectionPanel.ts" />
	/// <reference path="../layout/verticalStack.ts" />
	var ag;(function(ag){var grid;(function(grid){var utils=grid.Utils;var ToolPanel=function(){function ToolPanel(){this.layout=new grid.VerticalStack();}ToolPanel.prototype.init=function(columnController,inMemoryRowController,gridOptionsWrapper,popupService,eventService,dragAndDropService){var suppressGroupAndValues=gridOptionsWrapper.isToolPanelSuppressGroups();var suppressValues=gridOptionsWrapper.isToolPanelSuppressValues();var showGroups=!suppressGroupAndValues;var showValues=!suppressGroupAndValues&&!suppressValues; // top list, column reorder and visibility
	var columnSelectionPanel=new grid.ColumnSelectionPanel(columnController,gridOptionsWrapper,eventService,dragAndDropService);var heightColumnSelection=suppressGroupAndValues?'100%':'50%';this.layout.addPanel(columnSelectionPanel.layout,heightColumnSelection);var dragSource=columnSelectionPanel.getDragSource();if(showValues){var valuesSelectionPanel=new grid.ValuesSelectionPanel(columnController,gridOptionsWrapper,popupService,eventService,dragAndDropService);this.layout.addPanel(valuesSelectionPanel.getLayout(),'25%');valuesSelectionPanel.addDragSource(dragSource);}if(showGroups){var groupSelectionPanel=new grid.GroupSelectionPanel(columnController,inMemoryRowController,gridOptionsWrapper,eventService,dragAndDropService);var heightGroupSelection=showValues?'25%':'50%';this.layout.addPanel(groupSelectionPanel.layout,heightGroupSelection);groupSelectionPanel.addDragSource(dragSource);}var eGui=this.layout.getGui();utils.addCssClass(eGui,'ag-tool-panel-container');};return ToolPanel;}();grid.ToolPanel=ToolPanel;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path="colDef.ts" />
	/// <reference path="grid.ts" />
	/// <reference path="rendering/rowRenderer.ts" />
	/// <reference path="headerRendering/headerRenderer.ts" />
	/// <reference path="csvCreator.ts" />
	var ag;(function(ag){var grid;(function(grid_4){var GridApi=function(){function GridApi(grid,rowRenderer,headerRenderer,filterManager,columnController,inMemoryRowController,selectionController,gridOptionsWrapper,gridPanel,valueService,masterSlaveService,eventService,floatingRowModel){this.grid=grid;this.rowRenderer=rowRenderer;this.headerRenderer=headerRenderer;this.filterManager=filterManager;this.columnController=columnController;this.inMemoryRowController=inMemoryRowController;this.selectionController=selectionController;this.gridOptionsWrapper=gridOptionsWrapper;this.gridPanel=gridPanel;this.valueService=valueService;this.masterSlaveService=masterSlaveService;this.eventService=eventService;this.floatingRowModel=floatingRowModel;this.csvCreator=new grid_4.CsvCreator(this.inMemoryRowController,this.columnController,this.grid,this.valueService);} /** Used internally by grid. Not intended to be used by the client. Interface may change between releases. */GridApi.prototype.__getMasterSlaveService=function(){return this.masterSlaveService;};GridApi.prototype.getDataAsCsv=function(params){return this.csvCreator.getDataAsCsv(params);};GridApi.prototype.exportDataAsCsv=function(params){this.csvCreator.exportDataAsCsv(params);};GridApi.prototype.setDatasource=function(datasource){this.grid.setDatasource(datasource);};GridApi.prototype.onNewDatasource=function(){console.log('ag-Grid: onNewDatasource deprecated, please use setDatasource()');this.grid.setDatasource();};GridApi.prototype.setRowData=function(rowData){this.grid.setRowData(rowData);};GridApi.prototype.setRows=function(rows){console.log('ag-Grid: setRows deprecated, please use setRowData()');this.grid.setRowData(rows);};GridApi.prototype.onNewRows=function(){console.log('ag-Grid: onNewRows deprecated, please use setRowData()');this.grid.setRowData();};GridApi.prototype.setFloatingTopRowData=function(rows){this.floatingRowModel.setFloatingTopRowData(rows);this.gridPanel.onBodyHeightChange();this.refreshView();};GridApi.prototype.setFloatingBottomRowData=function(rows){this.floatingRowModel.setFloatingBottomRowData(rows);this.gridPanel.onBodyHeightChange();this.refreshView();};GridApi.prototype.onNewCols=function(){console.error("ag-Grid: deprecated, please call setColumnDefs instead providing a list of the defs");this.grid.setColumnDefs();};GridApi.prototype.setColumnDefs=function(colDefs){this.grid.setColumnDefs(colDefs);};GridApi.prototype.unselectAll=function(){console.error("unselectAll deprecated, call deselectAll instead");this.deselectAll();};GridApi.prototype.refreshRows=function(rowNodes){this.rowRenderer.refreshRows(rowNodes);};GridApi.prototype.refreshCells=function(rowNodes,colIds){this.rowRenderer.refreshCells(rowNodes,colIds);};GridApi.prototype.rowDataChanged=function(rows){this.rowRenderer.rowDataChanged(rows);};GridApi.prototype.refreshView=function(){this.rowRenderer.refreshView();};GridApi.prototype.softRefreshView=function(){this.rowRenderer.softRefreshView();};GridApi.prototype.refreshGroupRows=function(){this.rowRenderer.refreshGroupRows();};GridApi.prototype.refreshHeader=function(){ // need to review this - the refreshHeader should also refresh all icons in the header
	this.headerRenderer.refreshHeader();this.headerRenderer.updateFilterIcons();};GridApi.prototype.isAnyFilterPresent=function(){return this.filterManager.isAnyFilterPresent();};GridApi.prototype.isAdvancedFilterPresent=function(){return this.filterManager.isAdvancedFilterPresent();};GridApi.prototype.isQuickFilterPresent=function(){return this.filterManager.isQuickFilterPresent();};GridApi.prototype.getModel=function(){return this.grid.getRowModel();};GridApi.prototype.onGroupExpandedOrCollapsed=function(refreshFromIndex){this.grid.updateModelAndRefresh(grid_4.Constants.STEP_MAP,refreshFromIndex);};GridApi.prototype.expandAll=function(){this.inMemoryRowController.expandOrCollapseAll(true,null);this.grid.updateModelAndRefresh(grid_4.Constants.STEP_MAP);};GridApi.prototype.collapseAll=function(){this.inMemoryRowController.expandOrCollapseAll(false,null);this.grid.updateModelAndRefresh(grid_4.Constants.STEP_MAP);};GridApi.prototype.addVirtualRowListener=function(eventName,rowIndex,callback){if(typeof eventName!=='string'){console.log('ag-Grid: addVirtualRowListener has changed, the first parameter should be the event name, pleae check the documentation.');}this.grid.addVirtualRowListener(eventName,rowIndex,callback);};GridApi.prototype.setQuickFilter=function(newFilter){this.grid.onQuickFilterChanged(newFilter);};GridApi.prototype.selectIndex=function(index,tryMulti,suppressEvents){this.selectionController.selectIndex(index,tryMulti,suppressEvents);};GridApi.prototype.deselectIndex=function(index,suppressEvents){if(suppressEvents===void 0){suppressEvents=false;}this.selectionController.deselectIndex(index,suppressEvents);};GridApi.prototype.selectNode=function(node,tryMulti,suppressEvents){if(tryMulti===void 0){tryMulti=false;}if(suppressEvents===void 0){suppressEvents=false;}this.selectionController.selectNode(node,tryMulti,suppressEvents);};GridApi.prototype.deselectNode=function(node,suppressEvents){if(suppressEvents===void 0){suppressEvents=false;}this.selectionController.deselectNode(node,suppressEvents);};GridApi.prototype.selectAll=function(){this.selectionController.selectAll();this.rowRenderer.refreshView();};GridApi.prototype.deselectAll=function(){this.selectionController.deselectAll();this.rowRenderer.refreshView();};GridApi.prototype.recomputeAggregates=function(){this.inMemoryRowController.doAggregate();this.rowRenderer.refreshGroupRows();};GridApi.prototype.sizeColumnsToFit=function(){if(this.gridOptionsWrapper.isForPrint()){console.warn('ag-grid: sizeColumnsToFit does not work when forPrint=true');return;}var availableWidth=this.gridPanel.sizeColumnsToFit();};GridApi.prototype.showLoadingOverlay=function(){this.grid.showLoadingOverlay();};GridApi.prototype.showNoRowsOverlay=function(){this.grid.showNoRowsOverlay();};GridApi.prototype.hideOverlay=function(){this.grid.hideOverlay();};GridApi.prototype.showLoading=function(show){console.warn('ag-Grid: showLoading is deprecated, please use api.showLoadingOverlay() and api.hideOverlay() instead');if(show){this.grid.showLoadingOverlay();}else {this.grid.hideOverlay();}};GridApi.prototype.isNodeSelected=function(node){return this.selectionController.isNodeSelected(node);};GridApi.prototype.getSelectedNodesById=function(){return this.selectionController.getSelectedNodesById();};GridApi.prototype.getSelectedNodes=function(){return this.selectionController.getSelectedNodes();};GridApi.prototype.getSelectedRows=function(){return this.selectionController.getSelectedRows();};GridApi.prototype.getBestCostNodeSelection=function(){return this.selectionController.getBestCostNodeSelection();};GridApi.prototype.getRenderedNodes=function(){return this.rowRenderer.getRenderedNodes();};GridApi.prototype.ensureColIndexVisible=function(index){this.gridPanel.ensureColIndexVisible(index);};GridApi.prototype.ensureIndexVisible=function(index){this.gridPanel.ensureIndexVisible(index);};GridApi.prototype.ensureNodeVisible=function(comparator){this.grid.ensureNodeVisible(comparator);};GridApi.prototype.forEachInMemory=function(callback){console.warn('ag-Grid: please use forEachNode instead of forEachInMemory, method is same, I just renamed it, forEachInMemory is deprecated');this.forEachNode(callback);};GridApi.prototype.forEachNode=function(callback){this.grid.getRowModel().forEachNode(callback);};GridApi.prototype.forEachNodeAfterFilter=function(callback){this.grid.getRowModel().forEachNodeAfterFilter(callback);};GridApi.prototype.forEachNodeAfterFilterAndSort=function(callback){this.grid.getRowModel().forEachNodeAfterFilterAndSort(callback);};GridApi.prototype.getFilterApiForColDef=function(colDef){console.warn('ag-grid API method getFilterApiForColDef deprecated, use getFilterApi instead');return this.getFilterApi(colDef);};GridApi.prototype.getFilterApi=function(key){var column=this.columnController.getColumn(key);return this.filterManager.getFilterApi(column);};GridApi.prototype.getColumnDef=function(key){var column=this.columnController.getColumn(key);if(column){return column.getColDef();}else {return null;}};GridApi.prototype.onFilterChanged=function(){this.grid.onFilterChanged();};GridApi.prototype.setSortModel=function(sortModel){this.grid.setSortModel(sortModel);};GridApi.prototype.getSortModel=function(){return this.grid.getSortModel();};GridApi.prototype.setFilterModel=function(model){this.filterManager.setFilterModel(model);};GridApi.prototype.getFilterModel=function(){return this.grid.getFilterModel();};GridApi.prototype.getFocusedCell=function(){return this.rowRenderer.getFocusedCell();};GridApi.prototype.setFocusedCell=function(rowIndex,colIndex){this.grid.setFocusedCell(rowIndex,colIndex);};GridApi.prototype.setHeaderHeight=function(headerHeight){this.gridOptionsWrapper.setHeaderHeight(headerHeight);this.gridPanel.onBodyHeightChange();};GridApi.prototype.showToolPanel=function(show){this.grid.showToolPanel(show);};GridApi.prototype.isToolPanelShowing=function(){return this.grid.isToolPanelShowing();};GridApi.prototype.doLayout=function(){this.grid.doLayout();};GridApi.prototype.getValue=function(colDef,data,node){return this.valueService.getValue(colDef,data,node);};GridApi.prototype.addEventListener=function(eventType,listener){this.eventService.addEventListener(eventType,listener);};GridApi.prototype.addGlobalListener=function(listener){this.eventService.addGlobalListener(listener);};GridApi.prototype.removeEventListener=function(eventType,listener){this.eventService.removeEventListener(eventType,listener);};GridApi.prototype.removeGlobalListener=function(listener){this.eventService.removeGlobalListener(listener);};GridApi.prototype.dispatchEvent=function(eventType,event){this.eventService.dispatchEvent(eventType,event);};GridApi.prototype.refreshRowGroup=function(){this.grid.refreshRowGroup();};GridApi.prototype.destroy=function(){this.grid.destroy();};return GridApi;}();grid_4.GridApi=GridApi;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path="gridOptionsWrapper.ts" />
	/// <reference path="expressionService.ts" />
	/// <reference path="columnController/columnController.ts" />
	var ag;(function(ag){var grid;(function(grid){var ValueService=function(){function ValueService(){}ValueService.prototype.init=function(gridOptionsWrapper,expressionService,columnController){this.gridOptionsWrapper=gridOptionsWrapper;this.expressionService=expressionService;this.columnController=columnController;};ValueService.prototype.getValue=function(colDef,data,node){var cellExpressions=this.gridOptionsWrapper.isEnableCellExpressions();var field=colDef.field;var result; // if there is a value getter, this gets precedence over a field
	if(colDef.valueGetter){result=this.executeValueGetter(colDef.valueGetter,data,colDef,node);}else if(field&&data){result=this.getValueUsingField(data,field);}else {result=undefined;} // the result could be an expression itself, if we are allowing cell values to be expressions
	if(cellExpressions&&typeof result==='string'&&result.indexOf('=')===0){var cellValueGetter=result.substring(1);result=this.executeValueGetter(cellValueGetter,data,colDef,node);}return result;};ValueService.prototype.getValueUsingField=function(data,field){if(!field||!data){return;} // if no '.', then it's not a deep value
	if(field.indexOf('.')<0){return data[field];}else { // otherwise it is a deep value, so need to dig for it
	var fields=field.split('.');var currentObject=data;for(var i=0;i<fields.length;i++){currentObject=currentObject[fields[i]];if(!currentObject){return null;}}return currentObject;}};ValueService.prototype.executeValueGetter=function(valueGetter,data,colDef,node){var context=this.gridOptionsWrapper.getContext();var api=this.gridOptionsWrapper.getApi();var params={data:data,node:node,colDef:colDef,api:api,context:context,getValue:this.getValueCallback.bind(this,data,node)};if(typeof valueGetter==='function'){ // valueGetter is a function, so just call it
	return valueGetter(params);}else if(typeof valueGetter==='string'){ // valueGetter is an expression, so execute the expression
	return this.expressionService.evaluate(valueGetter,params);}};ValueService.prototype.getValueCallback=function(data,node,field){var otherColumn=this.columnController.getColumn(field);if(otherColumn){return this.getValue(otherColumn.getColDef(),data,node);}else {return null;}};return ValueService;}();grid.ValueService=ValueService;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path='../entities/colDef.ts'/>
	/// <reference path='../entities/column.ts'/>
	/// <reference path='../entities/originalColumnGroup.ts'/>
	/// <reference path='../logger.ts'/>
	var ag;(function(ag){var grid;(function(grid){var constants=grid.Constants; // takes in a list of columns, as specified by the column definitions, and returns column groups
	var ColumnUtils=function(){function ColumnUtils(){}ColumnUtils.prototype.init=function(gridOptionsWrapper){this.gridOptionsWrapper=gridOptionsWrapper;};ColumnUtils.prototype.calculateColInitialWidth=function(colDef){if(!colDef.width){ // if no width defined in colDef, use default
	return this.gridOptionsWrapper.getColWidth();}else if(colDef.width<constants.MIN_COL_WIDTH){ // if width in col def to small, set to min width
	return constants.MIN_COL_WIDTH;}else { // otherwise use the provided width
	return colDef.width;}};ColumnUtils.prototype.deptFirstAllColumnTreeSearch=function(tree,callback){var _this=this;if(!tree){return;}tree.forEach(function(child){if(child instanceof grid.ColumnGroup){_this.deptFirstAllColumnTreeSearch(child.getChildren(),callback);}callback(child);});};ColumnUtils.prototype.deptFirstDisplayedColumnTreeSearch=function(tree,callback){var _this=this;if(!tree){return;}tree.forEach(function(child){if(child instanceof grid.ColumnGroup){_this.deptFirstDisplayedColumnTreeSearch(child.getDisplayedChildren(),callback);}callback(child);});};return ColumnUtils;}();grid.ColumnUtils=ColumnUtils;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path="constants.ts" />
	/// <reference path="rowControllers/floatingRowModel.ts" />
	/// <reference path="gridOptionsWrapper.ts" />
	/// <reference path="utils.ts" />
	/// <reference path="filter/filterManager.ts" />
	/// <reference path="columnController/columnController.ts" />
	/// <reference path="columnController/balancedColumnTreeBuilder.ts" />
	/// <reference path="headerRendering/headerTemplateLoader.ts" />
	/// <reference path="selectionController.ts" />
	/// <reference path="selectionRendererFactory.ts" />
	/// <reference path="rendering/rowRenderer.ts" />
	/// <reference path="headerRendering/headerRenderer.ts" />
	/// <reference path="rowControllers/inMemoryRowController.ts" />
	/// <reference path="rowControllers/virtualPageRowController.ts" />
	/// <reference path="rowControllers/paginationController.ts" />
	/// <reference path="expressionService.ts" />
	/// <reference path="templateService.ts" />
	/// <reference path="gridPanel/gridPanel.ts" />
	/// <reference path="toolPanel/toolPanel.ts" />
	/// <reference path="widgets/agPopupService.ts" />
	/// <reference path="entities/gridOptions.ts" />
	/// <reference path="gridApi.ts" />
	/// <reference path="valueService.ts" />
	/// <reference path="masterSlaveService.ts" />
	/// <reference path="logger.ts" />
	/// <reference path="eventService.ts" />
	/// <reference path="columnController/columnUtils.ts" />
	/// <reference path="dragAndDrop/dragAndDropService.ts" />
	var ag;(function(ag){var grid;(function(grid){var Grid=function(){function Grid(eGridDiv,gridOptions,globalEventListener,$scope,$compile,quickFilterOnScope){if(globalEventListener===void 0){globalEventListener=null;}if($scope===void 0){$scope=null;}if($compile===void 0){$compile=null;}if(quickFilterOnScope===void 0){quickFilterOnScope=null;}this.virtualRowListeners={virtualRowRemoved:{},virtualRowSelected:{}};if(!eGridDiv){console.warn('ag-Grid: no div element provided to the grid');}if(!gridOptions){console.warn('ag-Grid: no gridOptions provided to the grid');}this.gridOptions=gridOptions;this.setupComponents($scope,$compile,eGridDiv,globalEventListener);this.gridOptions.api=new grid.GridApi(this,this.rowRenderer,this.headerRenderer,this.filterManager,this.columnController,this.inMemoryRowController,this.selectionController,this.gridOptionsWrapper,this.gridPanel,this.valueService,this.masterSlaveService,this.eventService,this.floatingRowModel);this.gridOptions.columnApi=this.columnController.getColumnApi();var that=this; // if using angular, watch for quickFilter changes
	if($scope){$scope.$watch(quickFilterOnScope,function(newFilter){that.onQuickFilterChanged(newFilter);});}if(!this.gridOptionsWrapper.isForPrint()){this.addWindowResizeListener();}this.inMemoryRowController.setAllRows(this.gridOptionsWrapper.getRowData());this.setupColumns();this.updateModelAndRefresh(grid.Constants.STEP_EVERYTHING);this.decideStartingOverlay(); // if datasource provided, use it
	if(this.gridOptionsWrapper.getDatasource()){this.setDatasource();}this.doLayout();this.finished=false;this.periodicallyDoLayout(); // if ready function provided, use it
	var readyEvent={api:gridOptions.api,columnApi:gridOptions.columnApi};this.eventService.dispatchEvent(grid.Events.EVENT_READY,readyEvent);this.logger.log('initialised');}Grid.prototype.decideStartingOverlay=function(){ // if not virtual paging, then we might need to show an overlay if no data
	var notDoingVirtualPaging=!this.gridOptionsWrapper.isVirtualPaging();if(notDoingVirtualPaging){var showLoading=!this.gridOptionsWrapper.getRowData();var showNoData=this.gridOptionsWrapper.getRowData()&&this.gridOptionsWrapper.getRowData().length==0;if(showLoading){this.showLoadingOverlay();}if(showNoData){this.showNoRowsOverlay();}}};Grid.prototype.addWindowResizeListener=function(){var that=this; // putting this into a function, so when we remove the function,
	// we are sure we are removing the exact same function (i'm not
	// sure what 'bind' does to the function reference, if it's safe
	// the result from 'bind').
	this.windowResizeListener=function resizeListener(){that.doLayout();};window.addEventListener('resize',this.windowResizeListener);};Grid.prototype.getRowModel=function(){return this.rowModel;};Grid.prototype.periodicallyDoLayout=function(){if(!this.finished){var that=this;setTimeout(function(){that.doLayout();that.gridPanel.periodicallyCheck();that.periodicallyDoLayout();},500);}};Grid.prototype.setupComponents=function($scope,$compile,eUserProvidedDiv,globalEventListener){this.eUserProvidedDiv=eUserProvidedDiv; // create all the beans
	var headerTemplateLoader=new grid.HeaderTemplateLoader();var floatingRowModel=new grid.FloatingRowModel();var balancedColumnTreeBuilder=new grid.BalancedColumnTreeBuilder();var displayedGroupCreator=new grid.DisplayedGroupCreator();var eventService=new grid.EventService();var gridOptionsWrapper=new grid.GridOptionsWrapper();var selectionController=new grid.SelectionController();var filterManager=new grid.FilterManager();var selectionRendererFactory=new grid.SelectionRendererFactory();var columnController=new grid.ColumnController();var rowRenderer=new grid.RowRenderer();var headerRenderer=new grid.HeaderRenderer();var inMemoryRowController=new grid.InMemoryRowController();var virtualPageRowController=new grid.VirtualPageRowController();var expressionService=new grid.ExpressionService();var templateService=new grid.TemplateService();var gridPanel=new grid.GridPanel();var popupService=new grid.PopupService();var valueService=new grid.ValueService();var groupCreator=new grid.GroupCreator();var masterSlaveService=new grid.MasterSlaveService();var loggerFactory=new grid.LoggerFactory();var dragAndDropService=new grid.DragAndDropService();var columnUtils=new grid.ColumnUtils();var autoWidthCalculator=new grid.AutoWidthCalculator(); // initialise all the beans
	gridOptionsWrapper.init(this.gridOptions,eventService);loggerFactory.init(gridOptionsWrapper);this.logger=loggerFactory.create('Grid');this.logger.log('initialising');headerTemplateLoader.init(gridOptionsWrapper);floatingRowModel.init(gridOptionsWrapper);columnUtils.init(gridOptionsWrapper);autoWidthCalculator.init(rowRenderer,gridPanel);dragAndDropService.init(loggerFactory);eventService.init(loggerFactory);gridPanel.init(gridOptionsWrapper,columnController,rowRenderer,masterSlaveService,loggerFactory,floatingRowModel);templateService.init($scope);expressionService.init(loggerFactory);selectionController.init(this,gridPanel,gridOptionsWrapper,$scope,rowRenderer,eventService);filterManager.init(this,gridOptionsWrapper,$compile,$scope,columnController,popupService,valueService);selectionRendererFactory.init(this,selectionController);balancedColumnTreeBuilder.init(gridOptionsWrapper,loggerFactory,columnUtils);displayedGroupCreator.init(columnUtils);columnController.init(this,selectionRendererFactory,gridOptionsWrapper,expressionService,valueService,masterSlaveService,eventService,balancedColumnTreeBuilder,displayedGroupCreator,columnUtils,autoWidthCalculator,loggerFactory);rowRenderer.init(columnController,gridOptionsWrapper,gridPanel,this,selectionRendererFactory,$compile,$scope,selectionController,expressionService,templateService,valueService,eventService,floatingRowModel);headerRenderer.init(gridOptionsWrapper,columnController,gridPanel,this,filterManager,$scope,$compile,headerTemplateLoader);inMemoryRowController.init(gridOptionsWrapper,columnController,this,filterManager,$scope,groupCreator,valueService,eventService);virtualPageRowController.init(rowRenderer,gridOptionsWrapper,this);valueService.init(gridOptionsWrapper,expressionService,columnController);groupCreator.init(valueService,gridOptionsWrapper);masterSlaveService.init(gridOptionsWrapper,columnController,gridPanel,loggerFactory,eventService);if(globalEventListener){eventService.addGlobalListener(globalEventListener);}var toolPanelLayout=null;var toolPanel=null;if(!gridOptionsWrapper.isForPrint()){toolPanel=new grid.ToolPanel();toolPanelLayout=toolPanel.layout;toolPanel.init(columnController,inMemoryRowController,gridOptionsWrapper,popupService,eventService,dragAndDropService);} // this is a child bean, get a reference and pass it on
	// CAN WE DELETE THIS? it's done in the setDatasource section
	var rowModel=inMemoryRowController.getModel();selectionController.setRowModel(rowModel);filterManager.setRowModel(rowModel);rowRenderer.setRowModel(rowModel);gridPanel.setRowModel(rowModel); // and the last bean, done in it's own section, as it's optional
	var paginationController=null;var paginationGui=null;if(!gridOptionsWrapper.isForPrint()){paginationController=new grid.PaginationController();paginationController.init(this,gridOptionsWrapper);paginationGui=paginationController.getGui();}this.rowModel=rowModel;this.usingInMemoryModel=true;this.selectionController=selectionController;this.columnController=columnController;this.inMemoryRowController=inMemoryRowController;this.virtualPageRowController=virtualPageRowController;this.rowRenderer=rowRenderer;this.headerRenderer=headerRenderer;this.paginationController=paginationController;this.filterManager=filterManager;this.toolPanel=toolPanel;this.gridPanel=gridPanel;this.valueService=valueService;this.masterSlaveService=masterSlaveService;this.eventService=eventService;this.gridOptionsWrapper=gridOptionsWrapper;this.dragAndDropService=dragAndDropService;this.floatingRowModel=floatingRowModel;this.eRootPanel=new grid.BorderLayout({center:gridPanel.getLayout(),east:toolPanelLayout,south:paginationGui,dontFill:gridOptionsWrapper.isForPrint(),name:'eRootPanel'});popupService.init(this.eRootPanel.getGui()); // default is we don't show paging panel, this is set to true when datasource is set
	this.eRootPanel.setSouthVisible(false); // see what the grid options are for default of toolbar
	this.showToolPanel(gridOptionsWrapper.isShowToolPanel());eUserProvidedDiv.appendChild(this.eRootPanel.getGui());this.logger.log('grid DOM added');eventService.addEventListener(grid.Events.EVENT_COLUMN_EVERYTHING_CHANGED,this.onColumnChanged.bind(this));eventService.addEventListener(grid.Events.EVENT_COLUMN_GROUP_OPENED,this.onColumnChanged.bind(this));eventService.addEventListener(grid.Events.EVENT_COLUMN_MOVED,this.onColumnChanged.bind(this));eventService.addEventListener(grid.Events.EVENT_COLUMN_ROW_GROUP_CHANGE,this.onColumnChanged.bind(this));eventService.addEventListener(grid.Events.EVENT_COLUMN_RESIZED,this.onColumnChanged.bind(this));eventService.addEventListener(grid.Events.EVENT_COLUMN_VALUE_CHANGE,this.onColumnChanged.bind(this));eventService.addEventListener(grid.Events.EVENT_COLUMN_VISIBLE,this.onColumnChanged.bind(this));eventService.addEventListener(grid.Events.EVENT_COLUMN_PINNED,this.onColumnChanged.bind(this));};Grid.prototype.onColumnChanged=function(event){if(event.isRowGroupChanged()){this.inMemoryRowController.onRowGroupChanged();}if(event.isValueChanged()){this.inMemoryRowController.doAggregate();}if(event.isIndividualColumnResized()){this.onIndividualColumnResized(event.getColumn());}else {this.refreshHeaderAndBody();}this.gridPanel.showPinnedColContainersIfNeeded();};Grid.prototype.refreshRowGroup=function(){this.inMemoryRowController.onRowGroupChanged();this.refreshHeaderAndBody();};Grid.prototype.onIndividualColumnResized=function(column){this.headerRenderer.onIndividualColumnResized(column);this.rowRenderer.onIndividualColumnResized(column);if(column.isPinned()){this.updatePinnedColContainerWidthAfterColResize();}else {this.updateBodyContainerWidthAfterColResize();}};Grid.prototype.showToolPanel=function(show){if(!this.toolPanel){this.toolPanelShowing=false;return;}this.toolPanelShowing=show;this.eRootPanel.setEastVisible(show);};Grid.prototype.isToolPanelShowing=function(){return this.toolPanelShowing;};Grid.prototype.isUsingInMemoryModel=function(){return this.usingInMemoryModel;};Grid.prototype.setDatasource=function(datasource){ // if datasource provided, then set it
	if(datasource){this.gridOptions.datasource=datasource;} // get the set datasource (if null was passed to this method,
	// then need to get the actual datasource from options
	var datasourceToUse=this.gridOptionsWrapper.getDatasource();this.doingVirtualPaging=this.gridOptionsWrapper.isVirtualPaging()&&datasourceToUse;this.doingPagination=datasourceToUse&&!this.doingVirtualPaging;var showPagingPanel;if(this.doingVirtualPaging){this.paginationController.setDatasource(null);this.virtualPageRowController.setDatasource(datasourceToUse);this.rowModel=this.virtualPageRowController.getModel();this.usingInMemoryModel=false;showPagingPanel=false;}else if(this.doingPagination){this.paginationController.setDatasource(datasourceToUse);this.virtualPageRowController.setDatasource(null);this.rowModel=this.inMemoryRowController.getModel();this.usingInMemoryModel=true;showPagingPanel=true;}else {this.paginationController.setDatasource(null);this.virtualPageRowController.setDatasource(null);this.rowModel=this.inMemoryRowController.getModel();this.usingInMemoryModel=true;showPagingPanel=false;}this.selectionController.setRowModel(this.rowModel);this.filterManager.setRowModel(this.rowModel);this.rowRenderer.setRowModel(this.rowModel);this.gridPanel.setRowModel(this.rowModel);this.eRootPanel.setSouthVisible(showPagingPanel); // because we just set the rowModel, need to update the gui
	this.rowRenderer.refreshView();this.doLayout();}; // gets called after columns are shown / hidden from groups expanding
	Grid.prototype.refreshHeaderAndBody=function(){this.headerRenderer.refreshHeader();this.headerRenderer.updateFilterIcons();this.headerRenderer.updateSortIcons();this.headerRenderer.setPinnedColContainerWidth();this.gridPanel.setBodyContainerWidth();this.gridPanel.setPinnedColContainerWidth();this.rowRenderer.refreshView();};Grid.prototype.destroy=function(){if(this.windowResizeListener){window.removeEventListener('resize',this.windowResizeListener);this.logger.log('Removing windowResizeListener');}this.finished=true;this.dragAndDropService.destroy();this.rowRenderer.destroy();this.filterManager.destroy();this.eUserProvidedDiv.removeChild(this.eRootPanel.getGui());this.logger.log('Grid DOM removed');};Grid.prototype.onQuickFilterChanged=function(newFilter){var actuallyChanged=this.filterManager.setQuickFilter(newFilter);if(actuallyChanged){this.onFilterChanged();}};Grid.prototype.onFilterModified=function(){this.eventService.dispatchEvent(grid.Events.EVENT_FILTER_MODIFIED);};Grid.prototype.onFilterChanged=function(){this.eventService.dispatchEvent(grid.Events.EVENT_BEFORE_FILTER_CHANGED);this.filterManager.onFilterChanged();this.headerRenderer.updateFilterIcons();if(this.gridOptionsWrapper.isEnableServerSideFilter()){ // if doing server side filtering, changing the sort has the impact
	// of resetting the datasource
	this.setDatasource();}else { // if doing in memory filtering, we just update the in memory data
	this.updateModelAndRefresh(grid.Constants.STEP_FILTER);}this.eventService.dispatchEvent(grid.Events.EVENT_AFTER_FILTER_CHANGED);};Grid.prototype.onRowClicked=function(multiSelectKeyPressed,rowIndex,node){ // we do not allow selecting groups by clicking (as the click here expands the group)
	// so return if it's a group row
	if(node.group){return;} // we also don't allow selection of floating rows
	if(node.floating){return;} // making local variables to make the below more readable
	var gridOptionsWrapper=this.gridOptionsWrapper;var selectionController=this.selectionController; // if no selection method enabled, do nothing
	if(!gridOptionsWrapper.isRowSelection()){return;} // if click selection suppressed, do nothing
	if(gridOptionsWrapper.isSuppressRowClickSelection()){return;}var doDeselect=multiSelectKeyPressed&&selectionController.isNodeSelected(node)&&gridOptionsWrapper.isRowDeselection();if(doDeselect){selectionController.deselectNode(node);}else {selectionController.selectNode(node,multiSelectKeyPressed);}};Grid.prototype.showLoadingOverlay=function(){this.gridPanel.showLoadingOverlay();};Grid.prototype.showNoRowsOverlay=function(){this.gridPanel.showNoRowsOverlay();};Grid.prototype.hideOverlay=function(){this.gridPanel.hideOverlay();};Grid.prototype.setupColumns=function(){this.columnController.onColumnsChanged();this.gridPanel.showPinnedColContainersIfNeeded();this.gridPanel.onBodyHeightChange();}; // rowsToRefresh is at what index to start refreshing the rows. the assumption is
	// if we are expanding or collapsing a group, then only he rows below the group
	// need to be refresh. this allows the context (eg focus) of the other cells to
	// remain.
	Grid.prototype.updateModelAndRefresh=function(step,refreshFromIndex){this.inMemoryRowController.updateModel(step);this.rowRenderer.refreshView(refreshFromIndex);};Grid.prototype.setRowData=function(rows,firstId){if(rows){this.gridOptions.rowData=rows;}var rowData=this.gridOptionsWrapper.getRowData();this.inMemoryRowController.setAllRows(rowData,firstId);this.selectionController.deselectAll();this.filterManager.onNewRowsLoaded();this.updateModelAndRefresh(grid.Constants.STEP_EVERYTHING);this.headerRenderer.updateFilterIcons();if(rowData&&rowData.length>0){this.hideOverlay();}else {this.showNoRowsOverlay();}};Grid.prototype.ensureNodeVisible=function(comparator){if(this.doingVirtualPaging){throw 'Cannot use ensureNodeVisible when doing virtual paging, as we cannot check rows that are not in memory';} // look for the node index we want to display
	var rowCount=this.rowModel.getVirtualRowCount();var comparatorIsAFunction=typeof comparator==='function';var indexToSelect=-1; // go through all the nodes, find the one we want to show
	for(var i=0;i<rowCount;i++){var node=this.rowModel.getVirtualRow(i);if(comparatorIsAFunction){if(comparator(node)){indexToSelect=i;break;}}else { // check object equality against node and data
	if(comparator===node||comparator===node.data){indexToSelect=i;break;}}}if(indexToSelect>=0){this.gridPanel.ensureIndexVisible(indexToSelect);}};Grid.prototype.getFilterModel=function(){return this.filterManager.getFilterModel();};Grid.prototype.setFocusedCell=function(rowIndex,colIndex){this.gridPanel.ensureIndexVisible(rowIndex);this.gridPanel.ensureColIndexVisible(colIndex);var that=this;setTimeout(function(){that.rowRenderer.setFocusedCell(rowIndex,colIndex);},10);};Grid.prototype.getSortModel=function(){var allColumns=this.columnController.getAllColumns();var columnsWithSorting=[];var i;for(i=0;i<allColumns.length;i++){if(allColumns[i].getSort()){columnsWithSorting.push(allColumns[i]);}}columnsWithSorting.sort(function(a,b){return a.sortedAt-b.sortedAt;});var result=[];for(i=0;i<columnsWithSorting.length;i++){var resultEntry={colId:columnsWithSorting[i].colId,sort:columnsWithSorting[i].sort};result.push(resultEntry);}return result;};Grid.prototype.setSortModel=function(sortModel){if(!this.gridOptionsWrapper.isEnableSorting()){console.warn('ag-grid: You are setting the sort model on a grid that does not have sorting enabled');return;} // first up, clear any previous sort
	var sortModelProvided=sortModel!==null&&sortModel!==undefined&&sortModel.length>0;var allColumns=this.columnController.getAllColumns();for(var i=0;i<allColumns.length;i++){var column=allColumns[i];var sortForCol=null;var sortedAt=-1;if(sortModelProvided&&!column.getColDef().suppressSorting){for(var j=0;j<sortModel.length;j++){var sortModelEntry=sortModel[j];if(typeof sortModelEntry.colId==='string'&&typeof column.getColId()==='string'&&sortModelEntry.colId===column.getColId()){sortForCol=sortModelEntry.sort;sortedAt=j;}}}if(sortForCol){column.setSort(sortForCol);column.setSortedAt(sortedAt);}else {column.setSort(null);column.setSortedAt(null);}}this.onSortingChanged();};Grid.prototype.onSortingChanged=function(){this.eventService.dispatchEvent(grid.Events.EVENT_BEFORE_SORT_CHANGED);this.headerRenderer.updateSortIcons();if(this.gridOptionsWrapper.isEnableServerSideSorting()){ // if doing server side sorting, changing the sort has the impact
	// of resetting the datasource
	this.setDatasource();}else { // if doing in memory sorting, we just update the in memory data
	this.updateModelAndRefresh(grid.Constants.STEP_SORT);}this.eventService.dispatchEvent(grid.Events.EVENT_AFTER_SORT_CHANGED);};Grid.prototype.addVirtualRowListener=function(eventName,rowIndex,callback){var listenersMap=this.virtualRowListeners[eventName];if(!listenersMap){console.warn('ag-Grid: invalid listener type '+eventName+', expected values are '+Object.keys(this.virtualRowListeners));return;}if(!listenersMap[rowIndex]){listenersMap[rowIndex]=[];}listenersMap[rowIndex].push(callback);};Grid.prototype.onVirtualRowSelected=function(rowIndex,selected){ // inform the callbacks of the event
	var listenersMap=this.virtualRowListeners[Grid.VIRTUAL_ROW_SELECTED];if(listenersMap[rowIndex]){listenersMap[rowIndex].forEach(function(callback){if(typeof callback==='function'){callback(selected);}});}this.rowRenderer.onRowSelected(rowIndex,selected);};Grid.prototype.onVirtualRowRemoved=function(rowIndex){ // inform the callbacks of the event
	var listenersMap=this.virtualRowListeners[Grid.VIRTUAL_ROW_REMOVED];if(listenersMap[rowIndex]){listenersMap[rowIndex].forEach(function(callback){if(typeof callback==='function'){callback();}});}this.removeVirtualCallbacksForRow(rowIndex);};Grid.prototype.removeVirtualCallbacksForRow=function(rowIndex){delete this.virtualRowListeners[Grid.VIRTUAL_ROW_REMOVED][rowIndex];delete this.virtualRowListeners[Grid.VIRTUAL_ROW_SELECTED][rowIndex];};Grid.prototype.setColumnDefs=function(colDefs){if(colDefs){this.gridOptions.columnDefs=colDefs;}this.setupColumns();this.updateModelAndRefresh(grid.Constants.STEP_EVERYTHING); // found that adding pinned column can upset the layout
	this.doLayout();};Grid.prototype.updateBodyContainerWidthAfterColResize=function(){this.rowRenderer.setMainRowWidths();this.gridPanel.setBodyContainerWidth();};Grid.prototype.updatePinnedColContainerWidthAfterColResize=function(){this.gridPanel.setPinnedColContainerWidth();this.headerRenderer.setPinnedColContainerWidth();};Grid.prototype.doLayout=function(){ // need to do layout first, as drawVirtualRows and setPinnedColHeight
	// need to know the result of the resizing of the panels.
	var sizeChanged=this.eRootPanel.doLayout(); // both of the two below should be done in gridPanel, the gridPanel should register 'resize' to the panel
	if(sizeChanged){this.rowRenderer.drawVirtualRows();var event={clientWidth:this.eRootPanel.getGui().clientWidth,clientHeight:this.eRootPanel.getGui().clientHeight};this.eventService.dispatchEvent(grid.Events.EVENT_GRID_SIZE_CHANGED,event);}};Grid.VIRTUAL_ROW_REMOVED='virtualRowRemoved';Grid.VIRTUAL_ROW_SELECTED='virtualRowSelected';return Grid;}();grid.Grid=Grid;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path='componentUtil.ts'/>
	var ag;(function(ag){var grid;(function(grid){ // lets load angular 2 if we can find it
	var _ng; // we are not using annotations on purpose, as if we do, then there is a runtime dependency
	// on the annotation, which would break this code if angular 2 was not included, which is bad,
	// as angular 2 is optional for ag-grid
	var AgGridNg2=function(){function AgGridNg2(elementDef){this.elementDef=elementDef;this._initialised=false; // core grid events
	this.modelUpdated=new _ng.core.EventEmitter();this.cellClicked=new _ng.core.EventEmitter();this.cellDoubleClicked=new _ng.core.EventEmitter();this.cellContextMenu=new _ng.core.EventEmitter();this.cellValueChanged=new _ng.core.EventEmitter();this.cellFocused=new _ng.core.EventEmitter();this.rowSelected=new _ng.core.EventEmitter();this.rowDeselected=new _ng.core.EventEmitter();this.selectionChanged=new _ng.core.EventEmitter();this.beforeFilterChanged=new _ng.core.EventEmitter();this.afterFilterChanged=new _ng.core.EventEmitter();this.filterModified=new _ng.core.EventEmitter();this.beforeSortChanged=new _ng.core.EventEmitter();this.afterSortChanged=new _ng.core.EventEmitter();this.virtualRowRemoved=new _ng.core.EventEmitter();this.rowClicked=new _ng.core.EventEmitter();this.rowDoubleClicked=new _ng.core.EventEmitter();this.ready=new _ng.core.EventEmitter();this.gridSizeChanged=new _ng.core.EventEmitter();this.rowGroupOpened=new _ng.core.EventEmitter(); // column grid events
	this.columnEverythingChanged=new _ng.core.EventEmitter();this.columnRowGroupChanged=new _ng.core.EventEmitter();this.columnValueChanged=new _ng.core.EventEmitter();this.columnMoved=new _ng.core.EventEmitter();this.columnVisible=new _ng.core.EventEmitter();this.columnGroupOpened=new _ng.core.EventEmitter();this.columnResized=new _ng.core.EventEmitter();this.columnPinnedCountChanged=new _ng.core.EventEmitter();} // this gets called after the directive is initialised
	AgGridNg2.prototype.ngOnInit=function(){this.gridOptions=grid.ComponentUtil.copyAttributesToGridOptions(this.gridOptions,this);var nativeElement=this.elementDef.nativeElement;var globalEventLister=this.globalEventListener.bind(this);this._agGrid=new ag.grid.Grid(nativeElement,this.gridOptions,globalEventLister);this.api=this.gridOptions.api;this.columnApi=this.gridOptions.columnApi;this._initialised=true;};AgGridNg2.prototype.ngOnChanges=function(changes){if(this._initialised){grid.ComponentUtil.processOnChange(changes,this.gridOptions,this.api);}};AgGridNg2.prototype.ngOnDestroy=function(){this.api.destroy();};AgGridNg2.prototype.globalEventListener=function(eventType,event){var emitter;switch(eventType){case grid.Events.EVENT_ROW_GROUP_OPENED:emitter=this.rowGroupOpened;break;case grid.Events.EVENT_COLUMN_GROUP_OPENED:emitter=this.columnGroupOpened;break;case grid.Events.EVENT_COLUMN_EVERYTHING_CHANGED:emitter=this.columnEverythingChanged;break;case grid.Events.EVENT_COLUMN_MOVED:emitter=this.columnMoved;break;case grid.Events.EVENT_COLUMN_ROW_GROUP_CHANGE:emitter=this.columnRowGroupChanged;break;case grid.Events.EVENT_COLUMN_RESIZED:emitter=this.columnResized;break;case grid.Events.EVENT_COLUMN_VALUE_CHANGE:emitter=this.columnValueChanged;break;case grid.Events.EVENT_COLUMN_VISIBLE:emitter=this.columnVisible;break;case grid.Events.EVENT_MODEL_UPDATED:emitter=this.modelUpdated;break;case grid.Events.EVENT_CELL_CLICKED:emitter=this.cellClicked;break;case grid.Events.EVENT_CELL_DOUBLE_CLICKED:emitter=this.cellDoubleClicked;break;case grid.Events.EVENT_CELL_CONTEXT_MENU:emitter=this.cellContextMenu;break;case grid.Events.EVENT_CELL_VALUE_CHANGED:emitter=this.cellValueChanged;break;case grid.Events.EVENT_CELL_FOCUSED:emitter=this.cellFocused;break;case grid.Events.EVENT_ROW_SELECTED:emitter=this.rowSelected;break;case grid.Events.EVENT_ROW_DESELECTED:emitter=this.rowDeselected;break;case grid.Events.EVENT_SELECTION_CHANGED:emitter=this.selectionChanged;break;case grid.Events.EVENT_BEFORE_FILTER_CHANGED:emitter=this.beforeFilterChanged;break;case grid.Events.EVENT_AFTER_FILTER_CHANGED:emitter=this.afterFilterChanged;break;case grid.Events.EVENT_AFTER_SORT_CHANGED:emitter=this.afterSortChanged;break;case grid.Events.EVENT_BEFORE_SORT_CHANGED:emitter=this.beforeSortChanged;break;case grid.Events.EVENT_FILTER_MODIFIED:emitter=this.filterModified;break;case grid.Events.EVENT_VIRTUAL_ROW_REMOVED:emitter=this.virtualRowRemoved;break;case grid.Events.EVENT_ROW_CLICKED:emitter=this.rowClicked;break;case grid.Events.EVENT_ROW_DOUBLE_CLICKED:emitter=this.rowDoubleClicked;break;case grid.Events.EVENT_READY:emitter=this.ready;break;case grid.Events.EVENT_GRID_SIZE_CHANGED:emitter=this.ready;break;default:console.log('ag-Grid: AgGridNg2 - unknown event type: '+eventType);return;}emitter.next(event);};return AgGridNg2;}();grid.AgGridNg2=AgGridNg2; // check for angular and component, as if angular 1, we will find angular but the wrong version
	if(typeof window!=='undefined'){if(window&&window.ng&&window.ng.core&&window.ng.core.Component){var ng=window.ng;initialiseAgGridWithAngular2(ng);}}function initialiseAgGridWithAngular2(ng){_ng=ng;AgGridNg2.annotations=[new _ng.core.Component({selector:'ag-grid-ng2',outputs:grid.ComponentUtil.EVENTS,inputs:grid.ComponentUtil.ALL_PROPERTIES.concat(['gridOptions']),compileChildren:false // no angular on the inside thanks
	}),new _ng.core.View({template:'', // tell angular we don't want view encapsulation, we don't want a shadow root
	encapsulation:_ng.core.ViewEncapsulation.None})];AgGridNg2.parameters=[[_ng.core.ElementRef]];}grid.initialiseAgGridWithAngular2=initialiseAgGridWithAngular2;})(grid=ag.grid||(ag.grid={}));})(ag||(ag={}));var ag;(function(ag){var grid;(function(grid_5){ // provide a reference to angular
	var angular;if(typeof window!=='undefined'){angular=window.angular;} // if angular is present, register the directive - checking for 'module' and 'directive' also to make
	// sure it's Angular 1 and not Angular 2
	if(typeof angular!=='undefined'&&typeof angular.module!=='undefined'&&angular.directive!=='undefined'){initialiseAgGridWithAngular1(angular);}function initialiseAgGridWithAngular1(angular){var angularModule=angular.module("agGrid",[]);angularModule.directive("agGrid",function(){return {restrict:"A",controller:['$element','$scope','$compile','$attrs',AngularDirectiveController],scope:true};});}grid_5.initialiseAgGridWithAngular1=initialiseAgGridWithAngular1;function AngularDirectiveController($element,$scope,$compile,$attrs){var gridOptions;var quickFilterOnScope;var keyOfGridInScope=$attrs.agGrid;quickFilterOnScope=keyOfGridInScope+'.quickFilterText';gridOptions=$scope.$eval(keyOfGridInScope);if(!gridOptions){console.warn("WARNING - grid options for ag-Grid not found. Please ensure the attribute ag-grid points to a valid object on the scope");return;}var eGridDiv=$element[0];var grid=new ag.grid.Grid(eGridDiv,gridOptions,null,$scope,$compile,quickFilterOnScope);$scope.$on("$destroy",function(){grid.destroy();});}})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path='componentUtil.ts'/>
	var ag;(function(ag){var grid;(function(grid){if(typeof document!=='undefined'&&document.registerElement){ // i don't think this type of extension is possible in TypeScript, so back to
	// plain Javascript to create this object
	var AgileGridProto=Object.create(HTMLElement.prototype); // wrap each property with a get and set method, so we can track when changes are done
	grid.ComponentUtil.ALL_PROPERTIES.forEach(function(key){Object.defineProperty(AgileGridProto,key,{set:function set(v){this.__agGridSetProperty(key,v);},get:function get(){return this.__agGridGetProperty(key);}});});AgileGridProto.__agGridSetProperty=function(key,value){if(!this.__attributes){this.__attributes={};}this.__attributes[key]=value; // keeping this consistent with the ng2 onChange, so I can reuse the handling code
	var changeObject={};changeObject[key]={currentValue:value};this.onChange(changeObject);};AgileGridProto.onChange=function(changes){if(this._initialised){grid.ComponentUtil.processOnChange(changes,this.gridOptions,this.api);}};AgileGridProto.__agGridGetProperty=function(key){if(!this.__attributes){this.__attributes={};}return this.__attributes[key];};AgileGridProto.setGridOptions=function(options){var globalEventListener=this.globalEventListener.bind(this);this._gridOptions=grid.ComponentUtil.copyAttributesToGridOptions(options,this);this._agGrid=new ag.grid.Grid(this,this._gridOptions,globalEventListener);this.api=options.api;this.columnApi=options.columnApi;this._initialised=true;}; // copies all the attributes into this object
	AgileGridProto.createdCallback=function(){for(var i=0;i<this.attributes.length;i++){var attribute=this.attributes[i];this.setPropertyFromAttribute(attribute);}};AgileGridProto.setPropertyFromAttribute=function(attribute){var name=toCamelCase(attribute.nodeName);var value=attribute.nodeValue;if(grid.ComponentUtil.ALL_PROPERTIES.indexOf(name)>=0){this[name]=value;}};AgileGridProto.attachedCallback=function(params){};AgileGridProto.detachedCallback=function(params){};AgileGridProto.attributeChangedCallback=function(attributeName){var attribute=this.attributes[attributeName];this.setPropertyFromAttribute(attribute);};AgileGridProto.globalEventListener=function(eventType,event){var eventLowerCase=eventType.toLowerCase();var browserEvent=new Event(eventLowerCase);var browserEventNoType=browserEvent;browserEventNoType.agGridDetails=event;this.dispatchEvent(browserEvent);var callbackMethod='on'+eventLowerCase;if(typeof this[callbackMethod]==='function'){this[callbackMethod](browserEvent);}}; // finally, register
	document.registerElement('ag-grid',{prototype:AgileGridProto});}function toCamelCase(myString){if(typeof myString==='string'){var result=myString.replace(/-([a-z])/g,function(g){return g[1].toUpperCase();});return result;}else {return myString;}}})(grid=ag.grid||(ag.grid={}));})(ag||(ag={})); /// <reference path="components/agGridNg2.ts" />
	/// <reference path="components/agGridNg1.ts" />
	/// <reference path="components/agGridWebComponent.ts" />
	/// <reference path="../../typings/tsd" />
	// creating the random local variable was needed to get the unit tests working.
	// if not, the tests would not load as we were referencing an undefined window object
	var __RANDOM_GLOBAL_VARIABLE_FSKJFHSKJFHKSDAJF;if(typeof window!=='undefined'){__RANDOM_GLOBAL_VARIABLE_FSKJFHSKJFHKSDAJF=window;}(function(){ // Establish the root object, `window` or `exports`
	if(true){if(typeof module!=='undefined'&&module.exports){exports=module.exports=ag.grid;}else {exports=ag.grid;}} //this.agGridGlobalFunc = angularGridGlobalFunction;
	}).call(__RANDOM_GLOBAL_VARIABLE_FSKJFHSKJFHKSDAJF);

/***/ },
/* 162 */
/*!************************!*\
  !*** ./src/RefData.js ***!
  \************************/
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	        value: true
	});
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var RefData = function RefData() {
	        _classCallCheck(this, RefData);
	};
	
	exports.default = RefData;
	
	RefData.FIRST_NAMES = ["Sophie", "Isabelle", "Emily", "Olivia", "Lily", "Chloe", "Isabella", "Amelia", "Jessica", "Sophia", "Ava", "Charlotte", "Mia", "Lucy", "Grace", "Ruby", "Ella", "Evie", "Freya", "Isla", "Poppy", "Daisy", "Layla"];
	
	RefData.LAST_NAMES = ["Beckham", "Black", "Braxton", "Brennan", "Brock", "Bryson", "Cadwell", "Cage", "Carson", "Chandler", "Cohen", "Cole", "Corbin", "Dallas", "Dalton", "Dane", "Donovan", "Easton", "Fisher", "Fletcher", "Grady", "Greyson", "Griffin", "Gunner", "Hayden", "Hudson", "Hunter", "Jacoby", "Jagger", "Jaxon", "Jett", "Kade", "Kane", "Keating", "Keegan", "Kingston", "Kobe"];
	
	RefData.COUNTRY_CODES = {
	        Ireland: "ie",
	        Spain: "es",
	        "United Kingdom": "gb",
	        France: "fr",
	        Germany: "de",
	        Sweden: "se",
	        Italy: "it",
	        Greece: "gr",
	        Iceland: "is",
	        Portugal: "pt",
	        Malta: "mt",
	        Norway: "no",
	        Brazil: "br",
	        Argentina: "ar",
	        Colombia: "co",
	        Peru: "pe",
	        Venezuela: "ve",
	        Uruguay: "uy"
	};
	
	RefData.COUNTRIES = [{ country: "Ireland", continent: "Europe", language: "English" }, { country: "Spain", continent: "Europe", language: "Spanish" }, { country: "United Kingdom", continent: "Europe", language: "English" }, { country: "France", continent: "Europe", language: "French" }, { country: "Germany", continent: "Europe", language: "(other)" }, { country: "Sweden", continent: "Europe", language: "(other)" }, { country: "Norway", continent: "Europe", language: "(other)" }, { country: "Italy", continent: "Europe", language: "(other)" }, { country: "Greece", continent: "Europe", language: "(other)" }, { country: "Iceland", continent: "Europe", language: "(other)" }, { country: "Portugal", continent: "Europe", language: "Portuguese" }, { country: "Malta", continent: "Europe", language: "(other)" }, { country: "Brazil", continent: "South America", language: "Portuguese" }, { country: "Argentina", continent: "South America", language: "Spanish" }, { country: "Colombia", continent: "South America", language: "Spanish" }, { country: "Peru", continent: "South America", language: "Spanish" }, { country: "Venezuela", continent: "South America", language: "Spanish" }, { country: "Uruguay", continent: "South America", language: "Spanish" }];
	
	RefData.ADDRESSES = ['1197 Thunder Wagon Common, Cataract, RI, 02987-1016, US, (401) 747-0763', '3685 Rocky Glade, Showtucket, NU, X1E-9I0, CA, (867) 371-4215', '3235 High Forest, Glen Campbell, MS, 39035-6845, US, (601) 638-8186', '2234 Sleepy Pony Mall , Drain, DC, 20078-4243, US, (202) 948-3634', '2722 Hazy Turnabout, Burnt Cabins, NY, 14120-5642, US, (917) 604-6597', '6686 Lazy Ledge, Two Rock, CA, 92639-3020, US, (619) 901-9911', '2000 Dewy Limits, Wacahoota, NF, A4L-2V9, CA, (709) 065-3959', '7710 Noble Pond Avenue, Bolivia, RI, 02931-1842, US, (401) 865-2160', '3452 Sunny Vale, Pyro, ON, M8V-4Z0, CA, (519) 072-8609', '4402 Dusty Cove, Many Farms, UT, 84853-8223, US, (435) 518-0673', '5198 Silent Parade, Round Bottom, MD, 21542-9798, US, (301) 060-7245', '8550 Shady Moor, Kitty Fork, CO, 80941-6207, US, (303) 502-3767', '2131 Old Dell, Merry Midnight, AK, 99906-8842, US, (907) 369-2206', '7390 Harvest Crest, Mosquito Crossing, RI, 02957-6116, US, (401) 463-6348', '874 Little Point, Hot Coffee, BC, V3U-2P6, CA, (250) 706-9207', '8834 Stony Pioneer Heights, Newlove, OR, 97419-8670, US, (541) 408-2213', '9829 Grand Beach, Flint, UT, 84965-9900, US, (435) 700-5161', '3799 Cozy Blossom Ramp, Ptarmigan, MS, 38715-0313, US, (769) 740-1526', '3254 Silver Island Loop, Maunaloa, DE, 19869-3169, US, (302) 667-7671', '1081 Middle Wood, Taylors Gut Landing, OR, 97266-2873, US, (541) 357-6310', '1137 Umber Trail, Shacktown, NW, X3U-5Y8, CA, (867) 702-6883', '9914 Hidden Bank, Wyoming, MO, 64635-9665, US, (636) 280-4192', '7080 Misty Nectar Townline, Coward, AB, T9U-3N4, CA, (403) 623-2838', '1184 Wishing Grounds, Vibank, NW, X7D-0V9, CA, (867) 531-2730', '126 Easy Pointe, Grandview Beach, KY, 40928-9539, US, (502) 548-0956', '6683 Colonial Street, Swan River, BC, V1A-9I8, CA, (778) 014-4257', '960 Gentle Oak Lane, Shakopee, ND, 58618-6277, US, (701) 327-1219', '6918 Cotton Pine Corner, Kenaston, IA, 52165-3975, US, (515) 906-7427', '2368 Burning Woods, Ernfold, NY, 11879-9186, US, (646) 819-0355', '5646 Quiet Shadow Chase, Tiger Tail, IA, 52283-5537, US, (712) 375-9225', '5466 Foggy Mountain Dale, Sweet Home, MT, 59738-0251, US, (406) 881-1706', '5313 Clear Willow Route, Amazon, BC, V0S-2S6, CA, (604) 340-7596', '7000 Pleasant Autoroute, Spaceport City, UT, 84749-2448, US, (435) 154-3360', '8359 Quaking Anchor Road, Gross, BC, V9O-0H5, CA, (250) 985-3859', '5143 Amber Deer Hollow, New Deal, ND, 58446-0853, US, (701) 927-0322', '6230 Jagged Bear Key, Young, AR, 72337-3811, US, (501) 805-7239', '7207 Heather Vista, Devon, WY, 82520-1771, US, (307) 358-7092', '9416 Red Rise Place, Spraytown, OK, 73809-4766, US, (580) 867-1973', '3770 Golden Horse Diversion, Yelland, IL, 60471-1487, US, (224) 717-9349', '4819 Honey Treasure Park, Alaska, NB, E1U-3I0, CA, (506) 656-9138', '6187 Round Front, Land O Lakes, AK, 99873-6403, US, (907) 853-9063', '9218 Crystal Highway, Pickelville, MT, 59847-9299, US, (406) 076-0024', '6737 Bright Quay, Lazy Mountain, KY, 42390-4772, US, (606) 256-7288', '237 Merry Campus, Twentysix, SC, 29330-4909, US, (864) 945-0157', '446 Fallen Gate Rise, Petrolia, SC, 29959-9527, US, (864) 826-0553', '2347 Indian Boulevard, Frisbee, VA, 23797-6458, US, (703) 656-8445', '365 Emerald Grove Line, Level, NC, 28381-1514, US, (919) 976-7958', '1207 Iron Extension, Klickitat, SC, 29197-8571, US, (803) 535-7888', '6770 Cinder Glen, Caronport, OH, 45053-5002, US, (440) 369-4018', '7619 Tawny Carrefour, Senlac, NV, 89529-9876, US, (775) 901-6433'];
	
	RefData.IT_SKILLS = ['android', 'css', 'html5', 'mac', 'windows'];
	
	RefData.IT_SKILLS_NAMES = ['Android', 'CSS', 'HTML 5', 'Mac', 'Windows'];

/***/ },
/* 163 */
/*!************************************!*\
  !*** ./src/SkillsCellRenderer.jsx ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _react = __webpack_require__(/*! react */ 147);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _RefData = __webpack_require__(/*! ./RefData */ 162);
	
	var _RefData2 = _interopRequireDefault(_RefData);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var SkillsCellRenderer = function (_React$Component) {
	    _inherits(SkillsCellRenderer, _React$Component);
	
	    function SkillsCellRenderer() {
	        _classCallCheck(this, SkillsCellRenderer);
	
	        return _possibleConstructorReturn(this, Object.getPrototypeOf(SkillsCellRenderer).apply(this, arguments));
	    }
	
	    _createClass(SkillsCellRenderer, [{
	        key: 'render',
	        value: function render() {
	            var skills = [];
	            var rowData = this.props.params.data;
	            _RefData2.default.IT_SKILLS.forEach(function (skill) {
	                if (rowData.skills[skill]) {
	                    skills.push(_react2.default.createElement('img', { key: skill, src: 'images/skills/' + skill + '.png', width: 16, title: skill }));
	                }
	            });
	
	            return _react2.default.createElement(
	                'span',
	                null,
	                skills
	            );
	        }
	    }]);
	
	    return SkillsCellRenderer;
	}(_react2.default.Component);
	
	// the grid will always pass in one props called 'params',
	// which is the grid passing you the params for the cellRenderer.
	// this piece is optional. the grid will always pass the 'params'
	// props, so little need for adding this validation meta-data.
	
	exports.default = SkillsCellRenderer;
	SkillsCellRenderer.propTypes = {
	    params: _react2.default.PropTypes.object
	};

/***/ },
/* 164 */
/*!***********************!*\
  !*** ./src/MyApp.css ***!
  \***********************/
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(/*! !./../~/css-loader!./MyApp.css */ 165);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(/*! ./../~/style-loader/addStyles.js */ 167)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../node_modules/css-loader/index.js!./MyApp.css", function() {
				var newContent = require("!!./../node_modules/css-loader/index.js!./MyApp.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 165 */
/*!**************************************!*\
  !*** ./~/css-loader!./src/MyApp.css ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(/*! ./../~/css-loader/lib/css-base.js */ 166)();
	// imports
	
	
	// module
	exports.push([module.id, "\r\n.ag-cell {\r\n    padding-top: 2px !important;\r\n    padding-bottom: 2px !important;\r\n}\r\n\r\nlabel {\r\n    font-weight: normal !important;\r\n}\r\n\r\n.div-percent-bar {\r\n    display: inline-block;\r\n    height: 100%;\r\n    position: relative;\r\n}\r\n\r\n.div-percent-value {\r\n    position: absolute;\r\n    z-index: 1;\r\n    padding-left: 4px;\r\n    font-weight: bold;\r\n    font-size: 13px;\r\n}\r\n\r\n.div-outer-div {\r\n    display: inline-block;\r\n    height: 100%;\r\n    width: 100%;\r\n}\r\n", ""]);
	
	// exports


/***/ },
/* 166 */
/*!**************************************!*\
  !*** ./~/css-loader/lib/css-base.js ***!
  \**************************************/
/***/ function(module, exports) {

	"use strict";
	
	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function () {
		var list = [];
	
		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for (var i = 0; i < this.length; i++) {
				var item = this[i];
				if (item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};
	
		// import a list of modules into the list
		list.i = function (modules, mediaQuery) {
			if (typeof modules === "string") modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for (var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if (typeof id === "number") alreadyImportedModules[id] = true;
			}
			for (i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if (typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if (mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if (mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};

/***/ },
/* 167 */
/*!*************************************!*\
  !*** ./~/style-loader/addStyles.js ***!
  \*************************************/
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];
	
	module.exports = function(list, options) {
		if(true) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}
	
		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();
	
		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";
	
		var styles = listToStyles(list);
		addStylesToDom(styles, options);
	
		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}
	
	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}
	
	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}
	
	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}
	
	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}
	
	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}
	
	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}
	
	function addStyle(obj, options) {
		var styleElement, update, remove;
	
		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}
	
		update(obj);
	
		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}
	
	var replaceText = (function () {
		var textStore = [];
	
		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();
	
	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;
	
		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}
	
	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
		var sourceMap = obj.sourceMap;
	
		if(media) {
			styleElement.setAttribute("media", media)
		}
	
		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}
	
	function updateLink(linkElement, obj) {
		var css = obj.css;
		var media = obj.media;
		var sourceMap = obj.sourceMap;
	
		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}
	
		var blob = new Blob([css], { type: "text/css" });
	
		var oldSrc = linkElement.href;
	
		linkElement.href = URL.createObjectURL(blob);
	
		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },
/* 168 */
/*!************************************!*\
  !*** ./~/ag-grid/dist/ag-grid.css ***!
  \************************************/
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(/*! !./../../css-loader!./ag-grid.css */ 169);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(/*! ./../../style-loader/addStyles.js */ 167)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../css-loader/index.js!./ag-grid.css", function() {
				var newContent = require("!!./../../css-loader/index.js!./ag-grid.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 169 */
/*!***************************************************!*\
  !*** ./~/css-loader!./~/ag-grid/dist/ag-grid.css ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(/*! ./../../css-loader/lib/css-base.js */ 166)();
	// imports
	
	
	// module
	exports.push([module.id, "ag-grid-ng2 {\n  display: inline-block;\n}\n.ag-root {\n  font-size: 14px;\n  cursor: default;\n/* set to relative, so absolute popups appear relative to this */\n  position: relative;\n/* disable user mouse selection */\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n/* was getting some 'should be there' scrolls, this sorts it out */\n  overflow: hidden;\n}\n.ag-no-scrolls {\n  white-space: nowrap;\n  display: inline-block;\n}\n.ag-scrolls {\n  height: 100%;\n}\n.ag-popup-backdrop {\n  position: fixed;\n  left: 0px;\n  top: 0px;\n  width: 100%;\n  height: 100%;\n}\n.ag-header {\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  white-space: nowrap;\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n  overflow: hidden;\n  width: 100%;\n}\n.ag-pinned-left-header {\n  float: left;\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n  display: inline-block;\n  overflow: hidden;\n  height: 100%;\n}\n.ag-pinned-right-header {\n  float: right;\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n  display: inline-block;\n  overflow: hidden;\n  height: 100%;\n}\n.ag-header-viewport {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n  overflow: hidden;\n  height: 100%;\n}\n.ag-scrolls .ag-header-container {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n  position: relative;\n  white-space: nowrap;\n  height: 100%;\n}\n.ag-no-scrolls .ag-header-container {\n  white-space: nowrap;\n}\n.ag-header-cell {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n  vertical-align: bottom;\n  text-align: center;\n  display: inline-block;\n  height: 100%;\n}\n.ag-header-group-cell {\n  display: inline-block;\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n  -o-text-overflow: ellipsis;\n  text-overflow: ellipsis;\n  overflow: hidden;\n}\n.ag-header-group-cell-label {\n  display: table-cell;\n  -o-text-overflow: ellipsis;\n  text-overflow: ellipsis;\n  overflow: hidden;\n}\n.ag-header-cell-label {\n  -o-text-overflow: ellipsis;\n  text-overflow: ellipsis;\n  overflow: hidden;\n}\n.ag-header-cell-resize {\n  height: 100%;\n  width: 4px;\n  float: right;\n  cursor: col-resize;\n}\n.ag-header-expand-icon {\n  padding-left: 4px;\n}\n.ag-header-cell-menu-button {\n  float: right;\n}\n.ag-overlay-panel {\n  display: table;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n}\n.ag-overlay-wrapper {\n  display: table-cell;\n  vertical-align: middle;\n  text-align: center;\n}\n.ag-body {\n  height: 100%;\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n.ag-floating-top {\n  position: absolute;\n  left: 0px;\n  width: 100%;\n  white-space: nowrap;\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n  overflow: hidden;\n}\n.ag-pinned-left-floating-top {\n  float: left;\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n  display: inline-block;\n  overflow: hidden;\n  height: 100%;\n}\n.ag-pinned-right-floating-top {\n  float: right;\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n  display: inline-block;\n  overflow: hidden;\n  height: 100%;\n}\n.ag-floating-top-viewport {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n  overflow: hidden;\n  height: 100%;\n}\n.ag-floating-top-container {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n  position: relative;\n  white-space: nowrap;\n}\n.ag-floating-bottom {\n  position: absolute;\n  left: 0px;\n  width: 100%;\n  white-space: nowrap;\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n  overflow: hidden;\n}\n.ag-pinned-left-floating-bottom {\n  float: left;\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n  display: inline-block;\n  overflow: hidden;\n  height: 100%;\n}\n.ag-pinned-right-floating-bottom {\n  float: right;\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n  display: inline-block;\n  overflow: hidden;\n  height: 100%;\n}\n.ag-floating-bottom-viewport {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n  overflow: hidden;\n  height: 100%;\n}\n.ag-floating-bottom-container {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n  position: relative;\n  white-space: nowrap;\n}\n.ag-pinned-left-cols-viewport {\n  float: left;\n  overflow: hidden;\n}\n.ag-pinned-left-cols-container {\n  display: inline-block;\n  position: relative;\n}\n.ag-pinned-right-cols-viewport {\n  float: right;\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n.ag-pinned-right-cols-container {\n  display: inline-block;\n  position: relative;\n}\n.ag-body-viewport-wrapper {\n  height: 100%;\n}\n.ag-body-viewport {\n  overflow-x: auto;\n  overflow-y: auto;\n  height: 100%;\n}\n.ag-scrolls .ag-body-container {\n  position: relative;\n  display: inline-block;\n}\n.ag-scrolls .ag-row {\n  white-space: nowrap;\n  position: absolute;\n  width: 100%;\n}\n.agile-gird-row:hover {\n  background-color: #f0f8ff;\n}\n.ag-cell {\n  display: inline-block;\n  white-space: nowrap;\n  height: 100%;\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n  -o-text-overflow: ellipsis;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  float: left;\n}\n.ag-group-cell-entire-row {\n  width: 100%;\n  display: inline-block;\n  white-space: nowrap;\n  height: 100%;\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n  -o-text-overflow: ellipsis;\n  text-overflow: ellipsis;\n  overflow: hidden;\n}\n.ag-footer-cell-entire-row {\n  width: 100%;\n  display: inline-block;\n  white-space: nowrap;\n  height: 100%;\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n  -o-text-overflow: ellipsis;\n  text-overflow: ellipsis;\n  overflow: hidden;\n}\n.ag-large .ag-root {\n  font-size: 20px;\n}\n.ag-filter {\n  position: absolute;\n  z-index: 100;\n}\n.ag-filter-list-viewport {\n  overflow-x: auto;\n  height: 200px;\n  width: 200px;\n}\n.ag-filter-list-container {\n  position: relative;\n  overflow: hidden;\n}\n.ag-filter-item {\n  -o-text-overflow: ellipsis;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n  position: absolute;\n}\n.ag-filter-filter {\n  width: 170px;\n  margin: 4px;\n}\n.ag-filter-select {\n  width: 110px;\n  margin: 4px 4px 0px 4px;\n}\n.ag-no-vertical-scroll .ag-scrolls {\n  height: unset;\n}\n.ag-no-vertical-scroll .ag-body {\n  height: unset;\n}\n.ag-no-vertical-scroll .ag-body-viewport-wrapper {\n  height: unset;\n}\n.ag-no-vertical-scroll .ag-body-viewport {\n  height: unset;\n}\n.ag-list-selection {\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  cursor: default;\n}\n.ag-tool-panel-container {\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  cursor: default;\n  width: 200px;\n}\n", ""]);
	
	// exports


/***/ },
/* 170 */
/*!****************************************!*\
  !*** ./~/ag-grid/dist/theme-fresh.css ***!
  \****************************************/
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(/*! !./../../css-loader!./theme-fresh.css */ 171);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(/*! ./../../style-loader/addStyles.js */ 167)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../css-loader/index.js!./theme-fresh.css", function() {
				var newContent = require("!!./../../css-loader/index.js!./theme-fresh.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 171 */
/*!*******************************************************!*\
  !*** ./~/css-loader!./~/ag-grid/dist/theme-fresh.css ***!
  \*******************************************************/
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(/*! ./../../css-loader/lib/css-base.js */ 166)();
	// imports
	
	
	// module
	exports.push([module.id, ".ag-fresh .ag-root {\n  border: 1px solid #808080;\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n}\n.ag-fresh .ag-cell {\n  padding: 2px;\n}\n.ag-fresh .ag-cell-focus {\n  border: 1px solid #a9a9a9;\n}\n.ag-fresh .ag-cell-no-focus {\n  border-right: 1px dotted #808080;\n  border-top: 1px solid transparent;\n  border-left: 1px solid transparent;\n  border-bottom: 1px solid transparent;\n}\n.ag-fresh .ag-cell-first-right-pinned {\n  border-left: 1px dotted #808080;\n}\n.ag-fresh .ag-header {\n  background: -webkit-linear-gradient(#fff, #d3d3d3);\n  background: -moz-linear-gradient(#fff, #d3d3d3);\n  background: -o-linear-gradient(#fff, #d3d3d3);\n  background: -ms-linear-gradient(#fff, #d3d3d3);\n  background: linear-gradient(#fff, #d3d3d3);\n  border-bottom: 1px solid #808080;\n}\n.ag-fresh .ag-no-scrolls .ag-header-container {\n  background: -webkit-linear-gradient(#fff, #d3d3d3);\n  background: -moz-linear-gradient(#fff, #d3d3d3);\n  background: -o-linear-gradient(#fff, #d3d3d3);\n  background: -ms-linear-gradient(#fff, #d3d3d3);\n  background: linear-gradient(#fff, #d3d3d3);\n  border-bottom: 1px solid #808080;\n}\n.ag-fresh .ag-header-cell {\n  border-right: 1px solid #808080;\n}\n.ag-fresh .ag-header-group-cell {\n  border-right: 1px solid #808080;\n}\n.ag-fresh .ag-header-group-cell-with-group {\n  border-bottom: 1px solid #808080;\n}\n.ag-fresh .ag-header-cell-label {\n  padding: 4px 2px 4px 2px;\n}\n.ag-fresh .ag-header-cell-text {\n  padding-left: 2px;\n}\n.ag-fresh .ag-header-group-cell-label {\n  padding: 4px;\n  padding-left: 10px;\n}\n.ag-fresh .ag-header-group-text {\n  margin-right: 2px;\n}\n.ag-fresh .ag-header-cell-menu-button {\n  padding: 2px;\n  margin-top: 4px;\n  border: 1px solid transparent;\n  -webkit-border-radius: 3px;\n  border-radius: 3px;\n  -webkit-box-sizing: content-box;\n  -moz-box-sizing: content-box;\n  box-sizing: content-box; /* When using bootstrap, box-sizing was set to 'border-box' */\n  line-height: 0px; /* normal line height, a space was appearing below the menu button */\n}\n.ag-fresh .ag-pinned-right-header {\n  border-left: 1px solid #808080;\n}\n.ag-fresh .ag-header-cell-menu-button:hover {\n  border: 1px solid #000;\n}\n.ag-fresh .ag-header-icon {\n  color: #800000;\n}\n.ag-fresh .ag-row-selected {\n  background-color: #b0e0e6 !important;\n}\n.ag-fresh .ag-body .ag-row-odd {\n  background-color: #f6f6f6;\n}\n.ag-fresh .ag-body .ag-row-even {\n  background-color: #fff;\n}\n.ag-fresh .ag-floating-top .ag-row {\n  background-color: #f0f0f0;\n}\n.ag-fresh .ag-floating-bottom .ag-row {\n  background-color: #f0f0f0;\n}\n.ag-fresh .ag-overlay-loading-wrapper {\n  background-color: rgba(255,255,255,0.5);\n}\n.ag-fresh .ag-overlay-loading-center {\n  background-color: #fff;\n  border: 1px solid #a9a9a9;\n  -webkit-border-radius: 10px;\n  border-radius: 10px;\n  padding: 10px;\n}\n.ag-fresh .ag-overlay-no-rows-center {\n  background-color: #fff;\n  border: 1px solid #a9a9a9;\n  -webkit-border-radius: 10px;\n  border-radius: 10px;\n  padding: 10px;\n}\n.ag-fresh .ag-body {\n  background-color: #fafafa;\n}\n.ag-fresh .ag-group-cell-entire-row {\n  background-color: #aaa;\n  padding: 4px;\n}\n.ag-fresh .ag-footer-cell-entire-row {\n  background-color: #aaa;\n  padding: 4px;\n}\n.ag-fresh .ag-group-cell {\n  font-style: italic;\n}\n.ag-fresh .ag-group-expand {\n  padding-right: 2px;\n}\n.ag-fresh .ag-footer-cell {\n  font-style: italic;\n}\n.ag-fresh .ag-filter-checkbox {\n  position: relative;\n  top: 2px;\n  left: 2px;\n}\n.ag-fresh .ag-filter-header-container {\n  border-bottom: 1px solid #d3d3d3;\n}\n.ag-fresh .ag-filter-apply-panel {\n  border-top: 1px solid #d3d3d3;\n  padding: 2px;\n}\n.ag-fresh .ag-filter {\n  border: 1px solid #000;\n  background-color: #f0f0f0;\n}\n.ag-fresh .ag-filter-value {\n  margin-left: 4px;\n}\n.ag-fresh .ag-selection-checkbox {\n  margin-left: 4px;\n}\n.ag-fresh .ag-paging-panel {\n  padding: 4px;\n}\n.ag-fresh .ag-paging-button {\n  margin-left: 4px;\n  margin-right: 4px;\n}\n.ag-fresh .ag-paging-row-summary-panel {\n  display: inline-block;\n  width: 300px;\n}\n.ag-fresh .ag-column-not-visible {\n  opacity: 0.75;\n  -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=75)\";\n  filter: alpha(opacity=75);\n}\n.ag-fresh .ag-not-dragging {\n  border: 1px solid transparent;\n}\n.ag-fresh .ag-drop-target-above {\n  border-top: 5px solid #a9a9a9;\n}\n.ag-fresh .ag-drop-target-below {\n  border-bottom: 5px solid #a9a9a9;\n}\n.ag-fresh .ag-dragging {\n  border: 1px dotted #a9a9a9;\n}\n.ag-fresh .ag-list-item-selected {\n  color: #f0f0f0;\n}\n.ag-fresh .ag-list-item-not-selected {\n  font-style: italic;\n  color: #a0a0a0;\n}\n.ag-fresh .ag-tool-panel-container {\n  background-color: #eee;\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n  border: 1px solid #a9a9a9;\n  padding: 4px;\n}\n.ag-fresh .ag-list-selection {\n  background-color: #fff;\n  border: 1px solid #a9a9a9;\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n.ag-fresh .ag-popup-list .ag-list-item:hover {\n  background-color: #add8e6;\n}\n.ag-fresh .ag-visible-icons {\n  padding-left: 2px;\n  padding-right: 2px;\n}\n", ""]);
	
	// exports


/***/ },
/* 172 */
/*!*******************************!*\
  !*** ./src/RowDataFactory.js ***!
  \*******************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _RefData = __webpack_require__(/*! ./RefData */ 162);
	
	var _RefData2 = _interopRequireDefault(_RefData);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var RowDataFactory = function () {
	    function RowDataFactory() {
	        _classCallCheck(this, RowDataFactory);
	    }
	
	    _createClass(RowDataFactory, [{
	        key: 'createRowData',
	        value: function createRowData() {
	            var rowData = [];
	
	            for (var i = 0; i < 1000; i++) {
	                var countryData = _RefData2.default.COUNTRIES[i % _RefData2.default.COUNTRIES.length];
	                rowData.push({
	                    name: _RefData2.default.FIRST_NAMES[i % _RefData2.default.FIRST_NAMES.length] + ' ' + _RefData2.default.LAST_NAMES[i % _RefData2.default.LAST_NAMES.length],
	                    skills: {
	                        android: Math.random() < 0.4,
	                        html5: Math.random() < 0.4,
	                        mac: Math.random() < 0.4,
	                        windows: Math.random() < 0.4,
	                        css: Math.random() < 0.4
	                    },
	                    address: _RefData2.default.ADDRESSES[i % _RefData2.default.ADDRESSES.length],
	                    years: Math.round(Math.random() * 100),
	                    proficiency: Math.round(Math.random() * 100),
	                    country: countryData.country,
	                    continent: countryData.continent,
	                    language: countryData.language,
	                    mobile: this.createRandomPhoneNumber(),
	                    landline: this.createRandomPhoneNumber()
	                });
	            }
	
	            return rowData;
	        }
	    }, {
	        key: 'createRandomPhoneNumber',
	        value: function createRandomPhoneNumber() {
	            var result = '+';
	            for (var i = 0; i < 12; i++) {
	                result += Math.round(Math.random() * 10);
	                if (i === 2 || i === 5 || i === 8) {
	                    result += ' ';
	                }
	            }
	            return result;
	        }
	    }]);
	
	    return RowDataFactory;
	}();

	exports.default = RowDataFactory;

/***/ },
/* 173 */,
/* 174 */
/*!*******************************!*\
  !*** ./src/ColDefFactory.jsx ***!
  \*******************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _SkillsCellRenderer = __webpack_require__(/*! ./SkillsCellRenderer.jsx */ 163);
	
	var _SkillsCellRenderer2 = _interopRequireDefault(_SkillsCellRenderer);
	
	var _ProficiencyCellRenderer = __webpack_require__(/*! ./ProficiencyCellRenderer.jsx */ 175);
	
	var _ProficiencyCellRenderer2 = _interopRequireDefault(_ProficiencyCellRenderer);
	
	var _RefData = __webpack_require__(/*! ./RefData */ 162);
	
	var _RefData2 = _interopRequireDefault(_RefData);
	
	var _reactDom = __webpack_require__(/*! react-dom */ 1);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _react = __webpack_require__(/*! react */ 147);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _agGridReactComponent = __webpack_require__(/*! ag-grid-react-component */ 160);
	
	var _agGridReactComponent2 = _interopRequireDefault(_agGridReactComponent);
	
	var _SkillsFilter = __webpack_require__(/*! ./SkillsFilter.jsx */ 177);
	
	var _SkillsFilter2 = _interopRequireDefault(_SkillsFilter);
	
	var _ProficiencyFilter = __webpack_require__(/*! ./ProficiencyFilter.jsx */ 178);
	
	var _ProficiencyFilter2 = _interopRequireDefault(_ProficiencyFilter);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var ColDefFactory = function () {
	    function ColDefFactory() {
	        _classCallCheck(this, ColDefFactory);
	    }
	
	    _createClass(ColDefFactory, [{
	        key: 'createColDefs',
	        value: function createColDefs() {
	
	            var columnDefs = [{ headerName: '', width: 30, checkboxSelection: true, suppressSorting: true,
	                suppressMenu: true, pinned: true }, {
	                headerName: 'Employee',
	                children: [{ headerName: "Name", field: "name",
	                    width: 150, pinned: true }, { headerName: "Country", field: "country", width: 150,
	                    // not bothering with React for country, as it's a simple HTML string
	                    cellRenderer: countryCellRenderer, pinned: true,
	                    filterParams: { cellRenderer: countryCellRenderer, cellHeight: 20 } }]
	            }, {
	                headerName: 'IT Skills',
	                children: [{ headerName: "Skills", width: 125, suppressSorting: true, field: 'skills',
	                    // using ag-Grid's React cellRenderer factory
	                    cellRenderer: (0, _agGridReactComponent.reactCellRendererFactory)(_SkillsCellRenderer2.default),
	                    // using ag-Grid's React filter factory
	                    filter: (0, _agGridReactComponent.reactFilterFactory)(_SkillsFilter2.default)
	                }, { headerName: "Proficiency", field: "proficiency", filter: 'number', width: 120,
	                    // using ag-Grid's React cellRenderer factory
	                    cellRenderer: (0, _agGridReactComponent.reactCellRendererFactory)(_ProficiencyCellRenderer2.default),
	                    // using ag-Grid's React filter factory
	                    filter: (0, _agGridReactComponent.reactFilterFactory)(_ProficiencyFilter2.default) }]
	            }, {
	                headerName: 'Contact',
	                children: [{ headerName: "Mobile", field: "mobile", width: 150, filter: 'text' }, { headerName: "Land-line", field: "landline", width: 150, filter: 'text' }, { headerName: "Address", field: "address", width: 500, filter: 'text' }]
	            }];
	            return columnDefs;
	        }
	    }]);
	
	    return ColDefFactory;
	}();
	
	// this is a simple cell renderer, putting together static html, no
	// need to use React for it.
	
	exports.default = ColDefFactory;
	function countryCellRenderer(params) {
	    var flag = "<img border='0' width='15' height='10' " + "style='margin-bottom: 2px' src='http://flags.fmcdn.net/data/flags/mini/" + _RefData2.default.COUNTRY_CODES[params.value] + ".png'>";
	    return flag + " " + params.value;
	}

/***/ },
/* 175 */
/*!*****************************************!*\
  !*** ./src/ProficiencyCellRenderer.jsx ***!
  \*****************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _react = __webpack_require__(/*! react */ 147);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _RefData = __webpack_require__(/*! ./RefData */ 162);
	
	var _RefData2 = _interopRequireDefault(_RefData);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	// cell renderer for the proficiency column. this is a very basic cell renderer,
	// it is arguable that we should not of used React and just returned a string of
	// html as a normal ag-Grid cellRenderer.
	
	var ProficiencyCellRenderer = function (_React$Component) {
	    _inherits(ProficiencyCellRenderer, _React$Component);
	
	    function ProficiencyCellRenderer() {
	        _classCallCheck(this, ProficiencyCellRenderer);
	
	        return _possibleConstructorReturn(this, Object.getPrototypeOf(ProficiencyCellRenderer).apply(this, arguments));
	    }
	
	    _createClass(ProficiencyCellRenderer, [{
	        key: 'render',
	        value: function render() {
	            var params = this.props.params;
	            var backgroundColor;
	            if (params.value < 20) {
	                backgroundColor = 'red';
	            } else if (params.value < 60) {
	                backgroundColor = '#ff9900';
	            } else {
	                backgroundColor = '#00A000';
	            }
	
	            return _react2.default.createElement(
	                'div',
	                { className: 'div-percent-bar', style: { width: params.value + '%', backgroundColor: backgroundColor } },
	                _react2.default.createElement(
	                    'div',
	                    { className: 'div-percent-value' },
	                    params.value,
	                    '%'
	                )
	            );
	        }
	    }]);
	
	    return ProficiencyCellRenderer;
	}(_react2.default.Component);
	
	// the grid will always pass in one props called 'params',
	// which is the grid passing you the params for the cellRenderer.
	// this piece is optional. the grid will always pass the 'params'
	// props, so little need for adding this validation meta-data.
	
	exports.default = ProficiencyCellRenderer;
	ProficiencyCellRenderer.propTypes = {
	    params: _react2.default.PropTypes.object
	};

/***/ },
/* 176 */,
/* 177 */
/*!******************************!*\
  !*** ./src/SkillsFilter.jsx ***!
  \******************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _react = __webpack_require__(/*! react */ 147);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _RefData = __webpack_require__(/*! ./RefData */ 162);
	
	var _RefData2 = _interopRequireDefault(_RefData);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	// the skills filter component. this can be laid out much better in a 'React'
	// way. there are design patterns you can apply to layout out your React classes.
	// however, i'm not worried, as the intention here is to show you ag-Grid
	// working with React, and that's all. i'm not looking for any awards for my
	// React design skills.
	
	var SkillsFilter = function (_React$Component) {
	    _inherits(SkillsFilter, _React$Component);
	
	    function SkillsFilter() {
	        _classCallCheck(this, SkillsFilter);
	
	        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(SkillsFilter).call(this));
	
	        _this.state = {
	            skills: _RefData2.default.IT_SKILLS,
	            skillNames: _RefData2.default.IT_SKILLS_NAMES,
	            android: false,
	            css: false,
	            html5: false,
	            mac: false,
	            windows: false
	        };
	        return _this;
	    }
	
	    // called by agGrid
	
	    _createClass(SkillsFilter, [{
	        key: 'init',
	        value: function init(params) {
	            this.filterChangedCallback = params.filterChangedCallback;
	        }
	
	        // called by agGrid
	
	    }, {
	        key: 'doesFilterPass',
	        value: function doesFilterPass(params) {
	            var _this2 = this;
	
	            var rowSkills = params.data.skills;
	            var passed = true;
	
	            this.state.skills.forEach(function (skill) {
	                if (_this2.state[skill]) {
	                    if (!rowSkills[skill]) {
	                        passed = false;
	                    }
	                }
	            });
	
	            return passed;
	        }
	    }, {
	        key: 'isFilterActive',
	
	        // called by agGrid
	        value: function isFilterActive() {
	            var somethingSelected = this.state.android || this.state.css || this.state.html5 || this.state.mac || this.state.windows;
	            return somethingSelected;
	        }
	    }, {
	        key: 'onSkillChanged',
	        value: function onSkillChanged(skill, event) {
	            var _this3 = this;
	
	            var newValue = event.target.checked;
	            var newModel = {};
	            newModel[skill] = newValue;
	            this.setState(newModel, function () {
	                _this3.filterChangedCallback();
	            });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this4 = this;
	
	            var skillsTemplates = [];
	            this.state.skills.forEach(function (skill, index) {
	
	                var skillName = _this4.state.skillNames[index];
	                var template = _react2.default.createElement(
	                    'label',
	                    { key: skill, style: { border: '1px solid lightgrey', margin: 4, padding: 4, display: 'inline-block' } },
	                    _react2.default.createElement(
	                        'span',
	                        null,
	                        _react2.default.createElement(
	                            'div',
	                            { style: { textAlign: 'center' } },
	                            skillName
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            null,
	                            _react2.default.createElement('input', { type: 'checkbox', onClick: _this4.onSkillChanged.bind(_this4, skill) }),
	                            _react2.default.createElement('img', { src: 'images/skills/' + skill + '.png', width: 30 })
	                        )
	                    )
	                );
	
	                skillsTemplates.push(template);
	            });
	
	            return _react2.default.createElement(
	                'div',
	                { style: { width: 380 } },
	                _react2.default.createElement(
	                    'div',
	                    { style: { textAlign: 'center', background: 'lightgray', width: '100%', display: 'block', borderBottom: '1px solid grey' } },
	                    _react2.default.createElement(
	                        'b',
	                        null,
	                        'Custom Skills Filter'
	                    )
	                ),
	                skillsTemplates
	            );
	        }
	
	        // these are other method that agGrid calls that we
	        // could of implemented, but they are optional and
	        // we have no use for them in this particular filter.
	        //getApi() {}
	        //afterGuiAttached(params) {}
	        //onNewRowsLoaded() {}
	        //onAnyFilterChanged() {}
	
	    }]);
	
	    return SkillsFilter;
	}(_react2.default.Component);
	
	exports.default = SkillsFilter;

/***/ },
/* 178 */
/*!***********************************!*\
  !*** ./src/ProficiencyFilter.jsx ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _react = __webpack_require__(/*! react */ 147);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _RefData = __webpack_require__(/*! ./RefData */ 162);
	
	var _RefData2 = _interopRequireDefault(_RefData);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var PROFICIENCY_NAMES = ['No Filter', 'Above 40%', 'Above 60%', 'Above 80%'];
	
	// the proficiency filter component. this demonstrates how to integrate
	// a React filter component with ag-Grid.
	
	var ProficiencyFilter = function (_React$Component) {
	    _inherits(ProficiencyFilter, _React$Component);
	
	    function ProficiencyFilter() {
	        _classCallCheck(this, ProficiencyFilter);
	
	        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ProficiencyFilter).call(this));
	
	        _this.state = {
	            selected: PROFICIENCY_NAMES[0]
	        };
	        return _this;
	    }
	
	    // called by agGrid
	
	    _createClass(ProficiencyFilter, [{
	        key: 'init',
	        value: function init(params) {
	            this.filterChangedCallback = params.filterChangedCallback;
	            this.valueGetter = params.valueGetter;
	        }
	
	        // called by agGrid
	
	    }, {
	        key: 'doesFilterPass',
	        value: function doesFilterPass(params) {
	            var value = this.valueGetter(params);
	            var valueAsNumber = parseFloat(value);
	
	            switch (this.state.selected) {
	                case PROFICIENCY_NAMES[1]:
	                    return valueAsNumber >= 40;
	                case PROFICIENCY_NAMES[2]:
	                    return valueAsNumber >= 60;
	                case PROFICIENCY_NAMES[3]:
	                    return valueAsNumber >= 80;
	                default:
	                    return true;
	            }
	        }
	    }, {
	        key: 'isFilterActive',
	
	        // called by agGrid
	        value: function isFilterActive() {
	            return this.state.selected !== PROFICIENCY_NAMES[0];
	        }
	    }, {
	        key: 'onButtonPressed',
	        value: function onButtonPressed(name) {
	            var _this2 = this;
	
	            console.log(name);
	            this.setState({
	                selected: name
	            }, function () {
	                _this2.filterChangedCallback();
	            });
	            console.log(name);
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this3 = this;
	
	            var rows = [];
	            PROFICIENCY_NAMES.forEach(function (name) {
	                var selected = _this3.state.selected === name;
	                rows.push(_react2.default.createElement(
	                    'div',
	                    { key: name },
	                    _react2.default.createElement(
	                        'label',
	                        { style: { paddingLeft: 4 } },
	                        _react2.default.createElement('input', { type: 'radio', checked: selected, name: Math.random(), onChange: _this3.onButtonPressed.bind(_this3, name) }),
	                        name
	                    )
	                ));
	            });
	
	            return _react2.default.createElement(
	                'div',
	                null,
	                _react2.default.createElement(
	                    'div',
	                    { style: { textAlign: 'center', background: 'lightgray', width: '100%', display: 'block', borderBottom: '1px solid grey' } },
	                    _react2.default.createElement(
	                        'b',
	                        null,
	                        'Custom Proficiency Filter'
	                    )
	                ),
	                rows
	            );
	        }
	
	        // these are other method that agGrid calls that we
	        // could of implemented, but they are optional and
	        // we have no use for them in this particular filter.
	        //getApi() {}
	        //afterGuiAttached(params) {}
	        //onNewRowsLoaded() {}
	        //onAnyFilterChanged() {}
	
	    }]);
	
	    return ProficiencyFilter;
	}(_react2.default.Component);
	
	exports.default = ProficiencyFilter;

/***/ }
/******/ ]);
//# sourceMappingURL=bundle.js.map